{
  "address": "0xbD30E8680aB970e50A1c2FCD8329c635053d8909",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        }
      ],
      "name": "batchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        }
      ],
      "name": "batchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "smartSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract TokenInterface",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "smartSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "viewSplitExactIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "totalOutput",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "viewSplitExactOut",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "totalOutput",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x41a009948c147156b4ab66fd765d9c24314e77bacd165341b25f80678eb324a1",
  "receipt": {
    "to": null,
    "from": "0xf29162ed5Ed4Da23656C5190aae71e61Bb074AeC",
    "contractAddress": "0xbD30E8680aB970e50A1c2FCD8329c635053d8909",
    "transactionIndex": 4,
    "gasUsed": "2788942",
    "logsBloom": "0x
    "blockHash": "0xa910a8fa60e5d18a32f4dbd309cdb10bb96e14b1c43f105f8d071213ef2276f7",
    "transactionHash": "0x41a009948c147156b4ab66fd765d9c24314e77bacd165341b25f80678eb324a1",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 10725903,
        "transactionHash": "0x41a009948c147156b4ab66fd765d9c24314e77bacd165341b25f80678eb324a1",
        "address": "0xbD30E8680aB970e50A1c2FCD8329c635053d8909",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f29162ed5ed4da23656c5190aae71e61bb074aec"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xa910a8fa60e5d18a32f4dbd309cdb10bb96e14b1c43f105f8d071213ef2276f7"
      }
    ],
    "blockNumber": 10725903,
    "cumulativeGasUsed": "6956224",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4fac0386c4045b52756b206db3148201e42b3f62"
  ],
  "solcInputHash": "17dc03a2a7f6ca202a52a9d590aec799",
  "metadata": "{\"compiler\":{\"version\":\"0.5.12+commit.7709ece9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"smartSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"smartSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"viewSplitExactIn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalOutput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"viewSplitExactOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalOutput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangeProxy.sol\":\"ExchangeProxy\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":false,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"contracts/ExchangeProxy.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.5.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\n\\ninterface PoolInterface {\\n    function swapExactAmountIn(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256, uint256);\\n\\n    function swapExactAmountOut(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256, uint256);\\n\\n    function calcInGivenOut(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external pure returns (uint256);\\n\\n    function calcOutGivenIn(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external pure returns (uint256);\\n\\n    function getDenormalizedWeight(address) external view returns (uint256);\\n\\n    function getBalance(address) external view returns (uint256);\\n\\n    function getSwapFee() external view returns (uint256);\\n}\\n\\ninterface TokenInterface {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\ninterface RegistryInterface {\\n    function getBestPoolsWithLimit(\\n        address,\\n        address,\\n        uint256\\n    ) external view returns (address[] memory);\\n}\\n\\ncontract ExchangeProxy is Ownable {\\n    using SafeMath for uint256;\\n\\n    struct Pool {\\n        address pool;\\n        uint256 tokenBalanceIn;\\n        uint256 tokenWeightIn;\\n        uint256 tokenBalanceOut;\\n        uint256 tokenWeightOut;\\n        uint256 swapFee;\\n        uint256 effectiveLiquidity;\\n    }\\n\\n    struct Swap {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint256 maxPrice;\\n    }\\n\\n    TokenInterface weth;\\n    RegistryInterface registry;\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    uint256 private constant BONE = 10**18;\\n\\n    constructor(address _weth) public {\\n        weth = TokenInterface(_weth);\\n    }\\n\\n    function setRegistry(address _registry) external onlyOwner {\\n        registry = RegistryInterface(_registry);\\n    }\\n\\n    function batchSwapExactIn(\\n        Swap[] memory swaps,\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut\\n    ) public payable returns (uint256 totalAmountOut) {\\n        transferFromAll(tokenIn, totalAmountIn);\\n\\n        for (uint256 i = 0; i < swaps.length; i++) {\\n            Swap memory swap = swaps[i];\\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\\n            PoolInterface pool = PoolInterface(swap.pool);\\n\\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\\n                SwapTokenIn.approve(swap.pool, 0);\\n            }\\n            SwapTokenIn.approve(swap.pool, swap.swapAmount);\\n\\n            (uint256 tokenAmountOut, ) = pool.swapExactAmountIn(\\n                swap.tokenIn,\\n                swap.swapAmount,\\n                swap.tokenOut,\\n                swap.limitReturnAmount,\\n                swap.maxPrice\\n            );\\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\\n        }\\n\\n        require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        transferAll(tokenOut, totalAmountOut);\\n        transferAll(tokenIn, getBalance(tokenIn));\\n    }\\n\\n    function batchSwapExactOut(\\n        Swap[] memory swaps,\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint256 maxTotalAmountIn\\n    ) public payable returns (uint256 totalAmountIn) {\\n        transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n        for (uint256 i = 0; i < swaps.length; i++) {\\n            Swap memory swap = swaps[i];\\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\\n            PoolInterface pool = PoolInterface(swap.pool);\\n\\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\\n                SwapTokenIn.approve(swap.pool, 0);\\n            }\\n            SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\\n\\n            (uint256 tokenAmountIn, ) = pool.swapExactAmountOut(\\n                swap.tokenIn,\\n                swap.limitReturnAmount,\\n                swap.tokenOut,\\n                swap.swapAmount,\\n                swap.maxPrice\\n            );\\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\\n        }\\n        require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        transferAll(tokenOut, getBalance(tokenOut));\\n        transferAll(tokenIn, getBalance(tokenIn));\\n    }\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut\\n    ) public payable returns (uint256 totalAmountOut) {\\n        transferFromAll(tokenIn, totalAmountIn);\\n\\n        for (uint256 i = 0; i < swapSequences.length; i++) {\\n            uint256 tokenAmountOut;\\n            for (uint256 k = 0; k < swapSequences[i].length; k++) {\\n                Swap memory swap = swapSequences[i][k];\\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\\n                if (k == 1) {\\n                    // Makes sure that on the second swap the output of the first was used\\n                    // so there is not intermediate token leftover\\n                    swap.swapAmount = tokenAmountOut;\\n                }\\n\\n                PoolInterface pool = PoolInterface(swap.pool);\\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\\n                    SwapTokenIn.approve(swap.pool, 0);\\n                }\\n                SwapTokenIn.approve(swap.pool, swap.swapAmount);\\n                (tokenAmountOut, ) = pool.swapExactAmountIn(\\n                    swap.tokenIn,\\n                    swap.swapAmount,\\n                    swap.tokenOut,\\n                    swap.limitReturnAmount,\\n                    swap.maxPrice\\n                );\\n            }\\n            // This takes the amountOut of the last swap\\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\\n        }\\n\\n        require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        transferAll(tokenOut, totalAmountOut);\\n        transferAll(tokenIn, getBalance(tokenIn));\\n    }\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint256 maxTotalAmountIn\\n    ) public payable returns (uint256 totalAmountIn) {\\n        transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n        for (uint256 i = 0; i < swapSequences.length; i++) {\\n            uint256 tokenAmountInFirstSwap;\\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\\n            if (swapSequences[i].length == 1) {\\n                Swap memory swap = swapSequences[i][0];\\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\\n\\n                PoolInterface pool = PoolInterface(swap.pool);\\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\\n                    SwapTokenIn.approve(swap.pool, 0);\\n                }\\n                SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\\n\\n                (tokenAmountInFirstSwap, ) = pool.swapExactAmountOut(\\n                    swap.tokenIn,\\n                    swap.limitReturnAmount,\\n                    swap.tokenOut,\\n                    swap.swapAmount,\\n                    swap.maxPrice\\n                );\\n            } else {\\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\\n                // of token C. But first we need to buy B with A so we can then buy C with B\\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\\n                uint256 intermediateTokenAmount; // This would be token B as described above\\n                Swap memory secondSwap = swapSequences[i][1];\\n                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\\n                    poolSecondSwap.getBalance(secondSwap.tokenIn),\\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\\n                    poolSecondSwap.getBalance(secondSwap.tokenOut),\\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\\n                    secondSwap.swapAmount,\\n                    poolSecondSwap.getSwapFee()\\n                );\\n\\n                //// Buy intermediateTokenAmount of token B with A in the first pool\\n                Swap memory firstSwap = swapSequences[i][0];\\n                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\\n                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint256(-1)) {\\n                    FirstSwapTokenIn.approve(firstSwap.pool, uint256(-1));\\n                }\\n\\n                (tokenAmountInFirstSwap, ) = poolFirstSwap.swapExactAmountOut(\\n                    firstSwap.tokenIn,\\n                    firstSwap.limitReturnAmount,\\n                    firstSwap.tokenOut,\\n                    intermediateTokenAmount, // This is the amount of token B we need\\n                    firstSwap.maxPrice\\n                );\\n\\n                //// Buy the final amount of token C desired\\n                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint256(-1)) {\\n                    SecondSwapTokenIn.approve(secondSwap.pool, uint256(-1));\\n                }\\n\\n                poolSecondSwap.swapExactAmountOut(\\n                    secondSwap.tokenIn,\\n                    secondSwap.limitReturnAmount,\\n                    secondSwap.tokenOut,\\n                    secondSwap.swapAmount,\\n                    secondSwap.maxPrice\\n                );\\n            }\\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\\n        }\\n\\n        require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        transferAll(tokenOut, getBalance(tokenOut));\\n        transferAll(tokenIn, getBalance(tokenIn));\\n    }\\n\\n    function smartSwapExactIn(\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut,\\n        uint256 nPools\\n    ) public payable returns (uint256 totalAmountOut) {\\n        Swap[] memory swaps;\\n        if (isETH(tokenIn)) {\\n            (swaps, ) = viewSplitExactIn(address(weth), address(tokenOut), totalAmountIn, nPools);\\n        } else if (isETH(tokenOut)) {\\n            (swaps, ) = viewSplitExactIn(address(tokenIn), address(weth), totalAmountIn, nPools);\\n        } else {\\n            (swaps, ) = viewSplitExactIn(address(tokenIn), address(tokenOut), totalAmountIn, nPools);\\n        }\\n\\n        totalAmountOut = batchSwapExactIn(swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut);\\n    }\\n\\n    function smartSwapExactOut(\\n        TokenInterface tokenIn,\\n        TokenInterface tokenOut,\\n        uint256 totalAmountOut,\\n        uint256 maxTotalAmountIn,\\n        uint256 nPools\\n    ) public payable returns (uint256 totalAmountIn) {\\n        Swap[] memory swaps;\\n        if (isETH(tokenIn)) {\\n            (swaps, ) = viewSplitExactOut(address(weth), address(tokenOut), totalAmountOut, nPools);\\n        } else if (isETH(tokenOut)) {\\n            (swaps, ) = viewSplitExactOut(address(tokenIn), address(weth), totalAmountOut, nPools);\\n        } else {\\n            (swaps, ) = viewSplitExactOut(address(tokenIn), address(tokenOut), totalAmountOut, nPools);\\n        }\\n\\n        totalAmountIn = batchSwapExactOut(swaps, tokenIn, tokenOut, maxTotalAmountIn);\\n    }\\n\\n    function viewSplitExactIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 swapAmount,\\n        uint256 nPools\\n    ) public view returns (Swap[] memory swaps, uint256 totalOutput) {\\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\\n\\n        Pool[] memory pools = new Pool[](poolAddresses.length);\\n        uint256 sumEffectiveLiquidity;\\n        for (uint256 i = 0; i < poolAddresses.length; i++) {\\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\\n        }\\n\\n        uint256[] memory bestInputAmounts = new uint256[](pools.length);\\n        uint256 totalInputAmount;\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\\n        }\\n\\n        if (totalInputAmount < swapAmount) {\\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\\n        } else {\\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\\n        }\\n\\n        swaps = new Swap[](pools.length);\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            swaps[i] = Swap({\\n                pool: pools[i].pool,\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                swapAmount: bestInputAmounts[i],\\n                limitReturnAmount: 0,\\n                maxPrice: uint256(-1)\\n            });\\n        }\\n\\n        totalOutput = calcTotalOutExactIn(bestInputAmounts, pools);\\n\\n        return (swaps, totalOutput);\\n    }\\n\\n    function viewSplitExactOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 swapAmount,\\n        uint256 nPools\\n    ) public view returns (Swap[] memory swaps, uint256 totalOutput) {\\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\\n\\n        Pool[] memory pools = new Pool[](poolAddresses.length);\\n        uint256 sumEffectiveLiquidity;\\n        for (uint256 i = 0; i < poolAddresses.length; i++) {\\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\\n        }\\n\\n        uint256[] memory bestInputAmounts = new uint256[](pools.length);\\n        uint256 totalInputAmount;\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\\n        }\\n\\n        if (totalInputAmount < swapAmount) {\\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\\n        } else {\\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\\n        }\\n\\n        swaps = new Swap[](pools.length);\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            swaps[i] = Swap({\\n                pool: pools[i].pool,\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                swapAmount: bestInputAmounts[i],\\n                limitReturnAmount: uint256(-1),\\n                maxPrice: uint256(-1)\\n            });\\n        }\\n\\n        totalOutput = calcTotalOutExactOut(bestInputAmounts, pools);\\n\\n        return (swaps, totalOutput);\\n    }\\n\\n    function getPoolData(\\n        address tokenIn,\\n        address tokenOut,\\n        address poolAddress\\n    ) internal view returns (Pool memory) {\\n        PoolInterface pool = PoolInterface(poolAddress);\\n        uint256 tokenBalanceIn = pool.getBalance(tokenIn);\\n        uint256 tokenBalanceOut = pool.getBalance(tokenOut);\\n        uint256 tokenWeightIn = pool.getDenormalizedWeight(tokenIn);\\n        uint256 tokenWeightOut = pool.getDenormalizedWeight(tokenOut);\\n        uint256 swapFee = pool.getSwapFee();\\n\\n        uint256 effectiveLiquidity = calcEffectiveLiquidity(tokenWeightIn, tokenBalanceOut, tokenWeightOut);\\n        Pool memory returnPool = Pool({\\n            pool: poolAddress,\\n            tokenBalanceIn: tokenBalanceIn,\\n            tokenWeightIn: tokenWeightIn,\\n            tokenBalanceOut: tokenBalanceOut,\\n            tokenWeightOut: tokenWeightOut,\\n            swapFee: swapFee,\\n            effectiveLiquidity: effectiveLiquidity\\n        });\\n\\n        return returnPool;\\n    }\\n\\n    function calcEffectiveLiquidity(\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut\\n    ) internal pure returns (uint256 effectiveLiquidity) {\\n        // Bo * wi/(wi+wo)\\n        effectiveLiquidity = tokenWeightIn.mul(BONE).div(tokenWeightOut.add(tokenWeightIn)).mul(tokenBalanceOut).div(\\n            BONE\\n        );\\n\\n        return effectiveLiquidity;\\n    }\\n\\n    function calcTotalOutExactIn(uint256[] memory bestInputAmounts, Pool[] memory bestPools)\\n        internal\\n        pure\\n        returns (uint256 totalOutput)\\n    {\\n        totalOutput = 0;\\n        for (uint256 i = 0; i < bestInputAmounts.length; i++) {\\n            uint256 output = PoolInterface(bestPools[i].pool).calcOutGivenIn(\\n                bestPools[i].tokenBalanceIn,\\n                bestPools[i].tokenWeightIn,\\n                bestPools[i].tokenBalanceOut,\\n                bestPools[i].tokenWeightOut,\\n                bestInputAmounts[i],\\n                bestPools[i].swapFee\\n            );\\n\\n            totalOutput = totalOutput.add(output);\\n        }\\n        return totalOutput;\\n    }\\n\\n    function calcTotalOutExactOut(uint256[] memory bestInputAmounts, Pool[] memory bestPools)\\n        internal\\n        pure\\n        returns (uint256 totalOutput)\\n    {\\n        totalOutput = 0;\\n        for (uint256 i = 0; i < bestInputAmounts.length; i++) {\\n            uint256 output = PoolInterface(bestPools[i].pool).calcInGivenOut(\\n                bestPools[i].tokenBalanceIn,\\n                bestPools[i].tokenWeightIn,\\n                bestPools[i].tokenBalanceOut,\\n                bestPools[i].tokenWeightOut,\\n                bestInputAmounts[i],\\n                bestPools[i].swapFee\\n            );\\n\\n            totalOutput = totalOutput.add(output);\\n        }\\n        return totalOutput;\\n    }\\n\\n    function transferFromAll(TokenInterface token, uint256 amount) internal returns (bool) {\\n        if (isETH(token)) {\\n            weth.deposit.value(msg.value)();\\n        } else {\\n            require(token.transferFrom(msg.sender, address(this), amount), \\\"ERR_TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    function getBalance(TokenInterface token) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return weth.balanceOf(address(this));\\n        } else {\\n            return token.balanceOf(address(this));\\n        }\\n    }\\n\\n    function transferAll(TokenInterface token, uint256 amount) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            weth.withdraw(amount);\\n            (bool xfer, ) = msg.sender.call.value(amount)(\\\"\\\");\\n            require(xfer, \\\"ERR_ETH_FAILED\\\");\\n        } else {\\n            require(token.transfer(msg.sender, amount), \\\"ERR_TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    function isETH(TokenInterface token) internal pure returns (bool) {\\n        return (address(token) == ETH_ADDRESS);\\n    }\\n\\n    function() external payable {}\\n}\\n\",\"keccak256\":\"0x7516e61344b15656814ddc44ede29332604722fd7367a12a0a88d4abba29b925\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620031a1380380620031a18339810160408190526200003491620000bd565b6000620000496001600160e01b03620000b916565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b0392909216919091179055620000ed565b3390565b600060208284031215620000cf578081fd5b81516001600160a01b0381168114620000e6578182fd5b9392505050565b6130a480620000fd6000396000f3fe6080604052600436106100c25760003560e01c80638743ad581161007f578063a91ee0dc11610059578063a91ee0dc146101cd578063b40f39ee146101ed578063e2b3974614610200578063f2fde38b14610213576100c2565b80638743ad58146101765780638da5cb5b146101895780638f32d59b146101ab576100c2565b806321b0eb85146100c45780632db58134146100ed578063368bb1fc146101005780634b0f93fb1461012e578063715018a61461014e57806386b2ecc414610163575b005b6100d76100d2366004612c1f565b610233565b6040516100e49190612fd4565b60405180910390f35b6100d76100fb366004612b8f565b6102b4565b34801561010c57600080fd5b5061012061011b3660046129d4565b61059a565b6040516100e4929190612d4c565b34801561013a57600080fd5b506101206101493660046129d4565b610947565b34801561015a57600080fd5b506100c2610c37565b6100d7610171366004612ab5565b610ca5565b6100d7610184366004612bc6565b611632565b34801561019557600080fd5b5061019e611908565b6040516100e49190612cad565b3480156101b757600080fd5b506101c0611917565b6040516100e49190612de1565b3480156101d957600080fd5b506100c26101e83660046129b8565b61193b565b6100d76101fb366004612c1f565b611981565b6100d761020e366004612b1d565b6119f6565b34801561021f57600080fd5b506100c261022e3660046129b8565b611cd2565b6000606061024087611d02565b156102655760015461025d906001600160a01b0316878786610947565b50905061029c565b61026e86611d02565b1561028c5760015461025d9088906001600160a01b03168786610947565b61029887878786610947565b5090505b6102a98188888888611632565b979650505050505050565b60006102c08483611d28565b5060005b8551811015610547576102d56127e4565b8682815181106102e157fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e906103299030908690600401612cc1565b60206040518083038186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103799190810190612c6f565b111561040357825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b3916103af9190600090600401612cff565b602060405180830381600087803b1580156103c957600080fd5b505af11580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104019190810190612bff565b505b8251608084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b39261043492600401612cff565b602060405180830381600087803b15801561044e57600080fd5b505af1158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104869190810190612bff565b5060208301516080840151604080860151606087015160a08801519251631f17a7a960e21b81526000956001600160a01b03881695637c5e9ea4956104d19592949193600401612d18565b6040805180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105229190810190612c87565b509050610535818763ffffffff611e4a16565b955050600190930192506102c4915050565b50818111156105715760405162461bcd60e51b815260040161056890612ee3565b60405180910390fd5b6105838361057e85611e76565b611f39565b506105918461057e86611e76565b50949350505050565b60025460405163bfdbfc4360e01b815260609160009183916001600160a01b03169063bfdbfc43906105d4908a908a908990600401612cdb565b60006040518083038186803b1580156105ec57600080fd5b505afa158015610600573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106289190810190612a19565b90506060815160405190808252806020026020018201604052801561066757816020015b610654612835565b81526020019060019003908161064c5790505b5090506000805b83518110156106e0576106958a8a86848151811061068857fe5b6020026020010151612068565b8382815181106106a157fe5b60200260200101819052506106d68382815181106106bb57fe5b602002602001015160c0015183611e4a90919063ffffffff16565b915060010161066e565b506060825160405190808252806020026020018201604052801561070e578160200160208202803883390190505b5090506000805b84518110156107a0576107588461074c87848151811061073157fe5b602002602001015160c001518d61234890919063ffffffff16565b9063ffffffff61238216565b83828151811061076457fe5b60200260200101818152505061079683828151811061077f57fe5b602002602001015183611e4a90919063ffffffff16565b9150600101610715565b50888110156107fd576107df6107bc8a8363ffffffff6123c416565b836000815181106107c957fe5b6020026020010151611e4a90919063ffffffff16565b826000815181106107ec57fe5b60200260200101818152505061084d565b610833610810828b63ffffffff6123c416565b8360008151811061081d57fe5b60200260200101516123c490919063ffffffff16565b8260008151811061084057fe5b6020026020010181815250505b835160405190808252806020026020018201604052801561088857816020015b6108756127e4565b81526020019060019003908161086d5790505b50965060005b845181101561092c576040518060c001604052808683815181106108ae57fe5b6020026020010151600001516001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b031681526020018483815181106108f257fe5b60200260200101518152602001600019815260200160001981525088828151811061091957fe5b602090810291909101015260010161088e565b506109378285612406565b9550505050505094509492505050565b60025460405163bfdbfc4360e01b815260609160009183916001600160a01b03169063bfdbfc4390610981908a908a908990600401612cdb565b60006040518083038186803b15801561099957600080fd5b505afa1580156109ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d59190810190612a19565b905060608151604051908082528060200260200182016040528015610a1457816020015b610a01612835565b8152602001906001900390816109f95790505b5090506000805b8351811015610a6557610a358a8a86848151811061068857fe5b838281518110610a4157fe5b6020026020010181905250610a5b8382815181106106bb57fe5b9150600101610a1b565b5060608251604051908082528060200260200182016040528015610a93578160200160208202803883390190505b5090506000805b8451811015610ae757610ab68461074c87848151811061073157fe5b838281518110610ac257fe5b602002602001018181525050610add83828151811061077f57fe5b9150600101610a9a565b5088811015610b2157610b036107bc8a8363ffffffff6123c416565b82600081518110610b1057fe5b602002602001018181525050610b4e565b610b34610810828b63ffffffff6123c416565b82600081518110610b4157fe5b6020026020010181815250505b8351604051908082528060200260200182016040528015610b8957816020015b610b766127e4565b815260200190600190039081610b6e5790505b50965060005b8451811015610c2c576040518060c00160405280868381518110610baf57fe5b6020026020010151600001516001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b03168152602001848381518110610bf357fe5b6020026020010151815260200160008152602001600019815250888281518110610c1957fe5b6020908102919091010152600101610b8f565b50610937828561255c565b610c3f611917565b610c5b5760405162461bcd60e51b815260040161056890612f4a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000610cb18483611d28565b5060005b85518110156105475760006001878381518110610cce57fe5b6020026020010151511415610f5057610ce56127e4565b878381518110610cf157fe5b6020026020010151600081518110610d0557fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e90610d4d9030908690600401612cc1565b60206040518083038186803b158015610d6557600080fd5b505afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d9d9190810190612c6f565b1115610e2757825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391610dd39190600090600401612cff565b602060405180830381600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e259190810190612bff565b505b8251608084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392610e5892600401612cff565b602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610eaa9190810190612bff565b50806001600160a01b0316637c5e9ea484602001518560800151866040015187606001518860a001516040518663ffffffff1660e01b8152600401610ef3959493929190612d18565b6040805180830381600087803b158015610f0c57600080fd5b505af1158015610f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f449190810190612c87565b50935061161792505050565b6000610f5a6127e4565b888481518110610f6657fe5b6020026020010151600181518110610f7a57fe5b60209081029190910181015180519181015160405163f8b2cb4f60e01b81529193506001600160a01b0383169163f8d6aed491839163f8b2cb4f91610fc191600401612cad565b60206040518083038186803b158015610fd957600080fd5b505afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110119190810190612c6f565b6020850151604051634a46c67360e11b81526001600160a01b0386169163948d8ce6916110419190600401612cad565b60206040518083038186803b15801561105957600080fd5b505afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110919190810190612c6f565b604080870151905163f8b2cb4f60e01b81526001600160a01b0387169163f8b2cb4f916110c19190600401612cad565b60206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111119190810190612c6f565b6040808801519051634a46c67360e11b81526001600160a01b0388169163948d8ce6916111419190600401612cad565b60206040518083038186803b15801561115957600080fd5b505afa15801561116d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111919190810190612c6f565b8760600151876001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156111cf57600080fd5b505afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112079190810190612c6f565b6040518763ffffffff1660e01b815260040161122896959493929190612fdd565b60206040518083038186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112789190810190612c6f565b92506112826127e4565b8a868151811061128e57fe5b60200260200101516000815181106112a257fe5b602090810291909101810151908101518151604051636eb1769f60e11b81529293509091600019906001600160a01b0384169063dd62ed3e906112eb9030908690600401612cc1565b60206040518083038186803b15801561130357600080fd5b505afa158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061133b9190810190612c6f565b10156113c657825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391611372919060001990600401612cff565b602060405180830381600087803b15801561138c57600080fd5b505af11580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113c49190810190612bff565b505b806001600160a01b0316637c5e9ea48460200151856080015186604001518a8860a001516040518663ffffffff1660e01b815260040161140a959493929190612d18565b6040805180830381600087803b15801561142357600080fd5b505af1158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061145b9190810190612c87565b5060208601518651604051636eb1769f60e11b81529299509091600019916001600160a01b0384169163dd62ed3e9161149991309190600401612cc1565b60206040518083038186803b1580156114b157600080fd5b505afa1580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114e99190810190612c6f565b101561157457855160405163095ea7b360e01b81526001600160a01b0383169163095ea7b391611520919060001990600401612cff565b602060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115729190810190612bff565b505b846001600160a01b0316637c5e9ea48760200151886080015189604001518a606001518b60a001516040518663ffffffff1660e01b81526004016115bc959493929190612d18565b6040805180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061160d9190810190612c87565b5050505050505050505b611627818463ffffffff611e4a16565b925050600101610cb5565b600061163e8584611d28565b5060005b86518110156118c5576116536127e4565b87828151811061165f57fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e906116a79030908690600401612cc1565b60206040518083038186803b1580156116bf57600080fd5b505afa1580156116d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116f79190810190612c6f565b111561178157825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b39161172d9190600090600401612cff565b602060405180830381600087803b15801561174757600080fd5b505af115801561175b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061177f9190810190612bff565b505b8251606084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b3926117b292600401612cff565b602060405180830381600087803b1580156117cc57600080fd5b505af11580156117e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118049190810190612bff565b5060208301516060840151604080860151608087015160a08801519251638201aa3f60e01b81526000956001600160a01b03881695638201aa3f9561184f9592949193600401612d18565b6040805180830381600087803b15801561186857600080fd5b505af115801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118a09190810190612c87565b5090506118b3818763ffffffff611e4a16565b95505060019093019250611642915050565b50818110156118e65760405162461bcd60e51b815260040161056890612ebc565b6118f08482611f39565b506118fe8561057e87611e76565b5095945050505050565b6000546001600160a01b031690565b600080546001600160a01b031661192c6126ab565b6001600160a01b031614905090565b611943611917565b61195f5760405162461bcd60e51b815260040161056890612f4a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000606061198e87611d02565b156119b3576001546119ab906001600160a01b031687878661059a565b5090506119ea565b6119bc86611d02565b156119da576001546119ab9088906001600160a01b0316878661059a565b6119e68787878661059a565b5090505b6102a9818888876102b4565b6000611a028584611d28565b5060005b86518110156118c5576000805b888381518110611a1f57fe5b602002602001015151811015611cb657611a376127e4565b898481518110611a4357fe5b60200260200101518281518110611a5657fe5b602002602001015190506000816020015190506001831415611a7a57606082018490525b8151604051636eb1769f60e11b81526000906001600160a01b0384169063dd62ed3e90611aad9030908690600401612cc1565b60206040518083038186803b158015611ac557600080fd5b505afa158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611afd9190810190612c6f565b1115611b8757825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391611b339190600090600401612cff565b602060405180830381600087803b158015611b4d57600080fd5b505af1158015611b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b859190810190612bff565b505b8251606084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392611bb892600401612cff565b602060405180830381600087803b158015611bd257600080fd5b505af1158015611be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c0a9190810190612bff565b50806001600160a01b0316638201aa3f84602001518560600151866040015187608001518860a001516040518663ffffffff1660e01b8152600401611c53959493929190612d18565b6040805180830381600087803b158015611c6c57600080fd5b505af1158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ca49190810190612c87565b5094505060019092019150611a139050565b50611cc7818463ffffffff611e4a16565b925050600101611a06565b611cda611917565b611cf65760405162461bcd60e51b815260040161056890612f4a565b611cff816126af565b50565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b919050565b6000611d3383611d02565b15611da657600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d8857600080fd5b505af1158015611d9c573d6000803e3d6000fd5b5050505050611e44565b6040516323b872dd60e01b81526001600160a01b038416906323b872dd90611dd690339030908790600401612cdb565b602060405180830381600087803b158015611df057600080fd5b505af1158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e289190810190612bff565b611e445760405162461bcd60e51b815260040161056890612fa7565b92915050565b600082820183811015611e6f5760405162461bcd60e51b815260040161056890612e85565b9392505050565b6000611e8182611d02565b15611f0d576001546040516370a0823160e01b81526001600160a01b03909116906370a0823190611eb6903090600401612cad565b60206040518083038186803b158015611ece57600080fd5b505afa158015611ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f069190810190612c6f565b9050611d23565b6040516370a0823160e01b81526001600160a01b038316906370a0823190611eb6903090600401612cad565b600081611f4857506001611e44565b611f5183611d02565b1561203a57600154604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90611f86908590600401612fd4565b600060405180830381600087803b158015611fa057600080fd5b505af1158015611fb4573d6000803e3d6000fd5b505050506000336001600160a01b031683604051611fd190612caa565b60006040518083038185875af1925050503d806000811461200e576040519150601f19603f3d011682016040523d82523d6000602084013e612013565b606091505b50509050806120345760405162461bcd60e51b815260040161056890612f7f565b50611e44565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611dd69033908690600401612cff565b612070612835565b60405163f8b2cb4f60e01b815282906000906001600160a01b0383169063f8b2cb4f906120a1908990600401612cad565b60206040518083038186803b1580156120b957600080fd5b505afa1580156120cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120f19190810190612c6f565b90506000826001600160a01b031663f8b2cb4f876040518263ffffffff1660e01b81526004016121219190612cad565b60206040518083038186803b15801561213957600080fd5b505afa15801561214d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121719190810190612c6f565b90506000836001600160a01b031663948d8ce6896040518263ffffffff1660e01b81526004016121a19190612cad565b60206040518083038186803b1580156121b957600080fd5b505afa1580156121cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121f19190810190612c6f565b90506000846001600160a01b031663948d8ce6896040518263ffffffff1660e01b81526004016122219190612cad565b60206040518083038186803b15801561223957600080fd5b505afa15801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122719190810190612c6f565b90506000856001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122e69190810190612c6f565b905060006122f5848685612730565b90506122ff612835565b506040805160e0810182526001600160a01b038b16815260208101979097528601939093526060850193909352608084015260a083019190915260c08201529150509392505050565b60008261235757506000611e44565b8282028284828161236457fe5b0414611e6f5760405162461bcd60e51b815260040161056890612f09565b6000611e6f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612781565b6000611e6f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506127b8565b6000805b835181101561255557600083828151811061242157fe5b6020026020010151600001516001600160a01b031663f8d6aed485848151811061244757fe5b60200260200101516020015186858151811061245f57fe5b60200260200101516040015187868151811061247757fe5b60200260200101516060015188878151811061248f57fe5b6020026020010151608001518a88815181106124a757fe5b60200260200101518a89815181106124bb57fe5b602002602001015160a001516040518763ffffffff1660e01b81526004016124e896959493929190612fdd565b60206040518083038186803b15801561250057600080fd5b505afa158015612514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125389190810190612c6f565b905061254a838263ffffffff611e4a16565b92505060010161240a565b5092915050565b6000805b835181101561255557600083828151811061257757fe5b6020026020010151600001516001600160a01b031663ba9530a685848151811061259d57fe5b6020026020010151602001518685815181106125b557fe5b6020026020010151604001518786815181106125cd57fe5b6020026020010151606001518887815181106125e557fe5b6020026020010151608001518a88815181106125fd57fe5b60200260200101518a898151811061261157fe5b602002602001015160a001516040518763ffffffff1660e01b815260040161263e96959493929190612fdd565b60206040518083038186803b15801561265657600080fd5b505afa15801561266a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061268e9190810190612c6f565b90506126a0838263ffffffff611e4a16565b925050600101612560565b3390565b6001600160a01b0381166126d55760405162461bcd60e51b815260040161056890612e3f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000612779670de0b6b3a764000061074c8561276d612755878a63ffffffff611e4a16565b61074c8a670de0b6b3a764000063ffffffff61234816565b9063ffffffff61234816565b949350505050565b600081836127a25760405162461bcd60e51b81526004016105689190612dec565b5060008385816127ae57fe5b0495945050505050565b600081848411156127dc5760405162461bcd60e51b81526004016105689190612dec565b505050900390565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600082601f83011261288b578081fd5b813561289e6128998261302c565b613005565b8181529150602080830190840160005b838110156128db576128c687602084358901016128e5565b835260209283019291909101906001016128ae565b5050505092915050565b600082601f8301126128f5578081fd5b81356129036128998261302c565b818152915060208083019084810160c084028601820187101561292557600080fd5b60005b848110156129ad5760c0828903121561294057600080fd5b61294a60c0613005565b82356129558161304c565b8152828401356129648161304c565b8185015260408301356129768161304c565b6040820152606083810135908201526080808401359082015260a0808401359082015284529282019260c090910190600101612928565b505050505092915050565b6000602082840312156129c9578081fd5b8135611e6f8161304c565b600080600080608085870312156129e9578283fd5b84356129f48161304c565b93506020850135612a048161304c565b93969395505050506040820135916060013590565b60006020808385031215612a2b578182fd5b825167ffffffffffffffff811115612a41578283fd5b80840185601f820112612a52578384fd5b80519150612a626128998361302c565b8281528381019082850185850284018601891015612a7e578687fd5b8693505b84841015612aa9578051612a958161304c565b835260019390930192918501918501612a82565b50979650505050505050565b60008060008060808587031215612aca578384fd5b843567ffffffffffffffff811115612ae0578485fd5b612aec8782880161287b565b9450506020850135612afd8161304c565b92506040850135612b0d8161304c565b9396929550929360600135925050565b600080600080600060a08688031215612b34578081fd5b853567ffffffffffffffff811115612b4a578182fd5b612b568882890161287b565b9550506020860135612b678161304c565b93506040860135612b778161304c565b94979396509394606081013594506080013592915050565b60008060008060808587031215612ba4578384fd5b843567ffffffffffffffff811115612bba578485fd5b612aec878288016128e5565b600080600080600060a08688031215612bdd578081fd5b853567ffffffffffffffff811115612bf3578182fd5b612b56888289016128e5565b600060208284031215612c10578081fd5b81518015158114611e6f578182fd5b600080600080600060a08688031215612c36578283fd5b8535612c418161304c565b94506020860135612c518161304c565b94979496505050506040830135926060810135926080909101359150565b600060208284031215612c80578081fd5b5051919050565b60008060408385031215612c99578182fd5b505080516020909101519092909150565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b6040808252835190820181905260009060208501906060840190835b81811015612dce57835160018060a01b0380825116855280602083015116602086015280604083015116604086015250606081015160608501526080810151608085015260a081015160a08501525060c083019250602084019350600181019050612d68565b5050602093909301939093525092915050565b901515815260200190565b6000602082528251806020840152815b81811015612e195760208186018101516040868401015201612dfc565b81811115612e2a5782604083860101525b50601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600e908201526d11549497d1551217d1905253115160921b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b90815260200190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff8111828210171561302457600080fd5b604052919050565b600067ffffffffffffffff821115613042578081fd5b5060209081020190565b6001600160a01b0381168114611cff57600080fdfea365627a7a72315820c0ca0ba0ea9b946bf3f8741ac23ca5f849ad473588adb98c272ecb58c865d28a6c6578706572696d656e74616cf564736f6c634300050c0040",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638743ad581161007f578063a91ee0dc11610059578063a91ee0dc146101cd578063b40f39ee146101ed578063e2b3974614610200578063f2fde38b14610213576100c2565b80638743ad58146101765780638da5cb5b146101895780638f32d59b146101ab576100c2565b806321b0eb85146100c45780632db58134146100ed578063368bb1fc146101005780634b0f93fb1461012e578063715018a61461014e57806386b2ecc414610163575b005b6100d76100d2366004612c1f565b610233565b6040516100e49190612fd4565b60405180910390f35b6100d76100fb366004612b8f565b6102b4565b34801561010c57600080fd5b5061012061011b3660046129d4565b61059a565b6040516100e4929190612d4c565b34801561013a57600080fd5b506101206101493660046129d4565b610947565b34801561015a57600080fd5b506100c2610c37565b6100d7610171366004612ab5565b610ca5565b6100d7610184366004612bc6565b611632565b34801561019557600080fd5b5061019e611908565b6040516100e49190612cad565b3480156101b757600080fd5b506101c0611917565b6040516100e49190612de1565b3480156101d957600080fd5b506100c26101e83660046129b8565b61193b565b6100d76101fb366004612c1f565b611981565b6100d761020e366004612b1d565b6119f6565b34801561021f57600080fd5b506100c261022e3660046129b8565b611cd2565b6000606061024087611d02565b156102655760015461025d906001600160a01b0316878786610947565b50905061029c565b61026e86611d02565b1561028c5760015461025d9088906001600160a01b03168786610947565b61029887878786610947565b5090505b6102a98188888888611632565b979650505050505050565b60006102c08483611d28565b5060005b8551811015610547576102d56127e4565b8682815181106102e157fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e906103299030908690600401612cc1565b60206040518083038186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103799190810190612c6f565b111561040357825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b3916103af9190600090600401612cff565b602060405180830381600087803b1580156103c957600080fd5b505af11580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104019190810190612bff565b505b8251608084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b39261043492600401612cff565b602060405180830381600087803b15801561044e57600080fd5b505af1158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104869190810190612bff565b5060208301516080840151604080860151606087015160a08801519251631f17a7a960e21b81526000956001600160a01b03881695637c5e9ea4956104d19592949193600401612d18565b6040805180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105229190810190612c87565b509050610535818763ffffffff611e4a16565b955050600190930192506102c4915050565b50818111156105715760405162461bcd60e51b815260040161056890612ee3565b60405180910390fd5b6105838361057e85611e76565b611f39565b506105918461057e86611e76565b50949350505050565b60025460405163bfdbfc4360e01b815260609160009183916001600160a01b03169063bfdbfc43906105d4908a908a908990600401612cdb565b60006040518083038186803b1580156105ec57600080fd5b505afa158015610600573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106289190810190612a19565b90506060815160405190808252806020026020018201604052801561066757816020015b610654612835565b81526020019060019003908161064c5790505b5090506000805b83518110156106e0576106958a8a86848151811061068857fe5b6020026020010151612068565b8382815181106106a157fe5b60200260200101819052506106d68382815181106106bb57fe5b602002602001015160c0015183611e4a90919063ffffffff16565b915060010161066e565b506060825160405190808252806020026020018201604052801561070e578160200160208202803883390190505b5090506000805b84518110156107a0576107588461074c87848151811061073157fe5b602002602001015160c001518d61234890919063ffffffff16565b9063ffffffff61238216565b83828151811061076457fe5b60200260200101818152505061079683828151811061077f57fe5b602002602001015183611e4a90919063ffffffff16565b9150600101610715565b50888110156107fd576107df6107bc8a8363ffffffff6123c416565b836000815181106107c957fe5b6020026020010151611e4a90919063ffffffff16565b826000815181106107ec57fe5b60200260200101818152505061084d565b610833610810828b63ffffffff6123c416565b8360008151811061081d57fe5b60200260200101516123c490919063ffffffff16565b8260008151811061084057fe5b6020026020010181815250505b835160405190808252806020026020018201604052801561088857816020015b6108756127e4565b81526020019060019003908161086d5790505b50965060005b845181101561092c576040518060c001604052808683815181106108ae57fe5b6020026020010151600001516001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b031681526020018483815181106108f257fe5b60200260200101518152602001600019815260200160001981525088828151811061091957fe5b602090810291909101015260010161088e565b506109378285612406565b9550505050505094509492505050565b60025460405163bfdbfc4360e01b815260609160009183916001600160a01b03169063bfdbfc4390610981908a908a908990600401612cdb565b60006040518083038186803b15801561099957600080fd5b505afa1580156109ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d59190810190612a19565b905060608151604051908082528060200260200182016040528015610a1457816020015b610a01612835565b8152602001906001900390816109f95790505b5090506000805b8351811015610a6557610a358a8a86848151811061068857fe5b838281518110610a4157fe5b6020026020010181905250610a5b8382815181106106bb57fe5b9150600101610a1b565b5060608251604051908082528060200260200182016040528015610a93578160200160208202803883390190505b5090506000805b8451811015610ae757610ab68461074c87848151811061073157fe5b838281518110610ac257fe5b602002602001018181525050610add83828151811061077f57fe5b9150600101610a9a565b5088811015610b2157610b036107bc8a8363ffffffff6123c416565b82600081518110610b1057fe5b602002602001018181525050610b4e565b610b34610810828b63ffffffff6123c416565b82600081518110610b4157fe5b6020026020010181815250505b8351604051908082528060200260200182016040528015610b8957816020015b610b766127e4565b815260200190600190039081610b6e5790505b50965060005b8451811015610c2c576040518060c00160405280868381518110610baf57fe5b6020026020010151600001516001600160a01b031681526020018d6001600160a01b031681526020018c6001600160a01b03168152602001848381518110610bf357fe5b6020026020010151815260200160008152602001600019815250888281518110610c1957fe5b6020908102919091010152600101610b8f565b50610937828561255c565b610c3f611917565b610c5b5760405162461bcd60e51b815260040161056890612f4a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000610cb18483611d28565b5060005b85518110156105475760006001878381518110610cce57fe5b6020026020010151511415610f5057610ce56127e4565b878381518110610cf157fe5b6020026020010151600081518110610d0557fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e90610d4d9030908690600401612cc1565b60206040518083038186803b158015610d6557600080fd5b505afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d9d9190810190612c6f565b1115610e2757825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391610dd39190600090600401612cff565b602060405180830381600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e259190810190612bff565b505b8251608084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392610e5892600401612cff565b602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610eaa9190810190612bff565b50806001600160a01b0316637c5e9ea484602001518560800151866040015187606001518860a001516040518663ffffffff1660e01b8152600401610ef3959493929190612d18565b6040805180830381600087803b158015610f0c57600080fd5b505af1158015610f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f449190810190612c87565b50935061161792505050565b6000610f5a6127e4565b888481518110610f6657fe5b6020026020010151600181518110610f7a57fe5b60209081029190910181015180519181015160405163f8b2cb4f60e01b81529193506001600160a01b0383169163f8d6aed491839163f8b2cb4f91610fc191600401612cad565b60206040518083038186803b158015610fd957600080fd5b505afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110119190810190612c6f565b6020850151604051634a46c67360e11b81526001600160a01b0386169163948d8ce6916110419190600401612cad565b60206040518083038186803b15801561105957600080fd5b505afa15801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110919190810190612c6f565b604080870151905163f8b2cb4f60e01b81526001600160a01b0387169163f8b2cb4f916110c19190600401612cad565b60206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111119190810190612c6f565b6040808801519051634a46c67360e11b81526001600160a01b0388169163948d8ce6916111419190600401612cad565b60206040518083038186803b15801561115957600080fd5b505afa15801561116d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111919190810190612c6f565b8760600151876001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156111cf57600080fd5b505afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112079190810190612c6f565b6040518763ffffffff1660e01b815260040161122896959493929190612fdd565b60206040518083038186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112789190810190612c6f565b92506112826127e4565b8a868151811061128e57fe5b60200260200101516000815181106112a257fe5b602090810291909101810151908101518151604051636eb1769f60e11b81529293509091600019906001600160a01b0384169063dd62ed3e906112eb9030908690600401612cc1565b60206040518083038186803b15801561130357600080fd5b505afa158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061133b9190810190612c6f565b10156113c657825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391611372919060001990600401612cff565b602060405180830381600087803b15801561138c57600080fd5b505af11580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113c49190810190612bff565b505b806001600160a01b0316637c5e9ea48460200151856080015186604001518a8860a001516040518663ffffffff1660e01b815260040161140a959493929190612d18565b6040805180830381600087803b15801561142357600080fd5b505af1158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061145b9190810190612c87565b5060208601518651604051636eb1769f60e11b81529299509091600019916001600160a01b0384169163dd62ed3e9161149991309190600401612cc1565b60206040518083038186803b1580156114b157600080fd5b505afa1580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114e99190810190612c6f565b101561157457855160405163095ea7b360e01b81526001600160a01b0383169163095ea7b391611520919060001990600401612cff565b602060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115729190810190612bff565b505b846001600160a01b0316637c5e9ea48760200151886080015189604001518a606001518b60a001516040518663ffffffff1660e01b81526004016115bc959493929190612d18565b6040805180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061160d9190810190612c87565b5050505050505050505b611627818463ffffffff611e4a16565b925050600101610cb5565b600061163e8584611d28565b5060005b86518110156118c5576116536127e4565b87828151811061165f57fe5b602090810291909101810151908101518151604051636eb1769f60e11b815292935090916000906001600160a01b0384169063dd62ed3e906116a79030908690600401612cc1565b60206040518083038186803b1580156116bf57600080fd5b505afa1580156116d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116f79190810190612c6f565b111561178157825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b39161172d9190600090600401612cff565b602060405180830381600087803b15801561174757600080fd5b505af115801561175b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061177f9190810190612bff565b505b8251606084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b3926117b292600401612cff565b602060405180830381600087803b1580156117cc57600080fd5b505af11580156117e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118049190810190612bff565b5060208301516060840151604080860151608087015160a08801519251638201aa3f60e01b81526000956001600160a01b03881695638201aa3f9561184f9592949193600401612d18565b6040805180830381600087803b15801561186857600080fd5b505af115801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118a09190810190612c87565b5090506118b3818763ffffffff611e4a16565b95505060019093019250611642915050565b50818110156118e65760405162461bcd60e51b815260040161056890612ebc565b6118f08482611f39565b506118fe8561057e87611e76565b5095945050505050565b6000546001600160a01b031690565b600080546001600160a01b031661192c6126ab565b6001600160a01b031614905090565b611943611917565b61195f5760405162461bcd60e51b815260040161056890612f4a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000606061198e87611d02565b156119b3576001546119ab906001600160a01b031687878661059a565b5090506119ea565b6119bc86611d02565b156119da576001546119ab9088906001600160a01b0316878661059a565b6119e68787878661059a565b5090505b6102a9818888876102b4565b6000611a028584611d28565b5060005b86518110156118c5576000805b888381518110611a1f57fe5b602002602001015151811015611cb657611a376127e4565b898481518110611a4357fe5b60200260200101518281518110611a5657fe5b602002602001015190506000816020015190506001831415611a7a57606082018490525b8151604051636eb1769f60e11b81526000906001600160a01b0384169063dd62ed3e90611aad9030908690600401612cc1565b60206040518083038186803b158015611ac557600080fd5b505afa158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611afd9190810190612c6f565b1115611b8757825160405163095ea7b360e01b81526001600160a01b0384169163095ea7b391611b339190600090600401612cff565b602060405180830381600087803b158015611b4d57600080fd5b505af1158015611b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b859190810190612bff565b505b8251606084015160405163095ea7b360e01b81526001600160a01b0385169263095ea7b392611bb892600401612cff565b602060405180830381600087803b158015611bd257600080fd5b505af1158015611be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c0a9190810190612bff565b50806001600160a01b0316638201aa3f84602001518560600151866040015187608001518860a001516040518663ffffffff1660e01b8152600401611c53959493929190612d18565b6040805180830381600087803b158015611c6c57600080fd5b505af1158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ca49190810190612c87565b5094505060019092019150611a139050565b50611cc7818463ffffffff611e4a16565b925050600101611a06565b611cda611917565b611cf65760405162461bcd60e51b815260040161056890612f4a565b611cff816126af565b50565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b919050565b6000611d3383611d02565b15611da657600160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d8857600080fd5b505af1158015611d9c573d6000803e3d6000fd5b5050505050611e44565b6040516323b872dd60e01b81526001600160a01b038416906323b872dd90611dd690339030908790600401612cdb565b602060405180830381600087803b158015611df057600080fd5b505af1158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e289190810190612bff565b611e445760405162461bcd60e51b815260040161056890612fa7565b92915050565b600082820183811015611e6f5760405162461bcd60e51b815260040161056890612e85565b9392505050565b6000611e8182611d02565b15611f0d576001546040516370a0823160e01b81526001600160a01b03909116906370a0823190611eb6903090600401612cad565b60206040518083038186803b158015611ece57600080fd5b505afa158015611ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f069190810190612c6f565b9050611d23565b6040516370a0823160e01b81526001600160a01b038316906370a0823190611eb6903090600401612cad565b600081611f4857506001611e44565b611f5183611d02565b1561203a57600154604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90611f86908590600401612fd4565b600060405180830381600087803b158015611fa057600080fd5b505af1158015611fb4573d6000803e3d6000fd5b505050506000336001600160a01b031683604051611fd190612caa565b60006040518083038185875af1925050503d806000811461200e576040519150601f19603f3d011682016040523d82523d6000602084013e612013565b606091505b50509050806120345760405162461bcd60e51b815260040161056890612f7f565b50611e44565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611dd69033908690600401612cff565b612070612835565b60405163f8b2cb4f60e01b815282906000906001600160a01b0383169063f8b2cb4f906120a1908990600401612cad565b60206040518083038186803b1580156120b957600080fd5b505afa1580156120cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120f19190810190612c6f565b90506000826001600160a01b031663f8b2cb4f876040518263ffffffff1660e01b81526004016121219190612cad565b60206040518083038186803b15801561213957600080fd5b505afa15801561214d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121719190810190612c6f565b90506000836001600160a01b031663948d8ce6896040518263ffffffff1660e01b81526004016121a19190612cad565b60206040518083038186803b1580156121b957600080fd5b505afa1580156121cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121f19190810190612c6f565b90506000846001600160a01b031663948d8ce6896040518263ffffffff1660e01b81526004016122219190612cad565b60206040518083038186803b15801561223957600080fd5b505afa15801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122719190810190612c6f565b90506000856001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122e69190810190612c6f565b905060006122f5848685612730565b90506122ff612835565b506040805160e0810182526001600160a01b038b16815260208101979097528601939093526060850193909352608084015260a083019190915260c08201529150509392505050565b60008261235757506000611e44565b8282028284828161236457fe5b0414611e6f5760405162461bcd60e51b815260040161056890612f09565b6000611e6f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612781565b6000611e6f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506127b8565b6000805b835181101561255557600083828151811061242157fe5b6020026020010151600001516001600160a01b031663f8d6aed485848151811061244757fe5b60200260200101516020015186858151811061245f57fe5b60200260200101516040015187868151811061247757fe5b60200260200101516060015188878151811061248f57fe5b6020026020010151608001518a88815181106124a757fe5b60200260200101518a89815181106124bb57fe5b602002602001015160a001516040518763ffffffff1660e01b81526004016124e896959493929190612fdd565b60206040518083038186803b15801561250057600080fd5b505afa158015612514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125389190810190612c6f565b905061254a838263ffffffff611e4a16565b92505060010161240a565b5092915050565b6000805b835181101561255557600083828151811061257757fe5b6020026020010151600001516001600160a01b031663ba9530a685848151811061259d57fe5b6020026020010151602001518685815181106125b557fe5b6020026020010151604001518786815181106125cd57fe5b6020026020010151606001518887815181106125e557fe5b6020026020010151608001518a88815181106125fd57fe5b60200260200101518a898151811061261157fe5b602002602001015160a001516040518763ffffffff1660e01b815260040161263e96959493929190612fdd565b60206040518083038186803b15801561265657600080fd5b505afa15801561266a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061268e9190810190612c6f565b90506126a0838263ffffffff611e4a16565b925050600101612560565b3390565b6001600160a01b0381166126d55760405162461bcd60e51b815260040161056890612e3f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000612779670de0b6b3a764000061074c8561276d612755878a63ffffffff611e4a16565b61074c8a670de0b6b3a764000063ffffffff61234816565b9063ffffffff61234816565b949350505050565b600081836127a25760405162461bcd60e51b81526004016105689190612dec565b5060008385816127ae57fe5b0495945050505050565b600081848411156127dc5760405162461bcd60e51b81526004016105689190612dec565b505050900390565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600082601f83011261288b578081fd5b813561289e6128998261302c565b613005565b8181529150602080830190840160005b838110156128db576128c687602084358901016128e5565b835260209283019291909101906001016128ae565b5050505092915050565b600082601f8301126128f5578081fd5b81356129036128998261302c565b818152915060208083019084810160c084028601820187101561292557600080fd5b60005b848110156129ad5760c0828903121561294057600080fd5b61294a60c0613005565b82356129558161304c565b8152828401356129648161304c565b8185015260408301356129768161304c565b6040820152606083810135908201526080808401359082015260a0808401359082015284529282019260c090910190600101612928565b505050505092915050565b6000602082840312156129c9578081fd5b8135611e6f8161304c565b600080600080608085870312156129e9578283fd5b84356129f48161304c565b93506020850135612a048161304c565b93969395505050506040820135916060013590565b60006020808385031215612a2b578182fd5b825167ffffffffffffffff811115612a41578283fd5b80840185601f820112612a52578384fd5b80519150612a626128998361302c565b8281528381019082850185850284018601891015612a7e578687fd5b8693505b84841015612aa9578051612a958161304c565b835260019390930192918501918501612a82565b50979650505050505050565b60008060008060808587031215612aca578384fd5b843567ffffffffffffffff811115612ae0578485fd5b612aec8782880161287b565b9450506020850135612afd8161304c565b92506040850135612b0d8161304c565b9396929550929360600135925050565b600080600080600060a08688031215612b34578081fd5b853567ffffffffffffffff811115612b4a578182fd5b612b568882890161287b565b9550506020860135612b678161304c565b93506040860135612b778161304c565b94979396509394606081013594506080013592915050565b60008060008060808587031215612ba4578384fd5b843567ffffffffffffffff811115612bba578485fd5b612aec878288016128e5565b600080600080600060a08688031215612bdd578081fd5b853567ffffffffffffffff811115612bf3578182fd5b612b56888289016128e5565b600060208284031215612c10578081fd5b81518015158114611e6f578182fd5b600080600080600060a08688031215612c36578283fd5b8535612c418161304c565b94506020860135612c518161304c565b94979496505050506040830135926060810135926080909101359150565b600060208284031215612c80578081fd5b5051919050565b60008060408385031215612c99578182fd5b505080516020909101519092909150565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b6040808252835190820181905260009060208501906060840190835b81811015612dce57835160018060a01b0380825116855280602083015116602086015280604083015116604086015250606081015160608501526080810151608085015260a081015160a08501525060c083019250602084019350600181019050612d68565b5050602093909301939093525092915050565b901515815260200190565b6000602082528251806020840152815b81811015612e195760208186018101516040868401015201612dfc565b81811115612e2a5782604083860101525b50601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600e908201526d11549497d1551217d1905253115160921b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b90815260200190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff8111828210171561302457600080fd5b604052919050565b600067ffffffffffffffff821115613042578081fd5b5060209081020190565b6001600160a01b0381168114611cff57600080fdfea365627a7a72315820c0ca0ba0ea9b946bf3f8741ac23ca5f849ad473588adb98c272ecb58c865d28a6c6578706572696d656e74616cf564736f6c634300050c0040",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}