{
  "address": "0x6dB026A85c9D1c46ED1D16A09Eb879204c2c3aaF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "logic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "blabs",
          "type": "address"
        }
      ],
      "name": "LOG_BLABS",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "LOG_NEW_POOL",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract BPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "collect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccessControlAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBLabs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isBPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newBPool",
      "outputs": [
        {
          "internalType": "contract BPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessAddress",
          "type": "address"
        }
      ],
      "name": "setAccessControlAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "setBLabs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe987eb4328b99c5e3f6692ec68a79346635e2e9ad74b06d16cc3087bbe3a29d4",
  "receipt": {
    "to": null,
    "from": "0xf29162ed5Ed4Da23656C5190aae71e61Bb074AeC",
    "contractAddress": "0x6dB026A85c9D1c46ED1D16A09Eb879204c2c3aaF",
    "transactionIndex": 0,
    "gasUsed": "5056914",
    "logsBloom": "0x
    "blockHash": "0x0916bdf73379a4e610e7c4482184f1aace93989a2c7236ef979820f408ec4895",
    "transactionHash": "0xe987eb4328b99c5e3f6692ec68a79346635e2e9ad74b06d16cc3087bbe3a29d4",
    "logs": [],
    "blockNumber": 14956311,
    "cumulativeGasUsed": "5056914",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
    "0x9ca2344C75449adE3e25bD4CA8556F064Ea6c8fc"
  ],
  "solcInputHash": "cf8c495b5decfdc177649d0e4b03bed8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blabs\",\"type\":\"address\"}],\"name\":\"LOG_BLABS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LOG_NEW_POOL\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract BPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessControlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLabs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isBPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newBPool\",\"outputs\":[{\"internalType\":\"contract BPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessAddress\",\"type\":\"address\"}],\"name\":\"setAccessControlAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"setBLabs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/BFactory.sol\":\"BFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setProtocolFee(uint256 protocolFee) external;\\n\\n    function setRoles(bytes32[] memory roles) external;\\n\\n    function setAccessControlAddress(address accessAddress) external;\\n\\n    function setPublicSwap(bool publicSwap) external;\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function gulp(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint256);\\n\\n    function getSwapFee() external view returns (uint256);\\n\\n    function getProtocolFee() external view returns (uint256);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint256);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXIT_FEE() external view returns (uint256);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountIn);\\n\\n    function isFinalized() external view returns (bool);\\n\\n    function getNumTokens() external view returns (uint256);\\n\\n    function getCurrentTokens() external view returns (address[] memory);\\n\\n    function getFinalTokens() external view returns (address[] memory);\\n\\n    function getNormalizedWeight(address) external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function getAccessControlAddress() external view returns (address);\\n\\n    function getRoles() external view returns (bytes32[] memory);\\n\\n    function setController(address) external;\\n\\n    function getSpotPrice(address, address) external view returns (uint256);\\n\\n    function getSpotPriceSansFee(address, address) external view returns (uint256);\\n\\n    function finalize() external;\\n\\n    // BPool function\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    function joinPool(uint256, uint256[] calldata) external;\\n\\n    function swapExactAmountIn(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    function exitPool(uint256, uint256[] calldata) external;\\n\\n    function joinswapExternAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountIn);\\n\\n    // ERC20\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n\\n    function increaseApproval(address, uint256) external returns (bool);\\n\\n    function decreaseApproval(address, uint256) external returns (bool);\\n}\\n\\ninterface IBFactory {\\n    function newBPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getAccessControlAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8008bf5575ad8eb14ea4f198462999fd47ea09d756436dba1e3d3491eece8f4d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IFCXAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IFCXAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function whitelisted(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47610c2e0ef91f54b8ecc8366da9f43600f4e5067c9ac107ee0e0e570cfbd505\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/BColor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.6.12;\\n\\nabstract contract BColor {\\n    function getColor() external view virtual returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external view override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5fa9342a20ddbfb345cf619b72aee78cbc46f11be9b84b64c8e8ebfdf0f23d0f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/BConst.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.6.12;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    // uint256 public constant MAX_FEE = BONE / 10;\\n    // FCX: max fee is 100%\\n    uint256 public constant MAX_FEE = BONE;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**14;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0x7e262eb86be3b2b94e5cb31991843e7bd1342d7e82fbb0d0eb6cca80ee8dea00\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/BFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.6.12;\\n\\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\\n\\nimport \\\"./BPool.sol\\\";\\nimport \\\"../IBFactory.sol\\\";\\nimport \\\"../IFCXAccessControl.sol\\\";\\n\\n// Core contract; can't be changed. So disable solhint (reminder for v2)\\n\\n/* solhint-disable func-order */\\n/* solhint-disable event-name-camelcase */\\n\\ncontract BFactory is BBronze {\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\n\\n    event LOG_BLABS(address indexed caller, address indexed blabs);\\n\\n    mapping(address => bool) private _isBPool;\\n\\n    address private _accessAddress;\\n    address private _logic;\\n\\n    constructor(address accessAddress, address logic) public {\\n        _accessAddress = accessAddress;\\n        _logic = logic;\\n        _blabs = msg.sender;\\n    }\\n\\n    function isBPool(address b) external view returns (bool) {\\n        return _isBPool[b];\\n    }\\n\\n    function newBPool() external returns (BPool) {\\n        require(\\n            IFCXAccessControl(_accessAddress).hasRole(keccak256(\\\"ADMIN_ROLE\\\"), tx.origin),\\n            \\\"AccessControl: sender must be admin to have permission\\\"\\n        );\\n\\n        BPool bpool = new BPool(_logic);\\n        _isBPool[address(bpool)] = true;\\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\\n        IBPool(address(bpool)).setAccessControlAddress(_accessAddress);\\n        IBPool(address(bpool)).setController(msg.sender);\\n        return bpool;\\n    }\\n\\n    address private _blabs;\\n\\n    function getBLabs() external view returns (address) {\\n        return _blabs;\\n    }\\n\\n    function getAccessControlAddress() external view returns (address) {\\n        return _accessAddress;\\n    }\\n\\n    function setBLabs(address b) external {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        emit LOG_BLABS(msg.sender, b);\\n        _blabs = b;\\n    }\\n\\n    function setAccessControlAddress(address accessAddress) external {\\n        require(\\n            IFCXAccessControl(_accessAddress).hasRole(keccak256(\\\"ADMIN_ROLE\\\"), tx.origin),\\n            \\\"AccessControl: sender must be admin to have permission\\\"\\n        );\\n        require(accessAddress != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n\\n        require(\\n            IFCXAccessControl(accessAddress).hasRole(keccak256(\\\"ADMIN_ROLE\\\"), tx.origin),\\n            \\\"AccessControl: sender must be admin of new access control\\\"\\n        );\\n        _accessAddress = accessAddress;\\n    }\\n\\n    function collect(BPool pool) external {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        uint256 collected = IERC20(pool).balanceOf(address(this));\\n        bool xfer = pool.transfer(_blabs, collected);\\n        require(xfer, \\\"ERR_ERC20_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1795f25487e80b8770f3dcff282e48c526ddba87dcb5bbe6e2a96195895534f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/BMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.6.12;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        // Charge the trading fee for the proportion of tokenAi\\n        ///  which is implicitly traded to the other pool tokens.\\n        // That proportion is (1- weightTokenIn)\\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0xc8b05b7974ff61d55f6c5bba5cab7d2fd6f2d52d2be6065a661c74a4d641dd3d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/BNum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.6.12;\\n\\nimport \\\"./BConst.sol\\\";\\n\\n// Core contract; can't be changed. So disable solhint (reminder for v2)\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x7878196955b55a6cecc34a8711a4ecb3322ea858f4f550b32569897149b052a7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/BPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\nimport \\\"../IFCXAccessControl.sol\\\";\\n\\n// Core contract; can't be changed. So disable solhint (reminder for v2)\\n\\n/* solhint-disable func-order */\\n/* solhint-disable event-name-camelcase */\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelist() {\\n        IFCXAccessControl accessControl = IFCXAccessControl(_accessAddress);\\n        require(accessControl.whitelisted(tx.origin), \\\"FCXAccessControl: sender is not in whitelist\\\");\\n        _;\\n    }\\n\\n    modifier swapValid() {\\n        bool check;\\n        IFCXAccessControl accessControl = IFCXAccessControl(_accessAddress);\\n        for (uint256 i = 0; i < _roles.length; ++i) {\\n            if (accessControl.hasRole(_roles[i], tx.origin)) {\\n                check = true;\\n                break;\\n            }\\n        }\\n        require(check, \\\"FCXAccessControl: sender doesn't have same roles as pool\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    uint256 private _protocolFee;\\n    address private _accessAddress;\\n    bytes32[] private _roles;\\n\\n    constructor(address _logic) public {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        _roles = [keccak256(\\\"ADMIN_ROLE\\\"), keccak256(\\\"RESTRICTED_ROLE\\\"), keccak256(\\\"UNRESTRICTED_ROLE\\\")];\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external {\\n        _delegate(_implementation());\\n    }\\n\\n    function getFCXAdmin() external view returns (address) {\\n        return IFCXAccessControl(_accessAddress).getRoleMember(keccak256(\\\"ADMIN_ROLE\\\"), 0);\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external onlyWhitelist _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external onlyWhitelist _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external swapValid _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        uint256 spotPriceBefore = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        _pushUnderlying(tokenIn, this.getFCXAdmin(), bmul(_protocolFee, tokenAmountIn));\\n        inRecord.balance = bsub(inRecord.balance, bmul(_protocolFee, tokenAmountIn));\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external swapValid _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        uint256 spotPriceBefore = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        _pushUnderlying(tokenIn, this.getFCXAdmin(), bmul(_protocolFee, tokenAmountIn));\\n        inRecord.balance = bsub(inRecord.balance, bmul(_protocolFee, tokenAmountIn));\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external onlyWhitelist _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external onlyWhitelist _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external onlyWhitelist _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external onlyWhitelist _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd4a54dbf08ad80fd3b2e14ce88f550eab41646dc4986c9c85ec7336f5af4d22f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/BToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.6.12;\\n\\nimport \\\"./BNum.sol\\\";\\n\\n// Highly opinionated token implementation\\n\\ninterface IERC20 {\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\n// Core contract; can't be changed. So disable solhint (reminder for v2)\\n\\n/* solhint-disable func-order */\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, IERC20 {\\n    string private _name = \\\"FCX Pool Token\\\";\\n    string private _symbol = \\\"FPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xef4608efd1f21b363e0c933f06d43735946b4b1d09ba65a5bae07f512f19b2d9\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516159de3803806159de8339818101604052604081101561003357600080fd5b508051602090910151600180546001600160a01b039384166001600160a01b03199182161790915560028054939092169281169290921790556003805490911633179055615958806100866000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c6ce34fb1161005b578063c6ce34fb1461012d578063c7154c0a14610153578063d556c5dc1461015b578063e8d56b8b1461016357610088565b806306ec16f81461008d57806336ffb167146100b55780639a86139b146100d9578063c2bb6dc2146100f3575b600080fd5b6100b3600480360360208110156100a357600080fd5b50356001600160a01b0316610189565b005b6100bd610326565b604080516001600160a01b039092168252519081900360200190f35b6100e1610335565b60408051918252519081900360200190f35b6101196004803603602081101561010957600080fd5b50356001600160a01b0316610342565b604080519115158252519081900360200190f35b6100b36004803603602081101561014357600080fd5b50356001600160a01b0316610360565b6100bd610407565b6100bd610416565b6100b36004803603602081101561017957600080fd5b50356001600160a01b0316610653565b6003546001600160a01b031633146101d8576040805162461bcd60e51b815260206004820152600d60248201526c4552525f4e4f545f424c41425360981b604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561022757600080fd5b505afa15801561023b573d6000803e3d6000fd5b505050506040513d602081101561025157600080fd5b50516003546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290519293506000929185169163a9059cbb9160448082019260209290919082900301818787803b1580156102ae57600080fd5b505af11580156102c2573d6000803e3d6000fd5b505050506040513d60208110156102d857600080fd5b5051905080610321576040805162461bcd60e51b815260206004820152601060248201526f11549497d15490cc8c17d1905253115160821b604482015290519081900360640190fd5b505050565b6003546001600160a01b031690565b6542524f4e5a4560d01b90565b6001600160a01b031660009081526020819052604090205460ff1690565b6003546001600160a01b031633146103af576040805162461bcd60e51b815260206004820152600d60248201526c4552525f4e4f545f424c41425360981b604482015290519081900360640190fd5b6040516001600160a01b0382169033907ff586fa6ee1fc42f5b727f3b214ccbd0b6d7e698c45d49ba32f224fbb8670155d90600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031690565b60015460408051632474521560e21b81527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600482015232602482015290516000926001600160a01b0316916391d14854916044808301926020929190829003018186803b15801561048757600080fd5b505afa15801561049b573d6000803e3d6000fd5b505050506040513d60208110156104b157600080fd5b50516104ef5760405162461bcd60e51b8152600401808060200182810382526036815260200180620058b46036913960400191505060405180910390fd5b6002546040516000916001600160a01b03169061050b90610873565b6001600160a01b03909116815260405190819003602001906000f080158015610538573d6000803e3d6000fd5b506001600160a01b038116600081815260208190526040808220805460ff1916600117905551929350909133917f8ccec77b0cb63ac2cafd0f5de8cdfadab91ce656d262240ba8a6343bccc5f94591a36001546040805163e8d56b8b60e01b81526001600160a01b03928316600482015290519183169163e8d56b8b9160248082019260009290919082900301818387803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b5050604080516392eefe9b60e01b815233600482015290516001600160a01b03851693506392eefe9b9250602480830192600092919082900301818387803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b5092935050505090565b60015460408051632474521560e21b81527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600482015232602482015290516001600160a01b03909216916391d1485491604480820192602092909190829003018186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d60208110156106ee57600080fd5b505161072c5760405162461bcd60e51b8152600401808060200182810382526036815260200180620058b46036913960400191505060405180910390fd5b6001600160a01b03811661077d576040805162461bcd60e51b81526020600482015260136024820152724552525f494e56414c49445f4144445245535360681b604482015290519081900360640190fd5b60408051632474521560e21b81527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600482015232602482015290516001600160a01b038316916391d14854916044808301926020929190829003018186803b1580156107e957600080fd5b505afa1580156107fd573d6000803e3d6000fd5b505050506040513d602081101561081357600080fd5b50516108515760405162461bcd60e51b8152600401808060200182810382526039815260200180620058ea6039913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61503280620008828339019056fe60c0604052600e60808190526d2321ac102837b7b6102a37b5b2b760911b60a090815262000031916003919062000209565b506040805180820190915260038082526211941560ea1b60209092019182526200005e9160049162000209565b506005805460ff191660121790553480156200007957600080fd5b506040516200503238038062005032833981810160405260208110156200009f57600080fd5b5051600680546005805462010000600160b01b031916336201000081029190911790915564e8d4a510006007556001600160a01b03199091161760ff60a01b191690556008805460ff19169055620000f7816200018c565b60405180606001604052807fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581526020017fa0962abd2c4b5637166310be8994eed908f58b5b5396ff129d47c68a40bd22be81526020017ff1ace51d64be07e49551907f704b17a27f35380de69c40bb47b25cccef03fe1e815250600e906003620001849291906200028e565b5050620002e2565b620001a2816200020360201b620043701760201c565b620001df5760405162461bcd60e51b815260040180806020018281038252603681526020018062004ffc6036913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024c57805160ff19168380011785556200027c565b828001600101855582156200027c579182015b828111156200027c5782518255916020019190600101906200025f565b506200028a929150620002cb565b5090565b8280548282559060005260206000209081019282156200027c57916020028201828111156200027c5782518255916020019190600101906200025f565b5b808211156200028a5760008155600101620002cc565b614d0a80620002f26000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c8063867378c511610167578063ba9530a6116100ce578063d73dd62311610087578063d73dd623146108fa578063dd62ed3e14610926578063e4a28a52146103b3578063e4e1e53814610954578063ec09302114610986578063f8d6aed41461098e576102a0565b8063ba9530a614610889578063bc063e1a146103cb578063bc694ea2146108c4578063c36596a6146103cb578063c6580d12146108cc578063cf5e7bd3146108d4576102a0565b8063a221ee4911610120578063a221ee4914610799578063a9059cbb146107ce578063b02f0b73146107fa578063b0e0d13614610871578063b7b800a414610879578063ba019dab14610881576102a0565b8063867378c514610736578063892980121461073e5780639381cd2b1461077957806395d89b4114610781578063992e2a92146107895780639a86139b14610791576102a0565b80634f69c0d41161020b57806376c7a3c7116101c457806376c7a3c7146105fb5780637c5e9ea4146106035780637f6d712b1461065c5780638201aa3f1461068057806382f652ad146106c05780638656b653146106fb576102a0565b80634f69c0d4146104935780635c1bbaf71461050a5780635db342771461054557806366188463146105775780636d06dfa0146105a357806370a08231146105d5576102a0565b8063218b53821161025d578063218b5382146103cb57806323b872dd146103d3578063313ce567146104095780633fdddaa21461042757806346ab38f1146104595780634bb278f31461048b576102a0565b806302c96748146102b257806306fdde03146102f6578063095ea7b31461037357806309a3bbe4146103b357806318160ddd146103bb578063189d00ca146103c3575b6102b06102ab6109c9565b6109ee565b005b6102e4600480360360608110156102c857600080fd5b506001600160a01b038135169060208101359060400135610a17565b60408051918252519081900360200190f35b6102fe610e2b565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610338578181015183820152602001610320565b50505050905090810190601f1680156103655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61039f6004803603604081101561038957600080fd5b506001600160a01b038135169060200135610ec1565b604080519115158252519081900360200190f35b6102e4610f16565b6102e4610f23565b6102e4610f29565b6102e4610f3d565b61039f600480360360608110156103e957600080fd5b506001600160a01b03813581169160208101359091169060400135610f49565b6104116110a3565b6040805160ff9092168252519081900360200190f35b6102b06004803603606081101561043d57600080fd5b506001600160a01b0381351690602081013590604001356110ac565b6102e46004803603606081101561046f57600080fd5b506001600160a01b0381351690602081013590604001356114b8565b6102b061186a565b6102b0600480360360408110156104a957600080fd5b813591908101906040810160208201356401000000008111156104cb57600080fd5b8201836020820111156104dd57600080fd5b803590602001918460208302840111640100000000831117156104ff57600080fd5b509092509050611a61565b6102e4600480360360c081101561052057600080fd5b5080359060208101359060408101359060608101359060808101359060a00135611e20565b6102e46004803603606081101561055b57600080fd5b506001600160a01b038135169060208101359060400135611ed8565b61039f6004803603604081101561058d57600080fd5b506001600160a01b03813516906020013561226f565b6102e4600480360360608110156105b957600080fd5b506001600160a01b038135169060208101359060400135612347565b6102e4600480360360208110156105eb57600080fd5b50356001600160a01b031661270b565b6102e4612726565b610643600480360360a081101561061957600080fd5b506001600160a01b0381358116916020810135916040820135169060608101359060800135612738565b6040805192835260208301919091528051918290030190f35b610664612da8565b604080516001600160a01b039092168252519081900360200190f35b610643600480360360a081101561069657600080fd5b506001600160a01b0381358116916020810135916040820135169060608101359060800135612e4d565b6102e4600480360360c08110156106d657600080fd5b5080359060208101359060408101359060608101359060808101359060a0013561349a565b6102e4600480360360c081101561071157600080fd5b5080359060208101359060408101359060608101359060808101359060a00135613559565b6102e46135fa565b6102e4600480360360c081101561075457600080fd5b5080359060208101359060408101359060608101359060808101359060a0013561360f565b6102e46136bf565b6102fe6136cc565b6102e461372d565b6102e4613739565b6102e4600480360360a08110156107af57600080fd5b5080359060208101359060408101359060608101359060800135613746565b61039f600480360360408110156107e457600080fd5b506001600160a01b0381351690602001356137ab565b6102b06004803603604081101561081057600080fd5b8135919081019060408101602082013564010000000081111561083257600080fd5b82018360208201111561084457600080fd5b8035906020019184602083028401116401000000008311171561086657600080fd5b5090925090506137c1565b6102e4613bbc565b6102e4613bc1565b6102e4613bc6565b6102e4600480360360c081101561089f57600080fd5b5080359060208101359060408101359060608101359060808101359060a00135613bcb565b6102e4613c4c565b6102e4613c58565b6102b0600480360360208110156108ea57600080fd5b50356001600160a01b0316613c5d565b61039f6004803603604081101561091057600080fd5b506001600160a01b038135169060200135613fdf565b6102e46004803603604081101561093c57600080fd5b506001600160a01b0381358116916020013516614060565b6102b06004803603606081101561096a57600080fd5b506001600160a01b03813516906020810135906040013561408b565b6102e46142dd565b6102e4600480360360c08110156109a457600080fd5b5080359060208101359060408101359060608101359060808101359060a001356142ed565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610a0d573d6000f35b3d6000fd5b505050565b600d5460408051636c9b2a3f60e11b815232600482015290516000926001600160a01b031691829163d936547e91602480820192602092909190829003018186803b158015610a6557600080fd5b505afa158015610a79573d6000803e3d6000fd5b505050506040513d6020811015610a8f57600080fd5b5051610acc5760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615610b78576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16610bd2576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a602052604090205460ff16610c2f576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a60205260409020600390810154610c6491670de0b6b3a76400005b04600101614376565b841115610cac576040805162461bcd60e51b81526020600482015260116024820152704552525f4d41585f4f55545f524154494f60781b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060038101546002808301549054600b54600754610ce694939291908a9061349a565b925082610d2c576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b83831115610d70576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b610d7e81600301548661443f565b60038201556000610d8f8482614376565b6040805188815290519192506001600160a01b0389169133917fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed919081900360200190a3610ddd33856144a1565b610def610dea858361443f565b6144af565b600554610e0b906201000090046001600160a01b0316826144bb565b610e168733886144c5565b5050506005805461ff00191690559392505050565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610eb75780601f10610e8c57610100808354040283529160200191610eb7565b820191906000526020600020905b815481529060010190602001808311610e9a57829003601f168201915b5050505050905090565b3360008181526001602090815260408083206001600160a01b03871680855290835281842086905581518681529151939490939092600080516020614cb5833981519152928290030190a35060015b92915050565b6802b5e3af16b188000081565b60025490565b6402540be400670de0b6b3a76400005b0481565b670de0b6b3a764000081565b6000336001600160a01b0385161480610f8557506001600160a01b03841660009081526001602090815260408083203384529091529020548211155b610fce576040805162461bcd60e51b815260206004820152601560248201527422a9292fa12a27a5a2a72fa120a22fa1a0a62622a960591b604482015290519081900360640190fd5b610fd9848484614596565b336001600160a01b0385161480159061101757506001600160a01b038416600090815260016020908152604080832033845290915290205460001914155b15611099576001600160a01b038416600090815260016020908152604080832033845290915290205461104a908361443f565b6001600160a01b0385811660009081526001602090815260408083203380855290835292819020859055805194855251928716939192600080516020614cb58339815191529281900390910190a35b5060019392505050565b60055460ff1690565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615611158576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff001916610100179055600654336001600160a01b03909116146111bd576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a602052604090205460ff1661121a576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b60085460ff1615611265576040805162461bcd60e51b815260206004820152601060248201526f11549497d254d7d1925390531256915160821b604482015290519081900360640190fd5b670de0b6b3a76400008110156112b3576040805162461bcd60e51b815260206004820152600e60248201526d11549497d3525397d5d15251d21560921b604482015290519081900360640190fd5b6802b5e3af16b1880000811115611302576040805162461bcd60e51b815260206004820152600e60248201526d11549497d3505617d5d15251d21560921b604482015290519081900360640190fd5b61271082101561134b576040805162461bcd60e51b815260206004820152600f60248201526e4552525f4d494e5f42414c414e434560881b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a6020526040902060020154808211156113e257611384600b5461137f848461443f565b6146a6565b600b8190556802b5e3af16b188000010156113dd576040805162461bcd60e51b815260206004820152601460248201527311549497d3505617d513d5105317d5d15251d21560621b604482015290519081900360640190fd5b611403565b80821015611403576113ff600b546113fa838561443f565b61443f565b600b555b6001600160a01b0384166000908152600a60205260409020600281018390556003018054908490558084111561144c576114478533611442878561443f565b6146fa565b6114a6565b808410156114a6576000611460828661443f565b9050600061146f826000614376565b90506114858733611480858561443f565b6144c5565b6005546114a39088906201000090046001600160a01b0316836144c5565b50505b50506005805461ff0019169055505050565b600d5460408051636c9b2a3f60e11b815232600482015290516000926001600160a01b031691829163d936547e91602480820192602092909190829003018186803b15801561150657600080fd5b505afa15801561151a573d6000803e3d6000fd5b505050506040513d602081101561153057600080fd5b505161156d5760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615611619576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16611673576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a602052604090205460ff166116d0576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060038101546002808301549054600b5460075461170a94939291908a9061360f565b925083831015611751576040805162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902060039081015461178191670de0b6b3a7640000610c5b565b8311156117c9576040805162461bcd60e51b81526020600482015260116024820152704552525f4d41585f4f55545f524154494f60781b604482015290519081900360640190fd5b6117d781600301548461443f565b600382015560006117e88682614376565b6040805186815290519192506001600160a01b0389169133917fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed919081900360200190a361183633876144a1565b611843610dea878361443f565b60055461185f906201000090046001600160a01b0316826144bb565b610e168733866144c5565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615611916576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff001916610100179055600654336001600160a01b039091161461197b576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b60085460ff16156119c6576040805162461bcd60e51b815260206004820152601060248201526f11549497d254d7d1925390531256915160821b604482015290519081900360640190fd5b60095460021115611a0f576040805162461bcd60e51b815260206004820152600e60248201526d4552525f4d494e5f544f4b454e5360901b604482015290519081900360640190fd5b6008805460ff191660011790556006805460ff60a01b1916600160a01b179055611a4168056bc75e2d63100000614753565b611a543368056bc75e2d631000006144bb565b6005805461ff0019169055565b600d5460408051636c9b2a3f60e11b815232600482015290516001600160a01b0390921691829163d936547e916024808301926020929190829003018186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d6020811015611ad757600080fd5b5051611b145760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615611bc0576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16611c1a576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6000611c24610f23565b90506000611c32868361475c565b905080611c78576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b60005b600954811015611df957600060098281548110611c9457fe5b60009182526020808320909101546001600160a01b0316808352600a909152604082206003015490925090611cc98583614376565b905080611d0f576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b888885818110611d1b57fe5b90506020020135811115611d65576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a6020526040902060030154611d8b90826146a6565b6001600160a01b0384166000818152600a60209081526040918290206003019390935580518481529051919233927f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a9281900390910190a3611dee8333836146fa565b505050600101611c7b565b50611e0386614753565b611e0d33876144bb565b50506005805461ff001916905550505050565b600080611e2d878661475c565b90506000611e3b87866146a6565b90506000611e49828961475c565b90506000611e5f670de0b6b3a76400008561475c565b90506000611e6d8383614864565b90506000611e7b828e614376565b90506000611e89828f61443f565b90506000611ea8611ea2670de0b6b3a76400008a61443f565b8b614376565b9050611ec582611ec0670de0b6b3a76400008461443f565b61475c565b9f9e505050505050505050505050505050565b600d5460408051636c9b2a3f60e11b815232600482015290516000926001600160a01b031691829163d936547e91602480820192602092909190829003018186803b158015611f2657600080fd5b505afa158015611f3a573d6000803e3d6000fd5b505050506040513d6020811015611f5057600080fd5b5051611f8d5760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615612039576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16612093576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a602052604090205460ff166120f0576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060030154612122906002670de0b6b3a76400005b04614376565b841115612169576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d41585f494e5f524154494f60801b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060038101546002808301549054600b546007546121a394939291908a90613559565b9250838310156121ea576040805162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b604482015290519081900360640190fd5b6121f88160030154866146a6565b60038201556040805186815290516001600160a01b0388169133917f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a9181900360200190a361224683614753565b61225033846144bb565b61225b8633876146fa565b50506005805461ff00191690559392505050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054808311156122c4573360009081526001602090815260408083206001600160a01b03881684529091528120556122f3565b6122ce818461443f565b3360009081526001602090815260408083206001600160a01b03891684529091529020555b3360008181526001602090815260408083206001600160a01b038916808552908352928190205481519081529051929392600080516020614cb5833981519152929181900390910190a35060019392505050565b600d5460408051636c9b2a3f60e11b815232600482015290516000926001600160a01b031691829163d936547e91602480820192602092909190829003018186803b15801561239557600080fd5b505afa1580156123a9573d6000803e3d6000fd5b505050506040513d60208110156123bf57600080fd5b50516123fc5760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff16156124a8576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16612502576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a602052604090205460ff1661255f576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060038101546002808301549054600b5460075461259994939291908a90611e20565b9250826125df576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b83831115612623576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902060030154612653906002670de0b6b3a764000061211c565b83111561269a576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d41585f494e5f524154494f60801b604482015290519081900360640190fd5b6126a88160030154846146a6565b60038201556040805184815290516001600160a01b0388169133917f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a9181900360200190a36126f685614753565b61270033866144bb565b61225b8633856146fa565b6001600160a01b031660009081526020819052604090205490565b620f4240670de0b6b3a7640000610f39565b600d54600090819081906001600160a01b0316815b600e5481101561280557816001600160a01b03166391d14854600e838154811061277357fe5b9060005260206000200154326040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b1580156127c357600080fd5b505afa1580156127d7573d6000803e3d6000fd5b505050506040513d60208110156127ed57600080fd5b5051156127fd5760019250612805565b60010161274d565b50816128425760405162461bcd60e51b8152600401808060200182810382526038815260200180614c516038913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff16156128ee576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff0019166101001790556001600160a01b0389166000908152600a602052604090205460ff1661295a576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0387166000908152600a602052604090205460ff166129b7576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b600654600160a01b900460ff16612a0b576040805162461bcd60e51b81526020600482015260136024820152724552525f535741505f4e4f545f5055424c494360681b604482015290519081900360640190fd5b6001600160a01b03808a166000908152600a6020526040808220928a1682529020600380820154612a4491670de0b6b3a7640000610c5b565b881115612a8c576040805162461bcd60e51b81526020600482015260116024820152704552525f4d41585f4f55545f524154494f60781b604482015290519081900360640190fd5b6000612aad8360030154846002015484600301548560020154600754613746565b905087811115612afa576040805162461bcd60e51b81526020600482015260136024820152724552525f4241445f4c494d49545f505249434560681b604482015290519081900360640190fd5b612b1a83600301548460020154846003015485600201548d6007546142ed565b96508a871115612b60576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b612b6e8360030154886146a6565b8360030181905550612b8482600301548a61443f565b600380840182905584015460028086015490850154600754612ba7949190613746565b955080861015612bf0576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b87861115612c37576040805162461bcd60e51b815260206004820152600f60248201526e4552525f4c494d49545f505249434560881b604482015290519081900360640190fd5b612c41878a61475c565b811115612c87576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b896001600160a01b03168c6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d433788a8d604051808381526020018281526020019250505060405180910390a4612cef8c33896146fa565b612cfa8a338b6144c5565b612d708c306001600160a01b0316637f6d712b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3757600080fd5b505afa158015612d4b573d6000803e3d6000fd5b505050506040513d6020811015612d6157600080fd5b5051600c54611480908b614376565b612d8483600301546113fa600c548a614376565b836003018190555050505050506005805461ff001916905590969095509350505050565b600d5460408051632404341f60e21b81527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756004820152600060248201819052915191926001600160a01b031691639010d07c91604480820192602092909190829003018186803b158015612e1c57600080fd5b505afa158015612e30573d6000803e3d6000fd5b505050506040513d6020811015612e4657600080fd5b5051905090565b600d54600090819081906001600160a01b0316815b600e54811015612f1a57816001600160a01b03166391d14854600e8381548110612e8857fe5b9060005260206000200154326040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b158015612ed857600080fd5b505afa158015612eec573d6000803e3d6000fd5b505050506040513d6020811015612f0257600080fd5b505115612f125760019250612f1a565b600101612e62565b5081612f575760405162461bcd60e51b8152600401808060200182810382526038815260200180614c516038913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615613003576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff0019166101001790556001600160a01b0389166000908152600a602052604090205460ff1661306f576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0387166000908152600a602052604090205460ff166130cc576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b600654600160a01b900460ff16613120576040805162461bcd60e51b81526020600482015260136024820152724552525f535741505f4e4f545f5055424c494360681b604482015290519081900360640190fd5b6001600160a01b03808a166000908152600a6020526040808220928a1682529020600382015461315a906002670de0b6b3a764000061211c565b8a11156131a1576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d41585f494e5f524154494f60801b604482015290519081900360640190fd5b60006131c28360030154846002015484600301548560020154600754613746565b90508781111561320f576040805162461bcd60e51b81526020600482015260136024820152724552525f4241445f4c494d49545f505249434560681b604482015290519081900360640190fd5b61322f83600301548460020154846003015485600201548f600754613bcb565b965088871015613276576040805162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b604482015290519081900360640190fd5b61328483600301548c6146a6565b836003018190555061329a82600301548861443f565b6003808401829055840154600280860154908501546007546132bd949190613746565b955080861015613306576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b8786111561334d576040805162461bcd60e51b815260206004820152600f60248201526e4552525f4c494d49545f505249434560881b604482015290519081900360640190fd5b6133578b8861475c565b81111561339d576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b896001600160a01b03168c6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d433788e8b604051808381526020018281526020019250505060405180910390a46134058c338d6146fa565b6134108a33896144c5565b6134868c306001600160a01b0316637f6d712b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561344d57600080fd5b505afa158015613461573d6000803e3d6000fd5b505050506040513d602081101561347757600080fd5b5051600c54611480908f614376565b612d8483600301546113fa600c548e614376565b6000806134a7878661475c565b905060006134bd670de0b6b3a76400008361443f565b905060006134cb8286614376565b905060006134e587611ec0670de0b6b3a76400008561443f565b905060006134f38c8361443f565b90506000613501828e61475c565b9050600061350f8288614864565b9050600061351d828e614376565b9050600061352b8e8361443f565b905061354481611ec0670de0b6b3a7640000600061443f565b99505050505050505050509695505050505050565b600080613566878661475c565b9050600061358561357f670de0b6b3a76400008461443f565b85614376565b905060006135a48661359f670de0b6b3a76400008561443f565b614376565b905060006135b28b836146a6565b905060006135c0828d61475c565b905060006135ce8287614864565b905060006135dc828d614376565b90506135e8818d61443f565b9e9d5050505050505050505050505050565b655af3107a4000670de0b6b3a7640000610f39565b60008061361c878661475c565b905060006136378561359f670de0b6b3a7640000600061443f565b90506000613645888361443f565b90506000613653828a61475c565b905060006136728261366d670de0b6b3a76400008861475c565b614864565b90506000613680828e614376565b9050600061368e8e8361443f565b905060006136a7611ea2670de0b6b3a76400008a61443f565b9050611ec58261359f670de0b6b3a76400008461443f565b68056bc75e2d6310000081565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610eb75780601f10610e8c57610100808354040283529160200191610eb7565b6704a03ce68d21555681565b6542524f4e5a4560d01b90565b600080613753878761475c565b90506000613761868661475c565b9050600061376f838361475c565b90506000613791670de0b6b3a7640000611ec0670de0b6b3a76400008961443f565b905061379d8282614376565b9a9950505050505050505050565b60006137b8338484614596565b50600192915050565b600d5460408051636c9b2a3f60e11b815232600482015290516001600160a01b0390921691829163d936547e916024808301926020929190829003018186803b15801561380d57600080fd5b505afa158015613821573d6000803e3d6000fd5b505050506040513d602081101561383757600080fd5b50516138745760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615613920576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff1661397a576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6000613984610f23565b90506000613993866000614376565b905060006139a1878361443f565b905060006139af828561475c565b9050806139f5576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b6139ff33896144a1565b600554613a1b906201000090046001600160a01b0316846144bb565b613a24826144af565b60005b600954811015613ba657600060098281548110613a4057fe5b60009182526020808320909101546001600160a01b0316808352600a909152604082206003015490925090613a758583614376565b905080613abb576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b8a8a85818110613ac757fe5b90506020020135811015613b12576040805162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a6020526040902060030154613b38908261443f565b6001600160a01b0384166000818152600a60209081526040918290206003019390935580518481529051919233927fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed9281900390910190a3613b9b8333836144c5565b505050600101613a27565b50506005805461ff001916905550505050505050565b600881565b600281565b600181565b600080613bd8878661475c565b90506000613bee670de0b6b3a76400008561443f565b9050613bfa8582614376565b90506000613c0c8a611ec08c856146a6565b90506000613c1a8285614864565b90506000613c30670de0b6b3a76400008361443f565b9050613c3c8a82614376565b9c9b505050505050505050505050565b671bc16d674ec7ffff81565b600081565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615613d09576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff001916610100179055600654336001600160a01b0390911614613d6e576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6001600160a01b0381166000908152600a602052604090205460ff16613dcb576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b60085460ff1615613e16576040805162461bcd60e51b815260206004820152601060248201526f11549497d254d7d1925390531256915160821b604482015290519081900360640190fd5b6001600160a01b0381166000908152600a602052604081206003015490613e3d8282614376565b600b546001600160a01b0385166000908152600a6020526040902060020154919250613e689161443f565b600b556001600160a01b0383166000908152600a6020526040902060010154600980546000198101919082908110613e9c57fe5b600091825260209091200154600980546001600160a01b039092169184908110613ec257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600a600060098581548110613f0257fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020600101556009805480613f3557fe5b60008281526020808220600019908401810180546001600160a01b031916905590920190925560408051608081018252838152808301848152818301858152606083018681526001600160a01b038c168752600a909552929094209051815460ff19169015151781559251600184015551600283015551600390910155613fc18533611480878761443f565b6005546114a69086906201000090046001600160a01b0316856144c5565b3360009081526001602090815260408083206001600160a01b038616845290915281205461400d90836146a6565b3360008181526001602090815260408083206001600160a01b038916808552908352928190208590558051948552519193600080516020614cb5833981519152929081900390910190a350600192915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a26006546001600160a01b03163314614140576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a602052604090205460ff161561419d576040805162461bcd60e51b815260206004820152600c60248201526b11549497d254d7d093d5539160a21b604482015290519081900360640190fd5b60085460ff16156141e8576040805162461bcd60e51b815260206004820152601060248201526f11549497d254d7d1925390531256915160821b604482015290519081900360640190fd5b600954600811614230576040805162461bcd60e51b815260206004820152600e60248201526d4552525f4d41585f544f4b454e5360901b604482015290519081900360640190fd5b6040805160808101825260018082526009805460208085019182526000858701818152606087018281526001600160a01b038c16808452600a9094529782209651875460ff1916901515178755925186860155915160028601559451600390940193909355805491820181559091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319169091179055610a128383836110ac565b6002670de0b6b3a7640000610f39565b6000806142fa858861475c565b90506000614308878661443f565b90506000614316888361475c565b905060006143248285614864565b905061433881670de0b6b3a764000061443f565b905061434c670de0b6b3a76400008761443f565b945061436161435b8c83614376565b8661475c565b9b9a5050505050505050505050565b3b151590565b600082820283158061439057508284828161438d57fe5b04145b6143d4576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b604482015290519081900360640190fd5b6706f05b59d3b20000810181811015614427576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b604482015290519081900360640190fd5b6000670de0b6b3a7640000825b049695505050505050565b600080600061444e8585614972565b915091508015614499576040805162461bcd60e51b81526020600482015260116024820152704552525f5355425f554e444552464c4f5760781b604482015290519081900360640190fd5b509392505050565b6144ab8282614997565b5050565b6144b8816149a2565b50565b6144ab8282614a72565b6000836001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561451e57600080fd5b505af1158015614532573d6000803e3d6000fd5b505050506040513d602081101561454857600080fd5b5051905080614590576040805162461bcd60e51b815260206004820152600f60248201526e4552525f45524332305f46414c534560881b604482015290519081900360640190fd5b50505050565b6001600160a01b0383166000908152602081905260409020548111156145fa576040805162461bcd60e51b815260206004820152601460248201527311549497d25394d551919250d251539517d0905360621b604482015290519081900360640190fd5b6001600160a01b03831660009081526020819052604090205461461d908261443f565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461464c90826146a6565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156146f3576040805162461bcd60e51b815260206004820152601060248201526f4552525f4144445f4f564552464c4f5760801b604482015290519081900360640190fd5b9392505050565b604080516323b872dd60e01b81526001600160a01b0384811660048301523060248301526044820184905291516000928616916323b872dd91606480830192602092919082900301818787803b15801561451e57600080fd5b6144b881614a7d565b60008161479f576040805162461bcd60e51b815260206004820152600c60248201526b4552525f4449565f5a45524f60a01b604482015290519081900360640190fd5b670de0b6b3a764000083028315806147c75750670de0b6b3a76400008482816147c457fe5b04145b61480b576040805162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b604482015290519081900360640190fd5b60028304810181811015614859576040805162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b604482015290519081900360640190fd5b600084828161443457fe5b600060018310156148b4576040805162461bcd60e51b81526020600482015260156024820152744552525f42504f575f424153455f544f4f5f4c4f5760581b604482015290519081900360640190fd5b671bc16d674ec7ffff83111561490a576040805162461bcd60e51b815260206004820152601660248201527508aa4a4be84a09eaebe8482a68abea89e9ebe90928e960531b604482015290519081900360640190fd5b600061491583614af2565b90506000614923848361443f565b905060006149398661493485614b0d565b614b1b565b90508161494a579250610f10915050565b600061495b87846305f5e100614b72565b90506149678282614376565b979650505050505050565b6000808284106149885750508082036000614990565b505081810360015b9250929050565b6144ab823083614596565b306000908152602081905260409020548111156149fd576040805162461bcd60e51b815260206004820152601460248201527311549497d25394d551919250d251539517d0905360621b604482015290519081900360640190fd5b30600090815260208190526040902054614a17908261443f565b30600090815260208190526040902055600254614a34908261443f565b60025560408051828152905160009130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350565b6144ab308383614596565b30600090815260208190526040902054614a9790826146a6565b30600090815260208190526040902055600254614ab490826146a6565b60025560408051828152905130916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350565b6000670de0b6b3a7640000614b0683614b0d565b0292915050565b670de0b6b3a7640000900490565b60008060028306614b3457670de0b6b3a7640000614b36565b835b90506002830492505b82156146f357614b4f8485614376565b93506002830615614b6757614b648185614376565b90505b600283049250614b3f565b6000828180614b8987670de0b6b3a7640000614972565b9092509050670de0b6b3a764000080600060015b888410614c41576000670de0b6b3a764000082029050600080614bd18a614bcc85670de0b6b3a764000061443f565b614972565b91509150614be38761359f848c614376565b9650614bef878461475c565b965086614bfe57505050614c41565b8715614c08579315935b8015614c12579315935b8415614c2957614c22868861443f565b9550614c36565b614c3386886146a6565b95505b505050600101614b9d565b5090999850505050505050505056fe464358416363657373436f6e74726f6c3a2073656e64657220646f65736e277420686176652073616d6520726f6c657320617320706f6f6c464358416363657373436f6e74726f6c3a2073656e646572206973206e6f7420696e2077686974656c6973748c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122057e0ea5b7b5f994c1b06e06e221ffad11e661e5b00214d23e1e4ae63d096e96964736f6c634300060c00335570677261646561626c6550726f78793a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374416363657373436f6e74726f6c3a2073656e646572206d7573742062652061646d696e20746f2068617665207065726d697373696f6e416363657373436f6e74726f6c3a2073656e646572206d7573742062652061646d696e206f66206e65772061636365737320636f6e74726f6ca26469706673582212209e7d2ebedf9dc8d908483209602c2c7ef8a07fafffe6d951b49b031408b85e0564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063c6ce34fb1161005b578063c6ce34fb1461012d578063c7154c0a14610153578063d556c5dc1461015b578063e8d56b8b1461016357610088565b806306ec16f81461008d57806336ffb167146100b55780639a86139b146100d9578063c2bb6dc2146100f3575b600080fd5b6100b3600480360360208110156100a357600080fd5b50356001600160a01b0316610189565b005b6100bd610326565b604080516001600160a01b039092168252519081900360200190f35b6100e1610335565b60408051918252519081900360200190f35b6101196004803603602081101561010957600080fd5b50356001600160a01b0316610342565b604080519115158252519081900360200190f35b6100b36004803603602081101561014357600080fd5b50356001600160a01b0316610360565b6100bd610407565b6100bd610416565b6100b36004803603602081101561017957600080fd5b50356001600160a01b0316610653565b6003546001600160a01b031633146101d8576040805162461bcd60e51b815260206004820152600d60248201526c4552525f4e4f545f424c41425360981b604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561022757600080fd5b505afa15801561023b573d6000803e3d6000fd5b505050506040513d602081101561025157600080fd5b50516003546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290519293506000929185169163a9059cbb9160448082019260209290919082900301818787803b1580156102ae57600080fd5b505af11580156102c2573d6000803e3d6000fd5b505050506040513d60208110156102d857600080fd5b5051905080610321576040805162461bcd60e51b815260206004820152601060248201526f11549497d15490cc8c17d1905253115160821b604482015290519081900360640190fd5b505050565b6003546001600160a01b031690565b6542524f4e5a4560d01b90565b6001600160a01b031660009081526020819052604090205460ff1690565b6003546001600160a01b031633146103af576040805162461bcd60e51b815260206004820152600d60248201526c4552525f4e4f545f424c41425360981b604482015290519081900360640190fd5b6040516001600160a01b0382169033907ff586fa6ee1fc42f5b727f3b214ccbd0b6d7e698c45d49ba32f224fbb8670155d90600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031690565b60015460408051632474521560e21b81527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600482015232602482015290516000926001600160a01b0316916391d14854916044808301926020929190829003018186803b15801561048757600080fd5b505afa15801561049b573d6000803e3d6000fd5b505050506040513d60208110156104b157600080fd5b50516104ef5760405162461bcd60e51b8152600401808060200182810382526036815260200180620058b46036913960400191505060405180910390fd5b6002546040516000916001600160a01b03169061050b90610873565b6001600160a01b03909116815260405190819003602001906000f080158015610538573d6000803e3d6000fd5b506001600160a01b038116600081815260208190526040808220805460ff1916600117905551929350909133917f8ccec77b0cb63ac2cafd0f5de8cdfadab91ce656d262240ba8a6343bccc5f94591a36001546040805163e8d56b8b60e01b81526001600160a01b03928316600482015290519183169163e8d56b8b9160248082019260009290919082900301818387803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b5050604080516392eefe9b60e01b815233600482015290516001600160a01b03851693506392eefe9b9250602480830192600092919082900301818387803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b5092935050505090565b60015460408051632474521560e21b81527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600482015232602482015290516001600160a01b03909216916391d1485491604480820192602092909190829003018186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d60208110156106ee57600080fd5b505161072c5760405162461bcd60e51b8152600401808060200182810382526036815260200180620058b46036913960400191505060405180910390fd5b6001600160a01b03811661077d576040805162461bcd60e51b81526020600482015260136024820152724552525f494e56414c49445f4144445245535360681b604482015290519081900360640190fd5b60408051632474521560e21b81527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600482015232602482015290516001600160a01b038316916391d14854916044808301926020929190829003018186803b1580156107e957600080fd5b505afa1580156107fd573d6000803e3d6000fd5b505050506040513d602081101561081357600080fd5b50516108515760405162461bcd60e51b8152600401808060200182810382526039815260200180620058ea6039913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61503280620008828339019056fe60c0604052600e60808190526d2321ac102837b7b6102a37b5b2b760911b60a090815262000031916003919062000209565b506040805180820190915260038082526211941560ea1b60209092019182526200005e9160049162000209565b506005805460ff191660121790553480156200007957600080fd5b506040516200503238038062005032833981810160405260208110156200009f57600080fd5b5051600680546005805462010000600160b01b031916336201000081029190911790915564e8d4a510006007556001600160a01b03199091161760ff60a01b191690556008805460ff19169055620000f7816200018c565b60405180606001604052807fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581526020017fa0962abd2c4b5637166310be8994eed908f58b5b5396ff129d47c68a40bd22be81526020017ff1ace51d64be07e49551907f704b17a27f35380de69c40bb47b25cccef03fe1e815250600e906003620001849291906200028e565b5050620002e2565b620001a2816200020360201b620043701760201c565b620001df5760405162461bcd60e51b815260040180806020018281038252603681526020018062004ffc6036913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024c57805160ff19168380011785556200027c565b828001600101855582156200027c579182015b828111156200027c5782518255916020019190600101906200025f565b506200028a929150620002cb565b5090565b8280548282559060005260206000209081019282156200027c57916020028201828111156200027c5782518255916020019190600101906200025f565b5b808211156200028a5760008155600101620002cc565b614d0a80620002f26000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c8063867378c511610167578063ba9530a6116100ce578063d73dd62311610087578063d73dd623146108fa578063dd62ed3e14610926578063e4a28a52146103b3578063e4e1e53814610954578063ec09302114610986578063f8d6aed41461098e576102a0565b8063ba9530a614610889578063bc063e1a146103cb578063bc694ea2146108c4578063c36596a6146103cb578063c6580d12146108cc578063cf5e7bd3146108d4576102a0565b8063a221ee4911610120578063a221ee4914610799578063a9059cbb146107ce578063b02f0b73146107fa578063b0e0d13614610871578063b7b800a414610879578063ba019dab14610881576102a0565b8063867378c514610736578063892980121461073e5780639381cd2b1461077957806395d89b4114610781578063992e2a92146107895780639a86139b14610791576102a0565b80634f69c0d41161020b57806376c7a3c7116101c457806376c7a3c7146105fb5780637c5e9ea4146106035780637f6d712b1461065c5780638201aa3f1461068057806382f652ad146106c05780638656b653146106fb576102a0565b80634f69c0d4146104935780635c1bbaf71461050a5780635db342771461054557806366188463146105775780636d06dfa0146105a357806370a08231146105d5576102a0565b8063218b53821161025d578063218b5382146103cb57806323b872dd146103d3578063313ce567146104095780633fdddaa21461042757806346ab38f1146104595780634bb278f31461048b576102a0565b806302c96748146102b257806306fdde03146102f6578063095ea7b31461037357806309a3bbe4146103b357806318160ddd146103bb578063189d00ca146103c3575b6102b06102ab6109c9565b6109ee565b005b6102e4600480360360608110156102c857600080fd5b506001600160a01b038135169060208101359060400135610a17565b60408051918252519081900360200190f35b6102fe610e2b565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610338578181015183820152602001610320565b50505050905090810190601f1680156103655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61039f6004803603604081101561038957600080fd5b506001600160a01b038135169060200135610ec1565b604080519115158252519081900360200190f35b6102e4610f16565b6102e4610f23565b6102e4610f29565b6102e4610f3d565b61039f600480360360608110156103e957600080fd5b506001600160a01b03813581169160208101359091169060400135610f49565b6104116110a3565b6040805160ff9092168252519081900360200190f35b6102b06004803603606081101561043d57600080fd5b506001600160a01b0381351690602081013590604001356110ac565b6102e46004803603606081101561046f57600080fd5b506001600160a01b0381351690602081013590604001356114b8565b6102b061186a565b6102b0600480360360408110156104a957600080fd5b813591908101906040810160208201356401000000008111156104cb57600080fd5b8201836020820111156104dd57600080fd5b803590602001918460208302840111640100000000831117156104ff57600080fd5b509092509050611a61565b6102e4600480360360c081101561052057600080fd5b5080359060208101359060408101359060608101359060808101359060a00135611e20565b6102e46004803603606081101561055b57600080fd5b506001600160a01b038135169060208101359060400135611ed8565b61039f6004803603604081101561058d57600080fd5b506001600160a01b03813516906020013561226f565b6102e4600480360360608110156105b957600080fd5b506001600160a01b038135169060208101359060400135612347565b6102e4600480360360208110156105eb57600080fd5b50356001600160a01b031661270b565b6102e4612726565b610643600480360360a081101561061957600080fd5b506001600160a01b0381358116916020810135916040820135169060608101359060800135612738565b6040805192835260208301919091528051918290030190f35b610664612da8565b604080516001600160a01b039092168252519081900360200190f35b610643600480360360a081101561069657600080fd5b506001600160a01b0381358116916020810135916040820135169060608101359060800135612e4d565b6102e4600480360360c08110156106d657600080fd5b5080359060208101359060408101359060608101359060808101359060a0013561349a565b6102e4600480360360c081101561071157600080fd5b5080359060208101359060408101359060608101359060808101359060a00135613559565b6102e46135fa565b6102e4600480360360c081101561075457600080fd5b5080359060208101359060408101359060608101359060808101359060a0013561360f565b6102e46136bf565b6102fe6136cc565b6102e461372d565b6102e4613739565b6102e4600480360360a08110156107af57600080fd5b5080359060208101359060408101359060608101359060800135613746565b61039f600480360360408110156107e457600080fd5b506001600160a01b0381351690602001356137ab565b6102b06004803603604081101561081057600080fd5b8135919081019060408101602082013564010000000081111561083257600080fd5b82018360208201111561084457600080fd5b8035906020019184602083028401116401000000008311171561086657600080fd5b5090925090506137c1565b6102e4613bbc565b6102e4613bc1565b6102e4613bc6565b6102e4600480360360c081101561089f57600080fd5b5080359060208101359060408101359060608101359060808101359060a00135613bcb565b6102e4613c4c565b6102e4613c58565b6102b0600480360360208110156108ea57600080fd5b50356001600160a01b0316613c5d565b61039f6004803603604081101561091057600080fd5b506001600160a01b038135169060200135613fdf565b6102e46004803603604081101561093c57600080fd5b506001600160a01b0381358116916020013516614060565b6102b06004803603606081101561096a57600080fd5b506001600160a01b03813516906020810135906040013561408b565b6102e46142dd565b6102e4600480360360c08110156109a457600080fd5b5080359060208101359060408101359060608101359060808101359060a001356142ed565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610a0d573d6000f35b3d6000fd5b505050565b600d5460408051636c9b2a3f60e11b815232600482015290516000926001600160a01b031691829163d936547e91602480820192602092909190829003018186803b158015610a6557600080fd5b505afa158015610a79573d6000803e3d6000fd5b505050506040513d6020811015610a8f57600080fd5b5051610acc5760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615610b78576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16610bd2576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a602052604090205460ff16610c2f576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a60205260409020600390810154610c6491670de0b6b3a76400005b04600101614376565b841115610cac576040805162461bcd60e51b81526020600482015260116024820152704552525f4d41585f4f55545f524154494f60781b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060038101546002808301549054600b54600754610ce694939291908a9061349a565b925082610d2c576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b83831115610d70576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b610d7e81600301548661443f565b60038201556000610d8f8482614376565b6040805188815290519192506001600160a01b0389169133917fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed919081900360200190a3610ddd33856144a1565b610def610dea858361443f565b6144af565b600554610e0b906201000090046001600160a01b0316826144bb565b610e168733886144c5565b5050506005805461ff00191690559392505050565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610eb75780601f10610e8c57610100808354040283529160200191610eb7565b820191906000526020600020905b815481529060010190602001808311610e9a57829003601f168201915b5050505050905090565b3360008181526001602090815260408083206001600160a01b03871680855290835281842086905581518681529151939490939092600080516020614cb5833981519152928290030190a35060015b92915050565b6802b5e3af16b188000081565b60025490565b6402540be400670de0b6b3a76400005b0481565b670de0b6b3a764000081565b6000336001600160a01b0385161480610f8557506001600160a01b03841660009081526001602090815260408083203384529091529020548211155b610fce576040805162461bcd60e51b815260206004820152601560248201527422a9292fa12a27a5a2a72fa120a22fa1a0a62622a960591b604482015290519081900360640190fd5b610fd9848484614596565b336001600160a01b0385161480159061101757506001600160a01b038416600090815260016020908152604080832033845290915290205460001914155b15611099576001600160a01b038416600090815260016020908152604080832033845290915290205461104a908361443f565b6001600160a01b0385811660009081526001602090815260408083203380855290835292819020859055805194855251928716939192600080516020614cb58339815191529281900390910190a35b5060019392505050565b60055460ff1690565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615611158576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff001916610100179055600654336001600160a01b03909116146111bd576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a602052604090205460ff1661121a576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b60085460ff1615611265576040805162461bcd60e51b815260206004820152601060248201526f11549497d254d7d1925390531256915160821b604482015290519081900360640190fd5b670de0b6b3a76400008110156112b3576040805162461bcd60e51b815260206004820152600e60248201526d11549497d3525397d5d15251d21560921b604482015290519081900360640190fd5b6802b5e3af16b1880000811115611302576040805162461bcd60e51b815260206004820152600e60248201526d11549497d3505617d5d15251d21560921b604482015290519081900360640190fd5b61271082101561134b576040805162461bcd60e51b815260206004820152600f60248201526e4552525f4d494e5f42414c414e434560881b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a6020526040902060020154808211156113e257611384600b5461137f848461443f565b6146a6565b600b8190556802b5e3af16b188000010156113dd576040805162461bcd60e51b815260206004820152601460248201527311549497d3505617d513d5105317d5d15251d21560621b604482015290519081900360640190fd5b611403565b80821015611403576113ff600b546113fa838561443f565b61443f565b600b555b6001600160a01b0384166000908152600a60205260409020600281018390556003018054908490558084111561144c576114478533611442878561443f565b6146fa565b6114a6565b808410156114a6576000611460828661443f565b9050600061146f826000614376565b90506114858733611480858561443f565b6144c5565b6005546114a39088906201000090046001600160a01b0316836144c5565b50505b50506005805461ff0019169055505050565b600d5460408051636c9b2a3f60e11b815232600482015290516000926001600160a01b031691829163d936547e91602480820192602092909190829003018186803b15801561150657600080fd5b505afa15801561151a573d6000803e3d6000fd5b505050506040513d602081101561153057600080fd5b505161156d5760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615611619576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16611673576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a602052604090205460ff166116d0576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060038101546002808301549054600b5460075461170a94939291908a9061360f565b925083831015611751576040805162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902060039081015461178191670de0b6b3a7640000610c5b565b8311156117c9576040805162461bcd60e51b81526020600482015260116024820152704552525f4d41585f4f55545f524154494f60781b604482015290519081900360640190fd5b6117d781600301548461443f565b600382015560006117e88682614376565b6040805186815290519192506001600160a01b0389169133917fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed919081900360200190a361183633876144a1565b611843610dea878361443f565b60055461185f906201000090046001600160a01b0316826144bb565b610e168733866144c5565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615611916576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff001916610100179055600654336001600160a01b039091161461197b576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b60085460ff16156119c6576040805162461bcd60e51b815260206004820152601060248201526f11549497d254d7d1925390531256915160821b604482015290519081900360640190fd5b60095460021115611a0f576040805162461bcd60e51b815260206004820152600e60248201526d4552525f4d494e5f544f4b454e5360901b604482015290519081900360640190fd5b6008805460ff191660011790556006805460ff60a01b1916600160a01b179055611a4168056bc75e2d63100000614753565b611a543368056bc75e2d631000006144bb565b6005805461ff0019169055565b600d5460408051636c9b2a3f60e11b815232600482015290516001600160a01b0390921691829163d936547e916024808301926020929190829003018186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d6020811015611ad757600080fd5b5051611b145760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615611bc0576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16611c1a576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6000611c24610f23565b90506000611c32868361475c565b905080611c78576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b60005b600954811015611df957600060098281548110611c9457fe5b60009182526020808320909101546001600160a01b0316808352600a909152604082206003015490925090611cc98583614376565b905080611d0f576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b888885818110611d1b57fe5b90506020020135811115611d65576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a6020526040902060030154611d8b90826146a6565b6001600160a01b0384166000818152600a60209081526040918290206003019390935580518481529051919233927f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a9281900390910190a3611dee8333836146fa565b505050600101611c7b565b50611e0386614753565b611e0d33876144bb565b50506005805461ff001916905550505050565b600080611e2d878661475c565b90506000611e3b87866146a6565b90506000611e49828961475c565b90506000611e5f670de0b6b3a76400008561475c565b90506000611e6d8383614864565b90506000611e7b828e614376565b90506000611e89828f61443f565b90506000611ea8611ea2670de0b6b3a76400008a61443f565b8b614376565b9050611ec582611ec0670de0b6b3a76400008461443f565b61475c565b9f9e505050505050505050505050505050565b600d5460408051636c9b2a3f60e11b815232600482015290516000926001600160a01b031691829163d936547e91602480820192602092909190829003018186803b158015611f2657600080fd5b505afa158015611f3a573d6000803e3d6000fd5b505050506040513d6020811015611f5057600080fd5b5051611f8d5760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615612039576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16612093576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a602052604090205460ff166120f0576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060030154612122906002670de0b6b3a76400005b04614376565b841115612169576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d41585f494e5f524154494f60801b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060038101546002808301549054600b546007546121a394939291908a90613559565b9250838310156121ea576040805162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b604482015290519081900360640190fd5b6121f88160030154866146a6565b60038201556040805186815290516001600160a01b0388169133917f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a9181900360200190a361224683614753565b61225033846144bb565b61225b8633876146fa565b50506005805461ff00191690559392505050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054808311156122c4573360009081526001602090815260408083206001600160a01b03881684529091528120556122f3565b6122ce818461443f565b3360009081526001602090815260408083206001600160a01b03891684529091529020555b3360008181526001602090815260408083206001600160a01b038916808552908352928190205481519081529051929392600080516020614cb5833981519152929181900390910190a35060019392505050565b600d5460408051636c9b2a3f60e11b815232600482015290516000926001600160a01b031691829163d936547e91602480820192602092909190829003018186803b15801561239557600080fd5b505afa1580156123a9573d6000803e3d6000fd5b505050506040513d60208110156123bf57600080fd5b50516123fc5760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff16156124a8576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff16612502576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a602052604090205460ff1661255f576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0385166000908152600a6020526040902060038101546002808301549054600b5460075461259994939291908a90611e20565b9250826125df576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b83831115612623576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902060030154612653906002670de0b6b3a764000061211c565b83111561269a576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d41585f494e5f524154494f60801b604482015290519081900360640190fd5b6126a88160030154846146a6565b60038201556040805184815290516001600160a01b0388169133917f63982df10efd8dfaaaa0fcc7f50b2d93b7cba26ccc48adee2873220d485dc39a9181900360200190a36126f685614753565b61270033866144bb565b61225b8633856146fa565b6001600160a01b031660009081526020819052604090205490565b620f4240670de0b6b3a7640000610f39565b600d54600090819081906001600160a01b0316815b600e5481101561280557816001600160a01b03166391d14854600e838154811061277357fe5b9060005260206000200154326040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b1580156127c357600080fd5b505afa1580156127d7573d6000803e3d6000fd5b505050506040513d60208110156127ed57600080fd5b5051156127fd5760019250612805565b60010161274d565b50816128425760405162461bcd60e51b8152600401808060200182810382526038815260200180614c516038913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff16156128ee576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff0019166101001790556001600160a01b0389166000908152600a602052604090205460ff1661295a576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0387166000908152600a602052604090205460ff166129b7576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b600654600160a01b900460ff16612a0b576040805162461bcd60e51b81526020600482015260136024820152724552525f535741505f4e4f545f5055424c494360681b604482015290519081900360640190fd5b6001600160a01b03808a166000908152600a6020526040808220928a1682529020600380820154612a4491670de0b6b3a7640000610c5b565b881115612a8c576040805162461bcd60e51b81526020600482015260116024820152704552525f4d41585f4f55545f524154494f60781b604482015290519081900360640190fd5b6000612aad8360030154846002015484600301548560020154600754613746565b905087811115612afa576040805162461bcd60e51b81526020600482015260136024820152724552525f4241445f4c494d49545f505249434560681b604482015290519081900360640190fd5b612b1a83600301548460020154846003015485600201548d6007546142ed565b96508a871115612b60576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b612b6e8360030154886146a6565b8360030181905550612b8482600301548a61443f565b600380840182905584015460028086015490850154600754612ba7949190613746565b955080861015612bf0576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b87861115612c37576040805162461bcd60e51b815260206004820152600f60248201526e4552525f4c494d49545f505249434560881b604482015290519081900360640190fd5b612c41878a61475c565b811115612c87576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b896001600160a01b03168c6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d433788a8d604051808381526020018281526020019250505060405180910390a4612cef8c33896146fa565b612cfa8a338b6144c5565b612d708c306001600160a01b0316637f6d712b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3757600080fd5b505afa158015612d4b573d6000803e3d6000fd5b505050506040513d6020811015612d6157600080fd5b5051600c54611480908b614376565b612d8483600301546113fa600c548a614376565b836003018190555050505050506005805461ff001916905590969095509350505050565b600d5460408051632404341f60e21b81527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756004820152600060248201819052915191926001600160a01b031691639010d07c91604480820192602092909190829003018186803b158015612e1c57600080fd5b505afa158015612e30573d6000803e3d6000fd5b505050506040513d6020811015612e4657600080fd5b5051905090565b600d54600090819081906001600160a01b0316815b600e54811015612f1a57816001600160a01b03166391d14854600e8381548110612e8857fe5b9060005260206000200154326040518363ffffffff1660e01b815260040180838152602001826001600160a01b031681526020019250505060206040518083038186803b158015612ed857600080fd5b505afa158015612eec573d6000803e3d6000fd5b505050506040513d6020811015612f0257600080fd5b505115612f125760019250612f1a565b600101612e62565b5081612f575760405162461bcd60e51b8152600401808060200182810382526038815260200180614c516038913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615613003576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff0019166101001790556001600160a01b0389166000908152600a602052604090205460ff1661306f576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b6001600160a01b0387166000908152600a602052604090205460ff166130cc576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b600654600160a01b900460ff16613120576040805162461bcd60e51b81526020600482015260136024820152724552525f535741505f4e4f545f5055424c494360681b604482015290519081900360640190fd5b6001600160a01b03808a166000908152600a6020526040808220928a1682529020600382015461315a906002670de0b6b3a764000061211c565b8a11156131a1576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d41585f494e5f524154494f60801b604482015290519081900360640190fd5b60006131c28360030154846002015484600301548560020154600754613746565b90508781111561320f576040805162461bcd60e51b81526020600482015260136024820152724552525f4241445f4c494d49545f505249434560681b604482015290519081900360640190fd5b61322f83600301548460020154846003015485600201548f600754613bcb565b965088871015613276576040805162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b604482015290519081900360640190fd5b61328483600301548c6146a6565b836003018190555061329a82600301548861443f565b6003808401829055840154600280860154908501546007546132bd949190613746565b955080861015613306576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b8786111561334d576040805162461bcd60e51b815260206004820152600f60248201526e4552525f4c494d49545f505249434560881b604482015290519081900360640190fd5b6133578b8861475c565b81111561339d576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b896001600160a01b03168c6001600160a01b0316336001600160a01b03167f908fb5ee8f16c6bc9bc3690973819f32a4d4b10188134543c88706e0e1d433788e8b604051808381526020018281526020019250505060405180910390a46134058c338d6146fa565b6134108a33896144c5565b6134868c306001600160a01b0316637f6d712b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561344d57600080fd5b505afa158015613461573d6000803e3d6000fd5b505050506040513d602081101561347757600080fd5b5051600c54611480908f614376565b612d8483600301546113fa600c548e614376565b6000806134a7878661475c565b905060006134bd670de0b6b3a76400008361443f565b905060006134cb8286614376565b905060006134e587611ec0670de0b6b3a76400008561443f565b905060006134f38c8361443f565b90506000613501828e61475c565b9050600061350f8288614864565b9050600061351d828e614376565b9050600061352b8e8361443f565b905061354481611ec0670de0b6b3a7640000600061443f565b99505050505050505050509695505050505050565b600080613566878661475c565b9050600061358561357f670de0b6b3a76400008461443f565b85614376565b905060006135a48661359f670de0b6b3a76400008561443f565b614376565b905060006135b28b836146a6565b905060006135c0828d61475c565b905060006135ce8287614864565b905060006135dc828d614376565b90506135e8818d61443f565b9e9d5050505050505050505050505050565b655af3107a4000670de0b6b3a7640000610f39565b60008061361c878661475c565b905060006136378561359f670de0b6b3a7640000600061443f565b90506000613645888361443f565b90506000613653828a61475c565b905060006136728261366d670de0b6b3a76400008861475c565b614864565b90506000613680828e614376565b9050600061368e8e8361443f565b905060006136a7611ea2670de0b6b3a76400008a61443f565b9050611ec58261359f670de0b6b3a76400008461443f565b68056bc75e2d6310000081565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610eb75780601f10610e8c57610100808354040283529160200191610eb7565b6704a03ce68d21555681565b6542524f4e5a4560d01b90565b600080613753878761475c565b90506000613761868661475c565b9050600061376f838361475c565b90506000613791670de0b6b3a7640000611ec0670de0b6b3a76400008961443f565b905061379d8282614376565b9a9950505050505050505050565b60006137b8338484614596565b50600192915050565b600d5460408051636c9b2a3f60e11b815232600482015290516001600160a01b0390921691829163d936547e916024808301926020929190829003018186803b15801561380d57600080fd5b505afa158015613821573d6000803e3d6000fd5b505050506040513d602081101561383757600080fd5b50516138745760405162461bcd60e51b815260040180806020018281038252602c815260200180614c89602c913960400191505060405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615613920576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff00191661010017905560085460ff1661397a576040805162461bcd60e51b815260206004820152601160248201527011549497d393d517d19253905312569151607a1b604482015290519081900360640190fd5b6000613984610f23565b90506000613993866000614376565b905060006139a1878361443f565b905060006139af828561475c565b9050806139f5576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b6139ff33896144a1565b600554613a1b906201000090046001600160a01b0316846144bb565b613a24826144af565b60005b600954811015613ba657600060098281548110613a4057fe5b60009182526020808320909101546001600160a01b0316808352600a909152604082206003015490925090613a758583614376565b905080613abb576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b8a8a85818110613ac757fe5b90506020020135811015613b12576040805162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a6020526040902060030154613b38908261443f565b6001600160a01b0384166000818152600a60209081526040918290206003019390935580518481529051919233927fe74c91552b64c2e2e7bd255639e004e693bd3e1d01cc33e65610b86afcc1ffed9281900390910190a3613b9b8333836144c5565b505050600101613a27565b50506005805461ff001916905550505050505050565b600881565b600281565b600181565b600080613bd8878661475c565b90506000613bee670de0b6b3a76400008561443f565b9050613bfa8582614376565b90506000613c0c8a611ec08c856146a6565b90506000613c1a8285614864565b90506000613c30670de0b6b3a76400008361443f565b9050613c3c8a82614376565b9c9b505050505050505050505050565b671bc16d674ec7ffff81565b600081565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2600554610100900460ff1615613d09576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6005805461ff001916610100179055600654336001600160a01b0390911614613d6e576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6001600160a01b0381166000908152600a602052604090205460ff16613dcb576040805162461bcd60e51b815260206004820152600d60248201526c11549497d393d517d093d55391609a1b604482015290519081900360640190fd5b60085460ff1615613e16576040805162461bcd60e51b815260206004820152601060248201526f11549497d254d7d1925390531256915160821b604482015290519081900360640190fd5b6001600160a01b0381166000908152600a602052604081206003015490613e3d8282614376565b600b546001600160a01b0385166000908152600a6020526040902060020154919250613e689161443f565b600b556001600160a01b0383166000908152600a6020526040902060010154600980546000198101919082908110613e9c57fe5b600091825260209091200154600980546001600160a01b039092169184908110613ec257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600a600060098581548110613f0257fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020600101556009805480613f3557fe5b60008281526020808220600019908401810180546001600160a01b031916905590920190925560408051608081018252838152808301848152818301858152606083018681526001600160a01b038c168752600a909552929094209051815460ff19169015151781559251600184015551600283015551600390910155613fc18533611480878761443f565b6005546114a69086906201000090046001600160a01b0316856144c5565b3360009081526001602090815260408083206001600160a01b038616845290915281205461400d90836146a6565b3360008181526001602090815260408083206001600160a01b038916808552908352928190208590558051948552519193600080516020614cb5833981519152929081900390910190a350600192915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a26006546001600160a01b03163314614140576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6001600160a01b0383166000908152600a602052604090205460ff161561419d576040805162461bcd60e51b815260206004820152600c60248201526b11549497d254d7d093d5539160a21b604482015290519081900360640190fd5b60085460ff16156141e8576040805162461bcd60e51b815260206004820152601060248201526f11549497d254d7d1925390531256915160821b604482015290519081900360640190fd5b600954600811614230576040805162461bcd60e51b815260206004820152600e60248201526d4552525f4d41585f544f4b454e5360901b604482015290519081900360640190fd5b6040805160808101825260018082526009805460208085019182526000858701818152606087018281526001600160a01b038c16808452600a9094529782209651875460ff1916901515178755925186860155915160028601559451600390940193909355805491820181559091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319169091179055610a128383836110ac565b6002670de0b6b3a7640000610f39565b6000806142fa858861475c565b90506000614308878661443f565b90506000614316888361475c565b905060006143248285614864565b905061433881670de0b6b3a764000061443f565b905061434c670de0b6b3a76400008761443f565b945061436161435b8c83614376565b8661475c565b9b9a5050505050505050505050565b3b151590565b600082820283158061439057508284828161438d57fe5b04145b6143d4576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b604482015290519081900360640190fd5b6706f05b59d3b20000810181811015614427576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b604482015290519081900360640190fd5b6000670de0b6b3a7640000825b049695505050505050565b600080600061444e8585614972565b915091508015614499576040805162461bcd60e51b81526020600482015260116024820152704552525f5355425f554e444552464c4f5760781b604482015290519081900360640190fd5b509392505050565b6144ab8282614997565b5050565b6144b8816149a2565b50565b6144ab8282614a72565b6000836001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561451e57600080fd5b505af1158015614532573d6000803e3d6000fd5b505050506040513d602081101561454857600080fd5b5051905080614590576040805162461bcd60e51b815260206004820152600f60248201526e4552525f45524332305f46414c534560881b604482015290519081900360640190fd5b50505050565b6001600160a01b0383166000908152602081905260409020548111156145fa576040805162461bcd60e51b815260206004820152601460248201527311549497d25394d551919250d251539517d0905360621b604482015290519081900360640190fd5b6001600160a01b03831660009081526020819052604090205461461d908261443f565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461464c90826146a6565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156146f3576040805162461bcd60e51b815260206004820152601060248201526f4552525f4144445f4f564552464c4f5760801b604482015290519081900360640190fd5b9392505050565b604080516323b872dd60e01b81526001600160a01b0384811660048301523060248301526044820184905291516000928616916323b872dd91606480830192602092919082900301818787803b15801561451e57600080fd5b6144b881614a7d565b60008161479f576040805162461bcd60e51b815260206004820152600c60248201526b4552525f4449565f5a45524f60a01b604482015290519081900360640190fd5b670de0b6b3a764000083028315806147c75750670de0b6b3a76400008482816147c457fe5b04145b61480b576040805162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b604482015290519081900360640190fd5b60028304810181811015614859576040805162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b604482015290519081900360640190fd5b600084828161443457fe5b600060018310156148b4576040805162461bcd60e51b81526020600482015260156024820152744552525f42504f575f424153455f544f4f5f4c4f5760581b604482015290519081900360640190fd5b671bc16d674ec7ffff83111561490a576040805162461bcd60e51b815260206004820152601660248201527508aa4a4be84a09eaebe8482a68abea89e9ebe90928e960531b604482015290519081900360640190fd5b600061491583614af2565b90506000614923848361443f565b905060006149398661493485614b0d565b614b1b565b90508161494a579250610f10915050565b600061495b87846305f5e100614b72565b90506149678282614376565b979650505050505050565b6000808284106149885750508082036000614990565b505081810360015b9250929050565b6144ab823083614596565b306000908152602081905260409020548111156149fd576040805162461bcd60e51b815260206004820152601460248201527311549497d25394d551919250d251539517d0905360621b604482015290519081900360640190fd5b30600090815260208190526040902054614a17908261443f565b30600090815260208190526040902055600254614a34908261443f565b60025560408051828152905160009130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350565b6144ab308383614596565b30600090815260208190526040902054614a9790826146a6565b30600090815260208190526040902055600254614ab490826146a6565b60025560408051828152905130916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350565b6000670de0b6b3a7640000614b0683614b0d565b0292915050565b670de0b6b3a7640000900490565b60008060028306614b3457670de0b6b3a7640000614b36565b835b90506002830492505b82156146f357614b4f8485614376565b93506002830615614b6757614b648185614376565b90505b600283049250614b3f565b6000828180614b8987670de0b6b3a7640000614972565b9092509050670de0b6b3a764000080600060015b888410614c41576000670de0b6b3a764000082029050600080614bd18a614bcc85670de0b6b3a764000061443f565b614972565b91509150614be38761359f848c614376565b9650614bef878461475c565b965086614bfe57505050614c41565b8715614c08579315935b8015614c12579315935b8415614c2957614c22868861443f565b9550614c36565b614c3386886146a6565b95505b505050600101614b9d565b5090999850505050505050505056fe464358416363657373436f6e74726f6c3a2073656e64657220646f65736e277420686176652073616d6520726f6c657320617320706f6f6c464358416363657373436f6e74726f6c3a2073656e646572206973206e6f7420696e2077686974656c6973748c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122057e0ea5b7b5f994c1b06e06e221ffad11e661e5b00214d23e1e4ae63d096e96964736f6c634300060c00335570677261646561626c6550726f78793a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374416363657373436f6e74726f6c3a2073656e646572206d7573742062652061646d696e20746f2068617665207065726d697373696f6e416363657373436f6e74726f6c3a2073656e646572206d7573742062652061646d696e206f66206e65772061636365737320636f6e74726f6ca26469706673582212209e7d2ebedf9dc8d908483209602c2c7ef8a07fafffe6d951b49b031408b85e0564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6155,
        "contract": "contracts/core/BFactory.sol:BFactory",
        "label": "_isBPool",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6157,
        "contract": "contracts/core/BFactory.sol:BFactory",
        "label": "_accessAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6159,
        "contract": "contracts/core/BFactory.sol:BFactory",
        "label": "_logic",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6262,
        "contract": "contracts/core/BFactory.sol:BFactory",
        "label": "_blabs",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}