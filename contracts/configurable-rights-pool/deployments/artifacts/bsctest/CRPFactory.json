{
  "address": "0x3a22C1079fc4F6E2b784D4A182d0E63dedC3213D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "logic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "LogNewCrp",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAccessControlAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isCrp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeCap",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeProtocolFee",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        }
      ],
      "name": "newCrp",
      "outputs": [
        {
          "internalType": "contract ConfigurableRightsPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessAddress",
          "type": "address"
        }
      ],
      "name": "setAccessControlAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff09990bf0cb0e1624672e89088a567e45872a78f6a9e94188ac7942a12acfd6",
  "receipt": {
    "to": null,
    "from": "0xf29162ed5Ed4Da23656C5190aae71e61Bb074AeC",
    "contractAddress": "0x3a22C1079fc4F6E2b784D4A182d0E63dedC3213D",
    "transactionIndex": 6,
    "gasUsed": "5347968",
    "logsBloom": "0x
    "blockHash": "0xff008f2a3ab87d41973446767f82cfab5bec00263ebb506c3af382b2fa58cb4c",
    "transactionHash": "0xff09990bf0cb0e1624672e89088a567e45872a78f6a9e94188ac7942a12acfd6",
    "logs": [],
    "blockNumber": 14956319,
    "cumulativeGasUsed": "5746422",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
    "0x5174dC75aEf03792b255398438C14ca8e0B0bb29"
  ],
  "solcInputHash": "cf8c495b5decfdc177649d0e4b03bed8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogNewCrp\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAccessControlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isCrp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeProtocolFee\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"}],\"name\":\"newCrp\",\"outputs\":[{\"internalType\":\"contract ConfigurableRightsPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessAddress\",\"type\":\"address\"}],\"name\":\"setAccessControlAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Balancer Labs\",\"details\":\"Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)\",\"kind\":\"dev\",\"methods\":{\"isCrp(address)\":{\"params\":{\"addr\":\"- address to check\"},\"returns\":{\"_0\":\"boolean indicating whether it is a CRP\"}},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256),(bool,bool,bool,bool,bool,bool,bool))\":{\"details\":\"emits a LogNewCRP event\",\"params\":{\"factoryAddress\":\"- the BFactory instance used to create the underlying pool\",\"poolParams\":\"- struct containing the names, tokens, weights, balances, and swap fee\",\"rights\":\"- struct of permissions, configuring this CRP instance (see above for definitions)\"}}},\"title\":\"Configurable Rights Pool Factory - create parameterized smart pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isCrp(address)\":{\"notice\":\"Check to see if a given address is a CRP\"},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256),(bool,bool,bool,bool,bool,bool,bool))\":{\"notice\":\"Create a new CRP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CRPFactory.sol\":\"CRPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/CRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"./ConfigurableRightsPool.sol\\\";\\nimport \\\"./IFCXAccessControl.sol\\\";\\n\\n// Contracts\\n\\n/**\\n * @author Balancer Labs\\n * @title Configurable Rights Pool Factory - create parameterized smart pools\\n * @dev Rights are held in a corresponding struct in ConfigurableRightsPool\\n *      Index values are as follows:\\n *      0: canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                            by default, it is off on initialization and can only be turned on\\n *      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      2: canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      4: canWhitelistLPs - if set, only whitelisted addresses can join pools\\n *                           (enables private pools with more than one LP)\\n *      5: canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\n\\ncontract CRPFactory {\\n    // State variables\\n    // Keep a list of all Configurable Rights Pools\\n    mapping(address => bool) private _isCrp;\\n\\n    address private _accessAddress;\\n    address private _logic;\\n\\n    constructor(address accessAddress, address logic) public {\\n        _accessAddress = accessAddress;\\n        _logic = logic;\\n    }\\n\\n    // Event declarations\\n\\n    // Log the address of each new smart pool, and its creator\\n    event LogNewCrp(address indexed caller, address indexed pool);\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Create a new CRP\\n     * @dev emits a LogNewCRP event\\n     * @param factoryAddress - the BFactory instance used to create the underlying pool\\n     * @param poolParams - struct containing the names, tokens, weights, balances, and swap fee\\n     * @param rights - struct of permissions, configuring this CRP instance (see above for definitions)\\n\\n     */\\n    function newCrp(\\n        address factoryAddress,\\n        ConfigurableRightsPool.PoolParams calldata poolParams,\\n        RightsManager.Rights calldata rights\\n    ) external returns (ConfigurableRightsPool) {\\n        require(\\n            IFCXAccessControl(_accessAddress).hasRole(keccak256(\\\"ADMIN_ROLE\\\"), tx.origin),\\n            \\\"AccessControl: sender must be admin to have permission\\\"\\n        );\\n        require(poolParams.constituentTokens.length >= BalancerConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n\\n        // Arrays must be parallel\\n        require(poolParams.tokenBalances.length == poolParams.constituentTokens.length, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(poolParams.tokenWeights.length == poolParams.constituentTokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        ConfigurableRightsPool crp = new ConfigurableRightsPool(factoryAddress, _logic, poolParams, rights);\\n\\n        emit LogNewCrp(msg.sender, address(crp));\\n\\n        _isCrp[address(crp)] = true;\\n        // The caller is the controller of the CRP\\n        // The CRP will be the controller of the underlying Core BPool\\n        crp.setController(msg.sender);\\n\\n        return crp;\\n    }\\n\\n    /**\\n     * @notice Check to see if a given address is a CRP\\n     * @param addr - address to check\\n     * @return boolean indicating whether it is a CRP\\n     */\\n    function isCrp(address addr) external view returns (bool) {\\n        return _isCrp[addr];\\n    }\\n\\n    function getAccessControlAddress() external view returns (address) {\\n        return _accessAddress;\\n    }\\n\\n    function setAccessControlAddress(address accessAddress) external {\\n        require(\\n            IFCXAccessControl(_accessAddress).hasRole(keccak256(\\\"ADMIN_ROLE\\\"), tx.origin),\\n            \\\"AccessControl: sender must be admin to have permission\\\"\\n        );\\n        require(accessAddress != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n\\n        require(\\n            IFCXAccessControl(accessAddress).hasRole(keccak256(\\\"ADMIN_ROLE\\\"), tx.origin),\\n            \\\"AccessControl: sender must be admin of new access control\\\"\\n        );\\n        _accessAddress = accessAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x86d35d47aa26a3fb5e8c1ac3660f69bef932ec06ce9cf7d27f2a17aa2694c035\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./IBFactory.sol\\\";\\nimport \\\"./PCToken.sol\\\";\\nimport \\\"./utils/BalancerReentrancyGuard.sol\\\";\\nimport \\\"./utils/BalancerOwnable.sol\\\";\\nimport \\\"./IFCXAccessControl.sol\\\";\\n\\n// Interfaces\\n\\n// Libraries\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../libraries/SafeApprove.sol\\\";\\n\\n// Contracts\\n\\n/**\\n * @author Balancer Labs\\n * @title Smart Pool with customizable features\\n * @notice PCToken is the \\\"Balancer Smart Pool\\\" token (transferred upon finalization)\\n * @dev Rights are defined as follows (index values into the array)\\n *      0: canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                            by default, it is off on initialization and can only be turned on\\n *      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      2: canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      4: canWhitelistLPs - can restrict LPs to a whitelist\\n *      5: canChangeCap - can change the BSP cap (max # of pool tokens)\\n *\\n * Note that functions called on bPool and bFactory may look like internal calls,\\n *   but since they are contracts accessed through an interface, they are really external.\\n * To make this explicit, we could write \\\"IBPool(address(bPool)).function()\\\" everywhere,\\n *   instead of \\\"bPool.function()\\\".\\n */\\ncontract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyGuard {\\n    using BalancerSafeMath for uint256;\\n    using SafeApprove for IERC20;\\n\\n    // Type declarations\\n\\n    struct PoolParams {\\n        // Balancer Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint256[] tokenBalances;\\n        uint256[] tokenWeights;\\n        uint256 swapFee;\\n        uint256 protocolFee;\\n    }\\n\\n    // State variables\\n\\n    IBFactory public bFactory;\\n    IBPool public bPool;\\n\\n    // Struct holding the rights configuration\\n    RightsManager.Rights public rights;\\n\\n    // Hold the parameters used in updateWeightsGradually\\n    SmartPoolManager.GradualUpdateParams public gradualUpdate;\\n\\n    // This is for adding a new (currently unbound) token to the pool\\n    // It's a two-step process: commitAddToken(), then applyAddToken()\\n    SmartPoolManager.NewTokenParams public newToken;\\n\\n    // Fee is initialized on creation, and can be changed if permission is set\\n    // Only needed for temporary storage between construction and createPool\\n    // Thereafter, the swap fee should always be read from the underlying pool\\n    uint256 private _initialSwapFee;\\n\\n    uint256 private _initialProtocolFee;\\n\\n    address private _initialAccessAddress;\\n\\n    // Store the list of tokens in the pool, and balances\\n    // NOTE that the token list is *only* used to store the pool tokens between\\n    //   construction and createPool - thereafter, use the underlying BPool's list\\n    //   (avoids synchronization issues)\\n    address[] private _initialTokens;\\n    uint256[] private _initialBalances;\\n\\n    // Enforce a minimum time between the start and end blocks\\n    uint256 public minimumWeightChangeBlockPeriod;\\n    // Enforce a mandatory wait time between updates\\n    // This is also the wait time between committing and applying a new token\\n    uint256 public addTokenTimeLockInBlocks;\\n\\n    // Whitelist of LPs (if configured)\\n    mapping(address => bool) private _liquidityProviderWhitelist;\\n\\n    // Cap on the pool size (i.e., # of tokens minted when joining)\\n    // Limits the risk of experimental pools; failsafe/backup for fixed-size pools\\n    uint256 public bspCap;\\n\\n    // Event declarations\\n\\n    // Anonymous logger event - can only be filtered by contract address\\n\\n    event LogCall(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    event LogJoin(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LogExit(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event CapChanged(address indexed caller, uint256 oldCap, uint256 newCap);\\n\\n    event NewTokenCommitted(address indexed token, address indexed pool, address indexed caller);\\n\\n    // Modifiers\\n\\n    modifier onlyWhitelist() {\\n        require(\\n            IFCXAccessControl(_initialAccessAddress).whitelisted(tx.origin),\\n            \\\"FCXAccessControl: sender is not in whitelist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier logs() {\\n        emit LogCall(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    // Mark functions that require delegation to the underlying Pool\\n    modifier needsBPool() {\\n        require(address(bPool) != address(0), \\\"ERR_NOT_CREATED\\\");\\n        _;\\n    }\\n\\n    modifier lockUnderlyingPool() {\\n        // Turn off swapping on the underlying pool during joins\\n        // Otherwise tokens with callbacks would enable attacks involving simultaneous swaps and joins\\n        bool origSwapState = bPool.isPublicSwap();\\n        bPool.setPublicSwap(false);\\n        _;\\n        bPool.setPublicSwap(origSwapState);\\n    }\\n\\n    // Default values for these variables (used only in updateWeightsGradually), set in the constructor\\n    // Pools without permission to update weights cannot use them anyway, and should call\\n    //   the default createPool() function.\\n    // To override these defaults, pass them into the overloaded createPool()\\n    // Period is in blocks; 500 blocks ~ 2 hours; 90,000 blocks ~ 2 weeks\\n    uint256 public constant DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD = 90000;\\n    uint256 public constant DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS = 500;\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Construct a new Configurable Rights Pool (wrapper around BPool)\\n     * @dev _initialTokens and _swapFee are only used for temporary storage between construction\\n     *      and create pool, and should not be used thereafter! _initialTokens is destroyed in\\n     *      createPool to prevent this, and _swapFee is kept in sync (defensively), but\\n     *      should never be used except in this constructor and createPool()\\n     * @param factoryAddress - the BPoolFactory used to create the underlying pool\\n     * @param poolParams - struct containing pool parameters\\n     * @param rightsStruct - Set of permissions we are assigning to this smart pool\\n     */\\n    constructor(\\n        address factoryAddress,\\n        address logic,\\n        PoolParams memory poolParams,\\n        RightsManager.Rights memory rightsStruct\\n    ) public PCToken(poolParams.poolTokenSymbol, poolParams.poolTokenName) {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(poolParams.swapFee >= BalancerConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(poolParams.swapFee <= BalancerConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n\\n        require(poolParams.protocolFee <= BalancerConstants.MAX_FEE, \\\"ERR_INVALID_PROTOCOL_FEE\\\");\\n        // Arrays must be parallel\\n        require(poolParams.tokenBalances.length == poolParams.constituentTokens.length, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(poolParams.tokenWeights.length == poolParams.constituentTokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(poolParams.constituentTokens.length >= BalancerConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(poolParams.constituentTokens.length <= BalancerConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n\\n        SmartPoolManager.verifyTokenCompliance(poolParams.constituentTokens);\\n\\n        bFactory = IBFactory(factoryAddress);\\n        rights = rightsStruct;\\n        _initialTokens = poolParams.constituentTokens;\\n        _initialBalances = poolParams.tokenBalances;\\n        _initialSwapFee = poolParams.swapFee;\\n        _initialProtocolFee = poolParams.protocolFee;\\n        _initialAccessAddress = bFactory.getAccessControlAddress();\\n\\n        // These default block time parameters can be overridden in createPool\\n        minimumWeightChangeBlockPeriod = DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD;\\n        addTokenTimeLockInBlocks = DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS;\\n\\n        gradualUpdate.startWeights = poolParams.tokenWeights;\\n        // Initializing (unnecessarily) for documentation - 0 means no gradual weight change has been initiated\\n        gradualUpdate.startBlock = 0;\\n        // By default, there is no cap (unlimited pool token minting)\\n        bspCap = BalancerConstants.MAX_UINT;\\n\\n        // extension\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(logic);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @notice Set the cap (max # of pool tokens)\\n     * @dev _bspCap defaults in the constructor to unlimited\\n     *      Can set to 0 (or anywhere below the current supply), to halt new investment\\n     *      Prevent setting it before creating a pool, since createPool sets to intialSupply\\n     *      (it does this to avoid an unlimited cap window between construction and createPool)\\n     *      Therefore setting it before then has no effect, so should not be allowed\\n     * @param newCap - new value of the cap\\n     */\\n    function setCap(uint256 newCap) external logs lock needsBPool onlyOwner {\\n        require(rights.canChangeCap, \\\"ERR_CANNOT_CHANGE_CAP\\\");\\n\\n        emit CapChanged(msg.sender, bspCap, newCap);\\n\\n        bspCap = newCap;\\n    }\\n\\n    /**\\n     * @notice Create a new Smart Pool - and set the block period time parameters\\n     * @dev Initialize the swap fee to the value provided in the CRP constructor\\n     *      Can be changed if the canChangeSwapFee permission is enabled\\n     *      Time parameters will be fixed at these values\\n     *\\n     *      If this contract doesn't have canChangeWeights permission - or you want to use the default\\n     *      values, the block time arguments are not needed, and you can just call the single-argument\\n     *      createPool()\\n     * @param initialSupply - Starting token balance\\n     * @param minimumWeightChangeBlockPeriodParam - Enforce a minimum time between the start and end blocks\\n     * @param addTokenTimeLockInBlocksParam - Enforce a mandatory wait time between updates\\n     *                                   This is also the wait time between committing and applying a new token\\n     */\\n    function createPool(\\n        uint256 initialSupply,\\n        uint256 minimumWeightChangeBlockPeriodParam,\\n        uint256 addTokenTimeLockInBlocksParam\\n    ) external virtual onlyOwner logs lock {\\n        require(\\n            minimumWeightChangeBlockPeriodParam >= addTokenTimeLockInBlocksParam,\\n            \\\"ERR_INCONSISTENT_TOKEN_TIME_LOCK\\\"\\n        );\\n\\n        minimumWeightChangeBlockPeriod = minimumWeightChangeBlockPeriodParam;\\n        addTokenTimeLockInBlocks = addTokenTimeLockInBlocksParam;\\n\\n        createPoolInternal(initialSupply);\\n    }\\n\\n    /**\\n     * @notice Create a new Smart Pool\\n     * @dev Delegates to internal function\\n     * @param initialSupply starting token balance\\n     */\\n    function createPool(uint256 initialSupply) external virtual onlyOwner logs lock {\\n        createPoolInternal(initialSupply);\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Notice Balance is not an input (like with rebind on BPool) since we will require prices not to change\\n     *      This is achieved by forcing balances to change proportionally to weights, so that prices don't change\\n     *      If prices could be changed, this would allow the controller to drain the pool by arbing price changes\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n     */\\n    function updateWeight(address token, uint256 newWeight) external virtual logs lock onlyOwner needsBPool {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n\\n        // We don't want people to set weights manually if there's a block-based update in progress\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.updateWeight(IConfigurableRightsPool(address(this)), bPool, token, newWeight);\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external calls to pokeWeights\\n     * @dev Must call pokeWeights at least once past the end for it to do the final update\\n     *      and enable calling this again.\\n     *      It is possible to call updateWeightsGradually during an update in some use cases\\n     *      For instance, setting newWeights to currentWeights to stop the update where it is\\n     * @param newWeights - final weights we want to get to. Note that the ORDER (and number) of\\n     *                     tokens can change if you have added or removed tokens from the pool\\n     *                     It ensures the counts are correct, but can't help you with the order!\\n     *                     You can get the underlying BPool (it's public), and call\\n     *                     getCurrentTokens() to see the current ordering, if you're not sure\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n     */\\n    function updateWeightsGradually(\\n        uint256[] calldata newWeights,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    ) external virtual logs lock onlyOwner needsBPool {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        // Don't start this when we're in the middle of adding a new token\\n        require(!newToken.isCommitted, \\\"ERR_PENDING_TOKEN_ADD\\\");\\n\\n        // Library computes the startBlock, computes startWeights as the current\\n        // denormalized weights of the core pool tokens.\\n        SmartPoolManager.updateWeightsGradually(\\n            bPool,\\n            gradualUpdate,\\n            newWeights,\\n            startBlock,\\n            endBlock,\\n            minimumWeightChangeBlockPeriod\\n        );\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @dev Still works if we poke after the end of the period; also works if the weights don't change\\n     *      Resets if we are poking beyond the end, so that we can do it again\\n     */\\n    function pokeWeights() external virtual logs lock needsBPool {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.pokeWeights(bPool, gradualUpdate);\\n    }\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     *\\n     * @dev The purpose of this two-stage commit is to give warning of a potentially dangerous\\n     *      operation. A malicious pool operator could add a large amount of a low-value token,\\n     *      then drain the pool through price manipulation. Of course, there are many\\n     *      legitimate purposes, such as adding additional collateral tokens.\\n     *\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     */\\n    function commitAddToken(\\n        address token,\\n        uint256 balance,\\n        uint256 denormalizedWeight\\n    ) external virtual logs lock onlyOwner needsBPool {\\n        require(rights.canAddRemoveTokens, \\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n\\n        // Can't do this while a progressive update is happening\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        SmartPoolManager.verifyTokenCompliance(token);\\n\\n        emit NewTokenCommitted(token, address(this), msg.sender);\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.commitAddToken(bPool, token, balance, denormalizedWeight, newToken);\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     */\\n    function applyAddToken() external virtual logs lock onlyOwner needsBPool {\\n        require(rights.canAddRemoveTokens, \\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.applyAddToken(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            addTokenTimeLockInBlocks,\\n            newToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove a token from the pool\\n     * @dev bPool is a contract interface; function calls on it are external\\n     * @param token - token to remove\\n     */\\n    function removeToken(address token) external logs lock onlyOwner needsBPool {\\n        // It's possible to have remove rights without having add rights\\n        require(rights.canAddRemoveTokens, \\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n        // After createPool, token list is maintained in the underlying BPool\\n        require(!newToken.isCommitted, \\\"ERR_REMOVE_WITH_ADD_PENDING\\\");\\n        // Prevent removing during an update (or token lists can get out of sync)\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.removeToken(IConfigurableRightsPool(address(this)), bPool, token);\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @dev Emits a LogJoin event (for each token)\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     */\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn)\\n        external\\n        onlyWhitelist\\n        logs\\n        lock\\n        needsBPool\\n        lockUnderlyingPool\\n    {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender] || _liquidityProviderWhitelist[tx.origin], \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n\\n        // Library computes actualAmountsIn, and does many validations\\n        // Cannot call the push/pull/min from an external library for\\n        // any of these pool functions. Since msg.sender can be anybody,\\n        // they must be internal\\n        uint256[] memory actualAmountsIn = SmartPoolManager.joinPool(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            poolAmountOut,\\n            maxAmountsIn\\n        );\\n\\n        // After createPool, token list is maintained in the underlying BPool\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n\\n        for (uint256 i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint256 tokenAmountIn = actualAmountsIn[i];\\n\\n            emit LogJoin(msg.sender, t, tokenAmountIn);\\n\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @dev Emits a LogExit event for each token\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     */\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        onlyWhitelist\\n        logs\\n        lock\\n        needsBPool\\n        lockUnderlyingPool\\n    {\\n        // Delegate to library to save space\\n\\n        // Library computes actualAmountsOut, and does many validations\\n        // Also computes the exitFee and pAiAfterExitFee\\n        (uint256 exitFee, uint256 pAiAfterExitFee, uint256[] memory actualAmountsOut) = SmartPoolManager.exitPool(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            poolAmountIn,\\n            minAmountsOut\\n        );\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        // After createPool, token list is maintained in the underlying BPool\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n\\n        for (uint256 i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint256 tokenAmountOut = actualAmountsOut[i];\\n\\n            emit LogExit(msg.sender, t, tokenAmountOut);\\n\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @dev emits a LogJoin event\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external onlyWhitelist logs lock needsBPool returns (uint256 poolAmountOut) {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender] || _liquidityProviderWhitelist[tx.origin], \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n        poolAmountOut = SmartPoolManager.joinswapExternAmountIn(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            tokenIn,\\n            tokenAmountIn,\\n            minPoolAmountOut\\n        );\\n\\n        emit LogJoin(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @dev emits a LogJoin event\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external onlyWhitelist logs lock needsBPool returns (uint256 tokenAmountIn) {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender] || _liquidityProviderWhitelist[tx.origin], \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n        tokenAmountIn = SmartPoolManager.joinswapPoolAmountOut(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            tokenIn,\\n            poolAmountOut,\\n            maxAmountIn\\n        );\\n\\n        emit LogJoin(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @dev Emits a LogExit event for the token\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external onlyWhitelist logs lock needsBPool returns (uint256 tokenAmountOut) {\\n        // Delegate to library to save space\\n\\n        // Calculates final amountOut, and the fee and final amount in\\n        (uint256 exitFee, uint256 amountOut) = SmartPoolManager.exitswapPoolAmountIn(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            tokenOut,\\n            poolAmountIn,\\n            minAmountOut\\n        );\\n\\n        tokenAmountOut = amountOut;\\n        uint256 pAiAfterExitFee = BalancerSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        emit LogExit(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(pAiAfterExitFee);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @dev Emits a LogExit event for the token\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external onlyWhitelist logs lock needsBPool returns (uint256 poolAmountIn) {\\n        // Delegate to library to save space\\n\\n        // Calculates final amounts in, accounting for the exit fee\\n        (uint256 exitFee, uint256 amountIn) = SmartPoolManager.exitswapExternAmountOut(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            tokenOut,\\n            tokenAmountOut,\\n            maxPoolAmountIn\\n        );\\n\\n        poolAmountIn = amountIn;\\n        uint256 pAiAfterExitFee = BalancerSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        emit LogExit(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(pAiAfterExitFee);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    /**\\n     * @notice Getter for specific permissions\\n     * @dev value of the enum is just the 0-based index in the enumeration\\n     *      For instance canPauseSwapping is 0; canChangeWeights is 2\\n     * @return token boolean true if we have the given permission\\n     */\\n    function hasPermission(RightsManager.Permissions permission) external view virtual returns (bool) {\\n        return RightsManager.hasPermission(rights, permission);\\n    }\\n\\n    /**\\n     * @notice Getter for the RightsManager contract\\n     * @dev Convenience function to get the address of the RightsManager library (so clients can check version)\\n     * @return address of the RightsManager library\\n     */\\n    function getRightsManagerVersion() external pure returns (address) {\\n        return address(RightsManager);\\n    }\\n\\n    /**\\n     * @notice Getter for the BalancerSafeMath contract\\n     * @dev Convenience function to get the address of the BalancerSafeMath library (so clients can check version)\\n     * @return address of the BalancerSafeMath library\\n     */\\n    function getBalancerSafeMathVersion() external pure returns (address) {\\n        return address(BalancerSafeMath);\\n    }\\n\\n    /**\\n     * @notice Getter for the SmartPoolManager contract\\n     * @dev Convenience function to get the address of the SmartPoolManager library (so clients can check version)\\n     * @return address of the SmartPoolManager library\\n     */\\n    function getSmartPoolManagerVersion() external pure returns (address) {\\n        return address(SmartPoolManager);\\n    }\\n\\n    // Public functions\\n\\n    // \\\"Public\\\" versions that can safely be called from SmartPoolManager\\n    // Allows only the contract itself to call them (not the controller or any external account)\\n\\n    function mintPoolShareFromLib(uint256 amount) public {\\n        require(msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _mint(amount);\\n    }\\n\\n    function pushPoolShareFromLib(address to, uint256 amount) public {\\n        require(msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _push(to, amount);\\n    }\\n\\n    function pullPoolShareFromLib(address from, uint256 amount) public {\\n        require(msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _pull(from, amount);\\n    }\\n\\n    function burnPoolShareFromLib(uint256 amount) public {\\n        require(msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _burn(amount);\\n    }\\n\\n    // Internal functions\\n\\n    // Lint wants the function to have a leading underscore too\\n    /* solhint-disable private-vars-leading-underscore */\\n\\n    /**\\n     * @notice Create a new Smart Pool\\n     * @dev Initialize the swap fee to the value provided in the CRP constructor\\n     *      Can be changed if the canChangeSwapFee permission is enabled\\n     * @param initialSupply starting token balance\\n     */\\n    function createPoolInternal(uint256 initialSupply) internal {\\n        require(address(bPool) == address(0), \\\"ERR_IS_CREATED\\\");\\n        require(initialSupply >= BalancerConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= BalancerConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n\\n        // If the controller can change the cap, initialize it to the initial supply\\n        // Defensive programming, so that there is no gap between creating the pool\\n        // (initialized to unlimited in the constructor), and setting the cap,\\n        // which they will presumably do if they have this right.\\n        if (rights.canChangeCap) {\\n            bspCap = initialSupply;\\n        }\\n\\n        // There is technically reentrancy here, since we're making external calls and\\n        // then transferring tokens. However, the external calls are all to the underlying BPool\\n\\n        // To the extent possible, modify state variables before calling functions\\n        _mintPoolShare(initialSupply);\\n        _pushPoolShare(msg.sender, initialSupply);\\n\\n        // Deploy new BPool (bFactory and bPool are interfaces; all calls are external)\\n        bPool = bFactory.newBPool();\\n\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        require(BalancerConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n\\n        for (uint256 i = 0; i < _initialTokens.length; i++) {\\n            address t = _initialTokens[i];\\n            uint256 bal = _initialBalances[i];\\n            uint256 denorm = gradualUpdate.startWeights[i];\\n\\n            bool returnValue = IERC20(t).transferFrom(msg.sender, address(this), bal);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n            returnValue = IERC20(t).safeApprove(address(bPool), BalancerConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n            bPool.bind(t, bal, denorm);\\n        }\\n\\n        while (_initialTokens.length > 0) {\\n            // Modifying state variable after external calls here,\\n            // but not essential, so not dangerous\\n            _initialTokens.pop();\\n        }\\n\\n        // Set fee to the initial value set in the constructor\\n        // Hereafter, read the swapFee from the underlying pool, not the local state variable\\n        bPool.setSwapFee(_initialSwapFee);\\n        bPool.setPublicSwap(true);\\n        bPool.setProtocolFee(_initialProtocolFee);\\n        bPool.setAccessControlAddress(_initialAccessAddress);\\n\\n        // \\\"destroy\\\" the temporary swap fee (like _initialTokens above) in case a subclass tries to use it\\n        _initialSwapFee = 0;\\n        _initialProtocolFee = 0;\\n    }\\n\\n    /* solhint-enable private-vars-leading-underscore */\\n\\n    // Rebind BPool and pull tokens from address\\n    // bPool is a contract interface; function calls on it are external\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal needsBPool {\\n        // Gets current Balance of token i, Bi, and weight of token i, Wi, from BPool.\\n        uint256 tokenBalance = bPool.getBalance(erc20);\\n        uint256 tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, BalancerSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    // Rebind BPool and push tokens to address\\n    // bPool is a contract interface; function calls on it are external\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal needsBPool {\\n        // Gets current Balance of token i, Bi, and weight of token i, Wi, from BPool.\\n        uint256 tokenBalance = bPool.getBalance(erc20);\\n        uint256 tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, BalancerSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    // Wrappers around corresponding core functions\\n\\n    //\\n    function _mint(uint256 amount) internal override {\\n        super._mint(amount);\\n        require(varTotalSupply <= bspCap, \\\"ERR_CAP_LIMIT_REACHED\\\");\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc11eac08ed49710cd2b78f6cbb13842220acd7a754a7f3cb0ae59c3635c30fce\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setProtocolFee(uint256 protocolFee) external;\\n\\n    function setRoles(bytes32[] memory roles) external;\\n\\n    function setAccessControlAddress(address accessAddress) external;\\n\\n    function setPublicSwap(bool publicSwap) external;\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function gulp(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint256);\\n\\n    function getSwapFee() external view returns (uint256);\\n\\n    function getProtocolFee() external view returns (uint256);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint256);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXIT_FEE() external view returns (uint256);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountIn);\\n\\n    function isFinalized() external view returns (bool);\\n\\n    function getNumTokens() external view returns (uint256);\\n\\n    function getCurrentTokens() external view returns (address[] memory);\\n\\n    function getFinalTokens() external view returns (address[] memory);\\n\\n    function getNormalizedWeight(address) external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function getAccessControlAddress() external view returns (address);\\n\\n    function getRoles() external view returns (bytes32[] memory);\\n\\n    function setController(address) external;\\n\\n    function getSpotPrice(address, address) external view returns (uint256);\\n\\n    function getSpotPriceSansFee(address, address) external view returns (uint256);\\n\\n    function finalize() external;\\n\\n    // BPool function\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    function joinPool(uint256, uint256[] calldata) external;\\n\\n    function swapExactAmountIn(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    function exitPool(uint256, uint256[] calldata) external;\\n\\n    function joinswapExternAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountIn);\\n\\n    // ERC20\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n\\n    function increaseApproval(address, uint256) external returns (bool);\\n\\n    function decreaseApproval(address, uint256) external returns (bool);\\n}\\n\\ninterface IBFactory {\\n    function newBPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getAccessControlAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8008bf5575ad8eb14ea4f198462999fd47ea09d756436dba1e3d3491eece8f4d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IFCXAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IFCXAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function whitelisted(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x47610c2e0ef91f54b8ecc8366da9f43600f4e5067c9ac107ee0e0e570cfbd505\",\"license\":\"GPL-3.0-or-later\"},\"contracts/PCToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../libraries/BalancerSafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Contracts\\n\\n/* solhint-disable func-order */\\n\\n/**\\n * @author Balancer Labs\\n * @title Highly opinionated token implementation\\n */\\ncontract PCToken is IERC20 {\\n    using BalancerSafeMath for uint256;\\n\\n    // State variables\\n    string public constant NAME = \\\"Balancer Smart Pool\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    // No leading underscore per naming convention (non-private)\\n    // Cannot call totalSupply (name conflict)\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    uint256 internal varTotalSupply;\\n\\n    mapping(address => uint256) private _balance;\\n    mapping(address => mapping(address => uint256)) private _allowance;\\n\\n    string private _symbol;\\n    string private _name;\\n\\n    // Event declarations\\n\\n    // See definitions above; must be redeclared to be emitted from this contract\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Base token constructor\\n     * @param tokenSymbol - the token symbol\\n     */\\n    constructor(string memory tokenSymbol, string memory tokenName) public {\\n        _symbol = tokenSymbol;\\n        _name = tokenName;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Getter for allowance: amount spender will be allowed to spend on behalf of owner\\n     * @param owner - owner of the tokens\\n     * @param spender - entity allowed to spend the tokens\\n     * @return uint - remaining amount spender is allowed to transfer\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Getter for current account balance\\n     * @param account - address we're checking the balance of\\n     * @return uint - token balance in the account\\n     */\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balance[account];\\n    }\\n\\n    /**\\n     * @notice Approve owner (sender) to spend a certain amount\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        /* In addition to the increase/decreaseApproval functions, could\\n           avoid the \\\"approval race condition\\\" by only allowing calls to approve\\n           when the current approval amount is 0\\n        \\n           require(_allowance[msg.sender][spender] == 0, \\\"ERR_RACE_CONDITION\\\");\\n\\n           Some token contracts (e.g., KNC), already revert if you call approve \\n           on a non-zero allocation. To deal with these, we use the SafeApprove library\\n           and safeApprove function when adding tokens to the pool.\\n        */\\n\\n        _allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function increaseApproval(address spender, uint256 amount) external returns (bool) {\\n        _allowance[msg.sender][spender] = BalancerSafeMath.badd(_allowance[msg.sender][spender], amount);\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @dev If you try to decrease it below the current limit, it's just set to zero (not an error)\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function decreaseApproval(address spender, uint256 amount) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][spender];\\n        // Gas optimization - if amount == oldValue (or is larger), set to zero immediately\\n        if (amount >= oldValue) {\\n            _allowance[msg.sender][spender] = 0;\\n        } else {\\n            _allowance[msg.sender][spender] = BalancerSafeMath.bsub(oldValue, amount);\\n        }\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender (caller) to recipient\\n     * @dev _move emits a Transfer event if successful\\n     * @param recipient - entity receiving the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        _move(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender to recipient\\n     * @dev _move emits a Transfer event if successful; may also emit an Approval event\\n     * @param sender - entity sending the tokens (must be caller or allowed to spend on behalf of caller)\\n     * @param recipient - recipient of the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n        require(msg.sender == sender || amount <= _allowance[sender][msg.sender], \\\"ERR_PCTOKEN_BAD_CALLER\\\");\\n\\n        _move(sender, recipient, amount);\\n\\n        // memoize for gas optimization\\n        uint256 oldAllowance = _allowance[sender][msg.sender];\\n\\n        // If the sender is not the caller, adjust the allowance by the amount transferred\\n        if (msg.sender != sender && oldAllowance != uint256(-1)) {\\n            _allowance[sender][msg.sender] = BalancerSafeMath.bsub(oldAllowance, amount);\\n\\n            emit Approval(msg.sender, recipient, _allowance[sender][msg.sender]);\\n        }\\n\\n        return true;\\n    }\\n\\n    // public functions\\n\\n    /**\\n     * @notice Getter for the total supply\\n     * @dev declared external for gas optimization\\n     * @return uint - total number of tokens in existence\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return varTotalSupply;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     *      We allow the user to set this name (as well as the symbol).\\n     *      Alternatives are 1) A fixed string (original design)\\n     *                       2) A fixed string plus the user-defined symbol\\n     *                          return string(abi.encodePacked(NAME, \\\"-\\\", _symbol));\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    // internal functions\\n\\n    // Mint an amount of new tokens, and add them to the balance (and total supply)\\n    // Emit a transfer amount from the null address to this contract\\n    function _mint(uint256 amount) internal virtual {\\n        _balance[address(this)] = BalancerSafeMath.badd(_balance[address(this)], amount);\\n        varTotalSupply = BalancerSafeMath.badd(varTotalSupply, amount);\\n\\n        emit Transfer(address(0), address(this), amount);\\n    }\\n\\n    // Burn an amount of new tokens, and subtract them from the balance (and total supply)\\n    // Emit a transfer amount from this contract to the null address\\n    function _burn(uint256 amount) internal virtual {\\n        // Can't burn more than we have\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[address(this)] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[address(this)] = BalancerSafeMath.bsub(_balance[address(this)], amount);\\n        varTotalSupply = BalancerSafeMath.bsub(varTotalSupply, amount);\\n\\n        emit Transfer(address(this), address(0), amount);\\n    }\\n\\n    // Transfer tokens from sender to recipient\\n    // Adjust balances, and emit a Transfer event\\n    function _move(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        // Can't send more than sender has\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[sender] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[sender] = BalancerSafeMath.bsub(_balance[sender], amount);\\n        _balance[recipient] = BalancerSafeMath.badd(_balance[recipient], amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // Transfer from this contract to recipient\\n    // Emits a transfer event if successful\\n    function _push(address recipient, uint256 amount) internal {\\n        _move(address(this), recipient, amount);\\n    }\\n\\n    // Transfer from recipient to this contract\\n    // Emits a transfer event if successful\\n    function _pull(address sender, uint256 amount) internal {\\n        _move(sender, address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x60484c385e1aa339053e9d94240b7246c7a4511e4297aa40464ac40a7cda399c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BalancerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract BalancerOwnable {\\n    // State variables\\n\\n    address private _owner;\\n\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x5907d7a22e0df36874a7d06de159cbfdb7be37fbaace7b109930d8cd2dbb5a98\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BalancerReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Balancer Labs (and OpenZeppelin)\\n * @title Protect against reentrant calls (and also selectively protect view functions)\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `_lock_` guard, functions marked as\\n * `_lock_` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `_lock_` entry\\n * points to them.\\n *\\n * Also adds a _lockview_ modifier, which doesn't create a lock, but fails\\n *   if another _lock_ call is in progress\\n */\\ncontract BalancerReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `_lock_` function from another `_lock_`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `_lock_` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock() {\\n        // On the first call to _lock_, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ERR_REENTRY\\\");\\n\\n        // Any calls to _lock_ after this point will fail\\n        _status = _ENTERED;\\n        _;\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Also add a modifier that doesn't create a lock, but protects functions that\\n     *      should not be called while a _lock_ function is running\\n     */\\n    modifier viewlock() {\\n        require(_status != _ENTERED, \\\"ERR_REENTRY_VIEW\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbf697bdd4ac87b30b9c1177512a10c4cfa1fb0ea5de75364c9229044ffba9458\",\"license\":\"GPL-3.0-or-later\"},\"interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\npragma experimental ABIEncoderV2;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        CHANGE_CAP,\\n        CHANGE_PROTOCOL_FEE\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n        bool canChangeProtocolFee;\\n    }\\n\\n    function mintPoolShareFromLib(uint256 amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint256 amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint256 amount) external;\\n\\n    function burnPoolShareFromLib(uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setProtocolFee(uint256 protocolFee) external;\\n\\n    function setRoles(bytes32[] memory roles) external;\\n\\n    function setAccessControlAddress(address accessAddress) external;\\n\\n    function setPublicSwap(bool publicSwap) external;\\n\\n    function setCap(uint256 newCap) external;\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function createPool(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function createPool(uint256) external;\\n\\n    function updateWeight(address, uint256) external;\\n\\n    function updateWeightsGradually(\\n        uint256[] calldata,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function pokeWeights() external;\\n\\n    function commitAddToken(\\n        address,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function applyAddToken() external;\\n\\n    function removeToken(address) external;\\n\\n    function joinPool(uint256, uint256[] calldata) external;\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n\\n    function joinswapExternAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountIn);\\n\\n    function whitelistLiquidityProvider(address[] calldata) external;\\n\\n    function removeWhitelistedLiquidityProvider(address[] calldata) external;\\n\\n    function canProvideLiquidity(address) external view returns (bool);\\n\\n    function hasPermission(Permissions) external view returns (bool);\\n\\n    function getDenormalizedWeight(address) external view returns (uint256);\\n\\n    function getRightsManagerVersion() external pure returns (address);\\n\\n    function getBalancerSafeMathVersion() external pure returns (address);\\n\\n    function getSmartPoolManagerVersion() external pure returns (address);\\n\\n    function createPoolInternal(uint256) external;\\n\\n    function approve(address, uint256) external;\\n\\n    function bspCap() external view returns (uint256);\\n\\n    function bPool() external view returns (address);\\n\\n    function rights() external view returns (Rights memory);\\n\\n    // erc20\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function increaseApproval(address, uint256) external returns (bool);\\n\\n    function decreaseApproval(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function setCanWhitelistLPs(bool) external;\\n}\\n\",\"keccak256\":\"0xf3fb362693754c3985e3305b68c600126cdfc9940cd566198c7dd2155e4fb46c\",\"license\":\"GPL-3.0-or-later\"},\"interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x37d7904de6fabb6ab50b063cc6623997d5f7ff8e0322d0b4ba651c1c00fceed9\",\"license\":\"GPL-3.0-or-later\"},\"libraries/BalancerConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Balancer Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary BalancerConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint256 public constant BONE = 10**18;\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**14;\\n    uint256 public constant MAX_BALANCE = BONE * 10**12;\\n    uint256 public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint256 public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    // uint256 public constant MAX_FEE = BONE / 10;\\n    // FCX: max fee is 100%\\n    uint256 public constant MAX_FEE = BONE;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint256 public constant EXIT_FEE = 0;\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint256 public constant MIN_ASSET_LIMIT = 2;\\n    uint256 public constant MAX_ASSET_LIMIT = 8;\\n    uint256 public constant MAX_UINT = uint256(-1);\\n}\\n\",\"keccak256\":\"0x0823d2332f883801131620e42570203de679566a9de01c2db10a3f87362e42be\",\"license\":\"GPL-3.0-or-later\"},\"libraries/BalancerSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n\\n// Imports\\n\\nimport \\\"./BalancerConstants.sol\\\";\\n\\n/**\\n * @author Balancer Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary BalancerSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (BalancerConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / BalancerConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0){\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * BalancerConstants.BONE;\\n        require(c0 / dividend == BalancerConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        }\\n        else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8525e4ade460fb2f220853beedb56580f2ba0525f92313c079a72cf3b70fd03\",\"license\":\"GPL-3.0-or-later\"},\"libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Balancer Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\nlibrary RightsManager {\\n\\n    // Type declarations\\n\\n    enum Permissions { PAUSE_SWAPPING,\\n                       CHANGE_SWAP_FEE,\\n                       CHANGE_WEIGHTS,\\n                       ADD_REMOVE_TOKENS,\\n                       WHITELIST_LPS,\\n                       CHANGE_CAP,\\n                       CHANGE_PROTOCOL_FEE }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n        bool canChangeProtocolFee;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    bool public constant DEFAULT_CAN_CHANGE_PROTOCOL_FEE = true;\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */ \\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length == 0) {\\n            return Rights(DEFAULT_CAN_PAUSE_SWAPPING,\\n                          DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                          DEFAULT_CAN_CHANGE_WEIGHTS,\\n                          DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                          DEFAULT_CAN_WHITELIST_LPS,\\n                          DEFAULT_CAN_CHANGE_CAP,\\n                          DEFAULT_CAN_CHANGE_PROTOCOL_FEE);\\n        }\\n        else {\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](7);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canChangeCap;\\n        result[6] = rights.canChangeProtocolFee;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        }\\n        else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        }\\n        else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        }\\n        else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        }\\n        else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }\\n        else if (Permissions.CHANGE_CAP == permission) {\\n            return self.canChangeCap;\\n        }\\n        else if (Permissions.CHANGE_PROTOCOL_FEE == permission) {\\n            return self.canChangeProtocolFee;\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x48b5cec09f48faab491918b8a3c42a5d5c7e2d078f58605ed5bea7f22939ee6b\",\"license\":\"GPL-3.0-or-later\"},\"libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Balancer Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            // return token.approve(spender, 0);\\n            // FCX: fixed, do not returns\\n            // base on BActions._safeApprove\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf5652b9ccae4c9998987f2c09fb2432607267049352b5574f7f81f6b91350e02\",\"license\":\"GPL-3.0-or-later\"},\"libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../contracts/IBFactory.sol\\\";\\nimport \\\"./BalancerSafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n\\n/**\\n * @author Balancer Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    // Type declarations\\n\\n    struct NewTokenParams {\\n        address addr;\\n        bool isCommitted;\\n        uint commitBlock;\\n        uint denorm;\\n        uint balance;\\n    }\\n\\n    // For blockwise, automated weight updates\\n    // Move weights linearly from startWeights to endWeights,\\n    // between startBlock and endBlock\\n    struct GradualUpdateParams {\\n        uint startBlock;\\n        uint endBlock;\\n        uint[] startWeights;\\n        uint[] endWeights;\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n    */\\n    function updateWeight(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token,\\n        uint newWeight\\n    )\\n        external\\n    {\\n        require(newWeight >= BalancerConstants.MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(newWeight <= BalancerConstants.MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n\\n        uint currentWeight = bPool.getDenormalizedWeight(token);\\n        // Save gas; return immediately on NOOP\\n        if (currentWeight == newWeight) {\\n             return;\\n        }\\n\\n        uint currentBalance = bPool.getBalance(token);\\n        uint totalSupply = self.totalSupply();\\n        uint totalWeight = bPool.getTotalDenormalizedWeight();\\n        uint poolShares;\\n        uint deltaBalance;\\n        uint deltaWeight;\\n        uint newBalance;\\n\\n        if (newWeight < currentWeight) {\\n            // This means the controller will withdraw tokens to keep price\\n            // So they need to redeem PCTokens\\n            deltaWeight = BalancerSafeMath.bsub(currentWeight, newWeight);\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BalancerSafeMath.bmul(totalSupply,\\n                                               BalancerSafeMath.bdiv(deltaWeight, totalWeight));\\n\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BalancerSafeMath.bmul(currentBalance,\\n                                                 BalancerSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // New balance cannot be lower than MIN_BALANCE\\n            newBalance = BalancerSafeMath.bsub(currentBalance, deltaBalance);\\n\\n            require(newBalance >= BalancerConstants.MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n            // First get the tokens from this contract (Pool Controller) to msg.sender\\n            bPool.rebind(token, newBalance, newWeight);\\n\\n            // Now with the tokens this contract can send them to msg.sender\\n            bool xfer = IERC20(token).transfer(msg.sender, deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            self.pullPoolShareFromLib(msg.sender, poolShares);\\n            self.burnPoolShareFromLib(poolShares);\\n        }\\n        else {\\n            // This means the controller will deposit tokens to keep the price.\\n            // They will be minted and given PCTokens\\n            deltaWeight = BalancerSafeMath.bsub(newWeight, currentWeight);\\n\\n            require(BalancerSafeMath.badd(totalWeight, deltaWeight) <= BalancerConstants.MAX_TOTAL_WEIGHT,\\n                    \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BalancerSafeMath.bmul(totalSupply,\\n                                               BalancerSafeMath.bdiv(deltaWeight, totalWeight));\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BalancerSafeMath.bmul(currentBalance,\\n                                                 BalancerSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // First gets the tokens from msg.sender to this contract (Pool Controller)\\n            bool xfer = IERC20(token).transferFrom(msg.sender, address(this), deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            // Now with the tokens this contract can bind them to the pool it controls\\n            bPool.rebind(token, BalancerSafeMath.badd(currentBalance, deltaBalance), newWeight);\\n\\n            self.mintPoolShareFromLib(poolShares);\\n            self.pushPoolShareFromLib(msg.sender, poolShares);\\n        }\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param gradualUpdate - gradual update parameters from the CRP\\n    */\\n    function pokeWeights(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate\\n    )\\n        external\\n    {\\n        // Do nothing if we call this when there is no update plan\\n        if (gradualUpdate.startBlock == 0) {\\n            return;\\n        }\\n\\n        // Error to call it before the start of the plan\\n        require(block.number >= gradualUpdate.startBlock, \\\"ERR_CANT_POKE_YET\\\");\\n        // Proposed error message improvement\\n        // require(block.number >= startBlock, \\\"ERR_NO_HOKEY_POKEY\\\");\\n\\n        // This allows for pokes after endBlock that get weights to endWeights\\n        // Get the current block (or the endBlock, if we're already past the end)\\n        uint currentBlock;\\n        if (block.number > gradualUpdate.endBlock) {\\n            currentBlock = gradualUpdate.endBlock;\\n        }\\n        else {\\n            currentBlock = block.number;\\n        }\\n\\n        uint blockPeriod = BalancerSafeMath.bsub(gradualUpdate.endBlock, gradualUpdate.startBlock);\\n        uint blocksElapsed = BalancerSafeMath.bsub(currentBlock, gradualUpdate.startBlock);\\n        uint weightDelta;\\n        uint deltaPerBlock;\\n        uint newWeight;\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            // Make sure it does nothing if the new and old weights are the same (saves gas)\\n            // It's a degenerate case if they're *all* the same, but you certainly could have\\n            // a plan where you only change some of the weights in the set\\n            if (gradualUpdate.startWeights[i] != gradualUpdate.endWeights[i]) {\\n                if (gradualUpdate.endWeights[i] < gradualUpdate.startWeights[i]) {\\n                    // We are decreasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BalancerSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                        gradualUpdate.endWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BalancerSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight - (blocksElapsed * deltaPerBlock)\\n                    newWeight = BalancerSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                      BalancerSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n                else {\\n                    // We are increasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BalancerSafeMath.bsub(gradualUpdate.endWeights[i],\\n                                                        gradualUpdate.startWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BalancerSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight + (blocksElapsed * deltaPerBlock)\\n                    newWeight = BalancerSafeMath.badd(gradualUpdate.startWeights[i],\\n                                                      BalancerSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n\\n                uint bal = bPool.getBalance(tokens[i]);\\n\\n                bPool.rebind(tokens[i], bal, newWeight);\\n            }\\n        }\\n\\n        // Reset to allow add/remove tokens, or manual weight updates\\n        if (block.number >= gradualUpdate.endBlock) {\\n            gradualUpdate.startBlock = 0;\\n        }\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function commitAddToken(\\n        IBPool bPool,\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(!bPool.isBound(token), \\\"ERR_IS_BOUND\\\");\\n\\n        require(denormalizedWeight <= BalancerConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n        require(denormalizedWeight >= BalancerConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n        require(BalancerSafeMath.badd(bPool.getTotalDenormalizedWeight(),\\n                                      denormalizedWeight) <= BalancerConstants.MAX_TOTAL_WEIGHT,\\n                \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        require(balance >= BalancerConstants.MIN_BALANCE, \\\"ERR_BALANCE_BELOW_MIN\\\");\\n\\n        newToken.addr = token;\\n        newToken.balance = balance;\\n        newToken.denorm = denormalizedWeight;\\n        newToken.commitBlock = block.number;\\n        newToken.isCommitted = true;\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param addTokenTimeLockInBlocks -  Wait time between committing and applying a new token\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function applyAddToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint addTokenTimeLockInBlocks,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(newToken.isCommitted, \\\"ERR_NO_TOKEN_COMMIT\\\");\\n        require(BalancerSafeMath.bsub(block.number, newToken.commitBlock) >= addTokenTimeLockInBlocks,\\n                                      \\\"ERR_TIMELOCK_STILL_COUNTING\\\");\\n\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * newTokenWeight / totalWeight\\n        uint poolShares = BalancerSafeMath.bdiv(BalancerSafeMath.bmul(totalSupply, newToken.denorm),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // Clear this to allow adding more tokens\\n        newToken.isCommitted = false;\\n\\n        // First gets the tokens from msg.sender to this contract (Pool Controller)\\n        bool returnValue = IERC20(newToken.addr).transferFrom(self.getController(), address(self), newToken.balance);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        // Approves bPool to pull from this controller\\n        // Approve unlimited, same as when creating the pool, so they can join pools later\\n        returnValue = SafeApprove.safeApprove(IERC20(newToken.addr), address(bPool), BalancerConstants.MAX_UINT);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        bPool.bind(newToken.addr, newToken.balance, newToken.denorm);\\n\\n        self.mintPoolShareFromLib(poolShares);\\n        self.pushPoolShareFromLib(msg.sender, poolShares);\\n    }\\n\\n     /**\\n     * @notice Remove a token from the pool\\n     * @dev Logic in the CRP controls when ths can be called. There are two related permissions:\\n     *      AddRemoveTokens - which allows removing down to the underlying BPool limit of two\\n     *      RemoveAllTokens - which allows completely draining the pool by removing all tokens\\n     *                        This can result in a non-viable pool with 0 or 1 tokens (by design),\\n     *                        meaning all swapping or binding operations would fail in this state\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to remove\\n     */\\n    function removeToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token\\n    )\\n        external\\n    {\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * tokenWeight / totalWeight\\n        uint poolShares = BalancerSafeMath.bdiv(BalancerSafeMath.bmul(totalSupply,\\n                                                                      bPool.getDenormalizedWeight(token)),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // this is what will be unbound from the pool\\n        // Have to get it before unbinding\\n        uint balance = bPool.getBalance(token);\\n\\n        // Unbind and get the tokens out of balancer pool\\n        bPool.unbind(token);\\n\\n        // Now with the tokens this contract can send them to msg.sender\\n        bool xfer = IERC20(token).transfer(self.getController(), balance);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n        self.pullPoolShareFromLib(self.getController(), poolShares);\\n        self.burnPoolShareFromLib(poolShares);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n         }\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external cals to pokeWeights\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param newWeights - final weights we want to get to\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n     * @param minimumWeightChangeBlockPeriod - needed to validate the block period\\n    */\\n    function updateWeightsGradually(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate,\\n        uint[] calldata newWeights,\\n        uint startBlock,\\n        uint endBlock,\\n        uint minimumWeightChangeBlockPeriod\\n    )\\n        external\\n    {\\n        require(block.number < endBlock, \\\"ERR_GRADUAL_UPDATE_TIME_TRAVEL\\\");\\n        \\n        if (block.number > startBlock) {\\n            // This means the weight update should start ASAP\\n            // Moving the start block up prevents a big jump/discontinuity in the weights\\n            gradualUpdate.startBlock = block.number;\\n        }\\n        else{\\n            gradualUpdate.startBlock = startBlock;\\n        }\\n\\n        // Enforce a minimum time over which to make the changes\\n        // The also prevents endBlock <= startBlock\\n        require(BalancerSafeMath.bsub(endBlock, gradualUpdate.startBlock) >= minimumWeightChangeBlockPeriod,\\n                \\\"ERR_WEIGHT_CHANGE_TIME_BELOW_MIN\\\");\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // Must specify weights for all tokens\\n        require(newWeights.length == tokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        uint weightsSum = 0;\\n        gradualUpdate.startWeights = new uint[](tokens.length);\\n\\n        // Check that endWeights are valid now to avoid reverting in a future pokeWeights call\\n        //\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            require(newWeights[i] <= BalancerConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n            require(newWeights[i] >= BalancerConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n\\n            weightsSum = BalancerSafeMath.badd(weightsSum, newWeights[i]);\\n            gradualUpdate.startWeights[i] = bPool.getDenormalizedWeight(tokens[i]);\\n        }\\n        require(weightsSum <= BalancerConstants.MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n        gradualUpdate.endBlock = endBlock;\\n        gradualUpdate.endWeights = newWeights;\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    )\\n         external\\n         view\\n         returns (uint[] memory actualAmountsIn)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = BalancerSafeMath.bdiv(poolAmountOut,\\n                                           BalancerSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = BalancerSafeMath.bmul(ratio,\\n                                                       BalancerSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint pAiAfterExitFee, uint[] memory actualAmountsOut)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n        pAiAfterExitFee = BalancerSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        uint ratio = BalancerSafeMath.bdiv(pAiAfterExitFee,\\n                                           BalancerSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = BalancerSafeMath.bmul(ratio,\\n                                                        BalancerSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    )\\n        external\\n        view\\n        returns (uint poolAmountOut)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= BalancerSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BalancerConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        poolAmountOut = bPool.calcPoolOutGivenSingleIn(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    )\\n        external\\n        view\\n        returns (uint tokenAmountIn)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountIn = bPool.calcSingleInGivenPoolOut(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= BalancerSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BalancerConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint tokenAmountOut)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        require(tokenAmountOut <= BalancerSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BalancerConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return exitFee - calculated exit fee\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint poolAmountIn)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= BalancerSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BalancerConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n        poolAmountIn = bPool.calcPoolInGivenSingleOut(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n    }\\n\\n    // Internal functions\\n\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd085e09cdfffae7f0c9b3e444cfefe1c860d25a498c3eface37db40374ae8d15\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051615fcb380380615fcb83398101604081905261002f91610060565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100b1565b60008060408385031215610072578182fd5b825161007d81610099565b602084015190925061008e81610099565b809150509250929050565b6001600160a01b03811681146100ae57600080fd5b50565b615f0b806100c06000396000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c8063c7154c0a1462000057578063dc19e8421462000079578063e2cce565146200009f578063e8d56b8b14620000b6575b600080fd5b62000061620000cf565b60405162000070919062000780565b60405180910390f35b620000906200008a366004620005b0565b620000de565b60405162000070919062000902565b62000061620000b0366004620005d5565b620000fc565b620000cd620000c7366004620005b0565b62000397565b005b6001546001600160a01b031690565b6001600160a01b031660009081526020819052604090205460ff1690565b600154604051632474521560e21b81526000916001600160a01b0316906391d148549062000151907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759032906004016200090d565b60206040518083038186803b1580156200016a57600080fd5b505afa1580156200017f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a591906200063c565b620001cd5760405162461bcd60e51b8152600401620001c4906200095b565b60405180910390fd5b6002620001de604085018562000a9e565b90501015620002015760405162461bcd60e51b8152600401620001c49062000a72565b62000210604084018462000a9e565b905062000221606085018562000a9e565b905014620002435760405162461bcd60e51b8152600401620001c49062000a0e565b62000252604084018462000a9e565b905062000263608085018562000a9e565b905014620002855760405162461bcd60e51b8152600401620001c49062000924565b600084600260009054906101000a90046001600160a01b03168585604051620002ae906200056c565b620002bd949392919062000794565b604051809103906000f080158015620002da573d6000803e3d6000fd5b506040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055516392eefe9b60e01b81526392eefe9b906200035a90339060040162000780565b600060405180830381600087803b1580156200037557600080fd5b505af11580156200038a573d6000803e3d6000fd5b5092979650505050505050565b600154604051632474521560e21b81526001600160a01b03909116906391d1485490620003eb907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759032906004016200090d565b60206040518083038186803b1580156200040457600080fd5b505afa15801562000419573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043f91906200063c565b6200045e5760405162461bcd60e51b8152600401620001c4906200095b565b6001600160a01b038116620004875760405162461bcd60e51b8152600401620001c49062000a45565b604051632474521560e21b81526001600160a01b038216906391d1485490620004d7907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759032906004016200090d565b60206040518083038186803b158015620004f057600080fd5b505afa15801562000505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200052b91906200063c565b6200054a5760405162461bcd60e51b8152600401620001c490620009b1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6153298062000bad83390190565b80356001600160a01b03811681146200059257600080fd5b92915050565b600060e08284031215620005aa578081fd5b50919050565b600060208284031215620005c2578081fd5b620005ce83836200057a565b9392505050565b60008060006101208486031215620005eb578182fd5b620005f785856200057a565b9250602084013567ffffffffffffffff81111562000613578283fd5b620006218682870162000598565b92505062000633856040860162000598565b90509250925092565b6000602082840312156200064e578081fd5b8151620005ce8162000b9a565b6001600160a01b0316815260200190565b81835260006001600160fb1b0383111562000685578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b8035620006de8162000b9a565b151582526020810135620006f28162000b9a565b151560208301526040810135620007098162000b9a565b151560408301526060810135620007208162000b9a565b151560608301526080810135620007378162000b9a565b151560808301526200074d60a082018262000b43565b6200075c60a0840182620006a1565b506200076c60c082018262000b43565b6200077b60c0840182620006a1565b505050565b6001600160a01b0391909116815260200190565b600061014060018060a01b038088168452602081881681860152826040860152620007c0878862000b52565b925060e084870152620007d961022087018483620006a7565b935050620007ea8188018862000b52565b925061013f19808786030161016088015262000808858584620006a7565b94506200081960408a018a62000af8565b9450915080878603016101808801528462000835858762000aef565b929550869290505b84831015620008725783860162000860826200085a838a6200057a565b6200065b565b9150809650506001830192506200083d565b6200088160608b018b62000af8565b9650945081888203016101a08901526200089d8187876200066c565b955050620008af60808a018a62000af8565b9450925080878603016101c08801525050620008cd8383836200066c565b60a08801356101e087015260c08801356102008701529350620008f992505060608401905084620006d1565b95945050505050565b901515815260200190565b9182526001600160a01b0316602082015260400190565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b60208082526036908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616460408201527536b4b7103a37903430bb32903832b936b4b9b9b4b7b760511b606082015260800190565b60208082526039908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616460408201527f6d696e206f66206e65772061636365737320636f6e74726f6c00000000000000606082015260800190565b6020808252601b908201527f4552525f53544152545f42414c414e4345535f4d49534d415443480000000000604082015260600190565b6020808252601390820152724552525f494e56414c49445f4144445245535360681b604082015260600190565b6020808252601290820152714552525f544f4f5f4645575f544f4b454e5360701b604082015260600190565b6000808335601e1984360301811262000ab5578283fd5b83018035915067ffffffffffffffff82111562000ad0578283fd5b602090810192508102360382131562000ae857600080fd5b9250929050565b90815260200190565b6000808335601e1984360301811262000b0f578283fd5b830160208101925035905067ffffffffffffffff81111562000b3057600080fd5b60208102360383131562000ae857600080fd5b60008235620005ce8162000b9a565b6000808335601e1984360301811262000b69578283fd5b830160208101925035905067ffffffffffffffff81111562000b8a57600080fd5b80360383131562000ae857600080fd5b801515811462000ba957600080fd5b5056fe60806040523480156200001157600080fd5b50604051620053293803806200532983398101604081905262000034916200086d565b815160208084015182519091620000519160039185019062000499565b5080516200006790600490602084019062000499565b5050600580546001600160a01b03191633179055506001600655620f4240670de0b6b3a7640000048260a001511015620000be5760405162461bcd60e51b8152600401620000b59062000b47565b60405180910390fd5b670de0b6b3a76400008260a001511115620000ed5760405162461bcd60e51b8152600401620000b59062000b47565b670de0b6b3a76400008260c0015111156200011c5760405162461bcd60e51b8152600401620000b59062000a50565b81604001515182606001515114620001485760405162461bcd60e51b8152600401620000b59062000a87565b81604001515182608001515114620001745760405162461bcd60e51b8152600401620000b59062000a19565b600282604001515110156200019d5760405162461bcd60e51b8152600401620000b59062000b1b565b60088260400151511115620001c65760405162461bcd60e51b8152600401620000b59062000b7e565b60408083015190516377d4434960e01b81527300098026682c3B24f9aD5e60311Ce7A0cb753b44916377d4434991620002039190600401620009ca565b60006040518083038186803b1580156200021c57600080fd5b505af415801562000231573d6000803e3d6000fd5b5050600780546001600160a01b0319166001600160a01b03881617905550508051600980546020808501516040808701516060880151608089015160a08a015160c08b015160ff199098169915159990991761ff001916610100951515959095029490941762ff0000191662010000921515929092029190911763ff00000019166301000000911515919091021760ff60201b1916640100000000921515929092029190911760ff60281b191665010000000000951515959095029490941760ff60301b191666010000000000009215159290920291909117909155908301518051620003239260159201906200051e565b50606082015180516200033f9160169160209091019062000584565b5060a082015160125560c08201516013556007546040805163638aa60560e11b815290516001600160a01b039092169163c7154c0a91600480820192602092909190829003018186803b1580156200039657600080fd5b505afa158015620003ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d1919062000848565b601480546001600160a01b0319166001600160a01b039290921691909117905562015f906017556101f4601855608082015180516200041991600c9160209091019062000584565b506000600a55600019601a5562000430836200043a565b5050505062000bfc565b62000450816200049360201b62002c1e1760201c565b6200046f5760405162461bcd60e51b8152600401620000b59062000abe565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004dc57805160ff19168380011785556200050c565b828001600101855582156200050c579182015b828111156200050c578251825591602001919060010190620004ef565b506200051a929150620005c1565b5090565b82805482825590600052602060002090810192821562000576579160200282015b828111156200057657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200053f565b506200051a929150620005d8565b8280548282559060005260206000209081019282156200050c57916020028201828111156200050c578251825591602001919060010190620004ef565b5b808211156200051a5760008155600101620005c2565b5b808211156200051a5780546001600160a01b0319168155600101620005d9565b80516001600160a01b03811681146200061157600080fd5b92915050565b600082601f83011262000628578081fd5b81516200063f620006398262000bdc565b62000bb5565b8181529150602080830190848101818402860182018710156200066157600080fd5b60005b848110156200068c57620006798883620005f9565b8452928201929082019060010162000664565b505050505092915050565b600082601f830112620006a8578081fd5b8151620006b9620006398262000bdc565b818152915060208083019084810181840286018201871015620006db57600080fd5b60005b848110156200068c57815184529282019290820190600101620006de565b805180151581146200061157600080fd5b600082601f8301126200071e578081fd5b81516001600160401b0381111562000734578182fd5b60206200074a601f8301601f1916820162000bb5565b925081835284818386010111156200076157600080fd5b60005b828110156200078157848101820151848201830152810162000764565b82811115620007935760008284860101525b50505092915050565b600060e08284031215620007ae578081fd5b620007ba60e062000bb5565b9050620007c88383620006fc565b8152620007d98360208401620006fc565b6020820152620007ed8360408401620006fc565b6040820152620008018360608401620006fc565b6060820152620008158360808401620006fc565b6080820152620008298360a08401620006fc565b60a08201526200083d8360c08401620006fc565b60c082015292915050565b6000602082840312156200085a578081fd5b620008668383620005f9565b9392505050565b600080600080610140858703121562000884578283fd5b620008908686620005f9565b9350620008a18660208701620005f9565b60408601519093506001600160401b0380821115620008be578384fd5b9086019060e08289031215620008d2578384fd5b620008de60e062000bb5565b825182811115620008ed578586fd5b620008fb8a8286016200070d565b82525060208301518281111562000910578586fd5b6200091e8a8286016200070d565b60208301525060408301518281111562000936578586fd5b620009448a82860162000617565b6040830152506060830151828111156200095c578586fd5b6200096a8a82860162000697565b60608301525060808301518281111562000982578586fd5b620009908a82860162000697565b60808301525060a083015160a082015260c083015160c0820152809450505050620009bf86606087016200079c565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101562000a0d5783516001600160a01b031683529284019291840191600101620009e6565b50909695505050505050565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b60208082526018908201527f4552525f494e56414c49445f50524f544f434f4c5f4645450000000000000000604082015260600190565b6020808252601b908201527f4552525f53544152545f42414c414e4345535f4d49534d415443480000000000604082015260600190565b60208082526036908201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e746160408201527f74696f6e206973206e6f74206120636f6e747261637400000000000000000000606082015260800190565b6020808252601290820152714552525f544f4f5f4645575f544f4b454e5360701b604082015260600190565b60208082526014908201527f4552525f494e56414c49445f535741505f464545000000000000000000000000604082015260600190565b60208082526013908201527f4552525f544f4f5f4d414e595f544f4b454e5300000000000000000000000000604082015260600190565b6040518181016001600160401b038111828210171562000bd457600080fd5b604052919050565b60006001600160401b0382111562000bf2578081fd5b5060209081020190565b61471d8062000c0c6000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80636d06dfa011610167578063a9059cbb116100ce578063d73dd62311610087578063d73dd62314610586578063dd62ed3e14610599578063e211b875146105ac578063e7f1a554146105b4578063e854f53d146105bc578063f226b528146105c4576102a0565b8063a9059cbb14610524578063b02f0b7314610537578063b64ef17b1461054a578063c275d81b14610552578063c3391d271461055a578063c42bd05a1461056d576102a0565b80639776e94b116101205780639776e94b146104d6578063980e8db6146104e95780639a82417e146105045780639d829c2b1461050c578063a3f4df7e14610514578063a835a0de1461051c576102a0565b80636d06dfa01461047a57806370a082311461048d57806374983a0d146104a05780638259e6a0146104a857806392eefe9b146104bb57806395d89b41146104ce576102a0565b8063313ce5671161020b5780634f69c0d4116101c45780634f69c0d41461040557806355c32a23146104185780635a8342d81461042b5780635db34277146104415780635fa7b584146104545780636618846314610467576102a0565b8063313ce5671461039e57806337c6f4d9146103a657806346ab38f1146103b957806347786d37146103cc5780634ba57882146103df5780634c20d209146103f2576102a0565b806318160ddd1161025d57806318160ddd14610340578063220eb7601461034857806323b872dd1461035b578063246bc19b1461036e5780632e0f2625146103815780633018205f14610396576102a0565b806302c96748146102b257806306fdde03146102db578063095dcccc146102f0578063095ea7b3146103035780630a165940146103235780630ce2792514610338575b6102b06102ab6105cc565b6105f1565b005b6102c56102c0366004613ba8565b610615565b6040516102d2919061463c565b60405180910390f35b6102e3610889565b6040516102d29190614137565b6102b06102fe366004613b7d565b61091f565b610316610311366004613b7d565b61094c565b6040516102d29190613f64565b61032b6109a4565b6040516102d29190613eaa565b6102c56109b3565b6102c56109b9565b6102b0610356366004613d5a565b6109bf565b610316610369366004613b3d565b6109ea565b6102b061037c366004613c75565b610b18565b610389610cac565b6040516102d29190614653565b61032b610cb1565b610389610cc0565b6103166103b4366004613d3b565b610cc5565b6102c56103c7366004613ba8565b610d58565b6102b06103da366004613d5a565b610fb3565b6102b06103ed366004613d5a565b6110e1565b6102b0610400366004613ba8565b611109565b6102b0610413366004613d8a565b61132a565b6102b0610426366004613b7d565b6117d3565b6104336117fc565b6040516102d2929190614645565b6102c561044f366004613ba8565b611805565b6102b0610462366004613ae9565b611a92565b610316610475366004613b7d565b611c39565b6102c5610488366004613ba8565b611d13565b6102c561049b366004613ae9565b611fa0565b61032b611fbb565b6102b06104b6366004613d5a565b611fd3565b6102b06104c9366004613ae9565b612070565b6102e361211c565b6102b06104e4366004613b7d565b61217d565b6104f16122fc565b6040516102d29796959493929190613f6f565b61032b612346565b61032b61235e565b6102e3612376565b6102c56123a5565b610316610532366004613b7d565b6123ab565b6102b0610545366004613d8a565b6123e7565b61032b612817565b6102b0612826565b6102b0610568366004613e45565b612985565b610575612a4e565b6040516102d2959493929190613efc565b610316610594366004613b7d565b612a75565b6102c56105a7366004613b05565b612ae9565b6102b0612b14565b6102c5612c0b565b6102c5612c11565b6102c5612c17565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610610573d6000f35b3d6000fd5b601454604051636c9b2a3f60e11b81526000916001600160a01b03169063d936547e90610646903290600401613eaa565b60206040518083038186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190613cff565b6106bb5760405162461bcd60e51b81526004016106b29061427d565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516106ed929190613fa7565b60405180910390a2600260065414156107185760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b03166107455760405162461bcd60e51b81526004016106b29061432a565b60085460405163724a2d5360e01b815260009182917300098026682c3B24f9aD5e60311Ce7A0cb753b449163724a2d53916107969130916001600160a01b03909116908b908b908b9060040161409b565b604080518083038186803b1580156107ad57600080fd5b505af41580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190613dd4565b9150915080925060006107f88484612c24565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e98860405161083d919061463c565b60405180910390a361084f33856117f2565b610858816109de565b60075461086e906001600160a01b03168461093e565b610879873388612c5d565b5050505b60016006559392505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109155780601f106108ea57610100808354040283529160200191610915565b820191906000526020600020905b8154815290600101906020018083116108f857829003601f168201915b5050505050905090565b33301461093e5760405162461bcd60e51b81526004016106b29061418a565b6109488282612ea6565b5050565b3360008181526002602090815260408083206001600160a01b038716808552925280832085905551919290916000805160206146c88339815191529061099390869061463c565b60405180910390a350600192915050565b6007546001600160a01b031681565b601a5481565b60005490565b3330146109de5760405162461bcd60e51b81526004016106b29061418a565b6109e781612eb1565b50565b60006001600160a01b038316610a125760405162461bcd60e51b81526004016106b2906142c9565b336001600160a01b0385161480610a4c57506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610a685760405162461bcd60e51b81526004016106b290614459565b610a73848484612f2b565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610aa957506000198114155b15610b0b57610ab88184612c24565b6001600160a01b0386811660009081526002602090815260408083203380855292529182902084905590519187169290916000805160206146c883398151915291610b029161463c565b60405180910390a35b60019150505b9392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610b4a929190613fa7565b60405180910390a260026006541415610b755760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b03163314610ba45760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b0316610bcc5760405162461bcd60e51b81526004016106b29061432a565b60095462010000900460ff16610bf45760405162461bcd60e51b81526004016106b2906142f3565b600e54600160a01b900460ff1615610c1e5760405162461bcd60e51b81526004016106b290614489565b6008546017546040516304ee2fc960e21b81527300098026682c3B24f9aD5e60311Ce7A0cb753b44926313b8bf2492610c71926001600160a01b0390921691600a918a918a918a918a9190600401614007565b60006040518083038186803b158015610c8957600080fd5b505af4158015610c9d573d6000803e3d6000fd5b50506001600655505050505050565b601281565b6005546001600160a01b031690565b601290565b6040516322c1aa2560e11b8152600090739Fd5e70828D2157990A7ccB8E7AAe625fAB84de290634583544a90610d029060099086906004016145a4565b60206040518083038186803b158015610d1a57600080fd5b505af4158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190613cff565b92915050565b601454604051636c9b2a3f60e11b81526000916001600160a01b03169063d936547e90610d89903290600401613eaa565b60206040518083038186803b158015610da157600080fd5b505afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd99190613cff565b610df55760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610e27929190613fa7565b60405180910390a260026006541415610e525760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b0316610e7f5760405162461bcd60e51b81526004016106b29061432a565b600854604051636a82d4a760e11b815260009182917300098026682c3B24f9aD5e60311Ce7A0cb753b449163d505a94e91610ed09130916001600160a01b03909116908b908b908b9060040161409b565b604080518083038186803b158015610ee757600080fd5b505af4158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f9190613dd4565b915091508092506000610f328684612c24565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e986604051610f77919061463c565b60405180910390a3610f8933876117f2565b610f92816109de565b600754610fa8906001600160a01b03168461093e565b610879873386612c5d565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610fe5929190613fa7565b60405180910390a2600260065414156110105760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b031661103d5760405162461bcd60e51b81526004016106b29061432a565b6005546001600160a01b031633146110675760405162461bcd60e51b81526004016106b29061418a565b60095465010000000000900460ff166110925760405162461bcd60e51b81526004016106b2906143cd565b336001600160a01b03167f6bc200110c7794738d401810b22ef824a2044a8ccb022d4ad8769840370331f5601a54836040516110cf929190614645565b60405180910390a2601a556001600655565b3330146111005760405162461bcd60e51b81526004016106b29061418a565b6109e781612fdc565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161113b929190613fa7565b60405180910390a2600260065414156111665760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b031633146111955760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b03166111bd5760405162461bcd60e51b81526004016106b29061432a565b6009546301000000900460ff166111e65760405162461bcd60e51b81526004016106b2906141b6565b600a54156112065760405162461bcd60e51b81526004016106b29061456d565b604051630e0d789b60e11b81527300098026682c3B24f9aD5e60311Ce7A0cb753b4490631c1af1369061123d908690600401613eaa565b60006040518083038186803b15801561125557600080fd5b505af4158015611269573d6000803e3d6000fd5b50506040513392503091506001600160a01b038616907f33b043686b9408a355896fe90b2f8ecc86a41d87d1554ef65a739948b4f23e2790600090a460085460405163b489ec1960e01b81527300098026682c3B24f9aD5e60311Ce7A0cb753b449163b489ec19916112f0916001600160a01b031690879087908790600e90600401613fd6565b60006040518083038186803b15801561130857600080fd5b505af415801561131c573d6000803e3d6000fd5b505060016006555050505050565b601454604051636c9b2a3f60e11b81526001600160a01b039091169063d936547e9061135a903290600401613eaa565b60206040518083038186803b15801561137257600080fd5b505afa158015611386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113aa9190613cff565b6113c65760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516113f8929190613fa7565b60405180910390a2600260065414156114235760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b03166114505760405162461bcd60e51b81526004016106b29061432a565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b15801561149557600080fd5b505afa1580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd9190613cff565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b59552906114ff90600090600401613f64565b600060405180830381600087803b15801561151957600080fd5b505af115801561152d573d6000803e3d6000fd5b5050600954640100000000900460ff1615915081905061155c57503360009081526019602052604090205460ff165b8061157657503260009081526019602052604090205460ff165b6115925760405162461bcd60e51b81526004016106b290614222565b60085460405163a1925f1d60e01b81526060917300098026682c3B24f9aD5e60311Ce7A0cb753b449163a1925f1d916115df9130916001600160a01b0316908a908a908a906004016140cf565b60006040518083038186803b1580156115f757600080fd5b505af415801561160b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116339190810190613cc4565b90506060600860009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561168557600080fd5b505afa158015611699573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c19190810190613bdc565b905060005b815181101561175f5760008282815181106116dd57fe5b6020026020010151905060008483815181106116f557fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7283604051611742919061463c565b60405180910390a3611755823383613009565b50506001016116c6565b5061176986611100565b611773338761093e565b50506008546040516324dacaa960e11b81526001600160a01b03909116906349b59552906117a5908490600401613f64565b600060405180830381600087803b1580156117bf57600080fd5b505af1158015610c9d573d6000803e3d6000fd5b3330146117f25760405162461bcd60e51b81526004016106b29061418a565b6109488282613252565b600a54600b5482565b601454604051636c9b2a3f60e11b81526000916001600160a01b03169063d936547e90611836903290600401613eaa565b60206040518083038186803b15801561184e57600080fd5b505afa158015611862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118869190613cff565b6118a25760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516118d4929190613fa7565b60405180910390a2600260065414156118ff5760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b031661192c5760405162461bcd60e51b81526004016106b29061432a565b600954640100000000900460ff16158061195557503360009081526019602052604090205460ff165b8061196f57503260009081526019602052604090205460ff165b61198b5760405162461bcd60e51b81526004016106b290614222565b60085460405163df90de0b60e01b81527300098026682c3B24f9aD5e60311Ce7A0cb753b449163df90de0b916119d79130916001600160a01b039091169089908990899060040161409b565b60206040518083038186803b1580156119ef57600080fd5b505af4158015611a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a279190613d72565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7285604051611a6c919061463c565b60405180910390a3611a7d81611100565b611a87338261093e565b61087d843385613009565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611ac4929190613fa7565b60405180910390a260026006541415611aef5760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b03163314611b1e5760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b0316611b465760405162461bcd60e51b81526004016106b29061432a565b6009546301000000900460ff16611b6f5760405162461bcd60e51b81526004016106b2906141b6565b600e54600160a01b900460ff1615611b995760405162461bcd60e51b81526004016106b2906144b8565b600a5415611bb95760405162461bcd60e51b81526004016106b29061456d565b600854604051630970e47f60e01b81527300098026682c3B24f9aD5e60311Ce7A0cb753b4491630970e47f91611c019130916001600160a01b0390911690869060040161404e565b60006040518083038186803b158015611c1957600080fd5b505af4158015611c2d573d6000803e3d6000fd5b50506001600655505050565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310611c8d573360009081526002602090815260408083206001600160a01b0388168452909152812055611cbc565b611c978184612c24565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529252918290205491519092916000805160206146c883398151915291611d01919061463c565b60405180910390a35060019392505050565b601454604051636c9b2a3f60e11b81526000916001600160a01b03169063d936547e90611d44903290600401613eaa565b60206040518083038186803b158015611d5c57600080fd5b505afa158015611d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d949190613cff565b611db05760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611de2929190613fa7565b60405180910390a260026006541415611e0d5760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b0316611e3a5760405162461bcd60e51b81526004016106b29061432a565b600954640100000000900460ff161580611e6357503360009081526019602052604090205460ff165b80611e7d57503260009081526019602052604090205460ff165b611e995760405162461bcd60e51b81526004016106b290614222565b600854604051636a6dc6e760e01b81527300098026682c3B24f9aD5e60311Ce7A0cb753b4491636a6dc6e791611ee59130916001600160a01b039091169089908990899060040161409b565b60206040518083038186803b158015611efd57600080fd5b505af4158015611f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f359190613d72565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7283604051611f7a919061463c565b60405180910390a3611f8b83611100565b611f95338461093e565b61087d843383613009565b6001600160a01b031660009081526001602052604090205490565b739Fd5e70828D2157990A7ccB8E7AAe625fAB84de290565b6005546001600160a01b03163314611ffd5760405162461bcd60e51b81526004016106b29061418a565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161202f929190613fa7565b60405180910390a26002600654141561205a5760405162461bcd60e51b81526004016106b2906143a8565b60026006556120688161325d565b506001600655565b6005546001600160a01b0316331461209a5760405162461bcd60e51b81526004016106b29061418a565b6001600160a01b0381166120c05760405162461bcd60e51b81526004016106b2906142c9565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109155780601f106108ea57610100808354040283529160200191610915565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516121af929190613fa7565b60405180910390a2600260065414156121da5760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b031633146122095760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b03166122315760405162461bcd60e51b81526004016106b29061432a565b60095462010000900460ff166122595760405162461bcd60e51b81526004016106b2906142f3565b600a54156122795760405162461bcd60e51b81526004016106b29061456d565b600854604051633d512a8760e21b81527300098026682c3B24f9aD5e60311Ce7A0cb753b449163f544aa1c916122c39130916001600160a01b039091169087908790600401614071565b60006040518083038186803b1580156122db57600080fd5b505af41580156122ef573d6000803e3d6000fd5b5050600160065550505050565b60095460ff80821691610100810482169162010000820481169163010000008104821691640100000000820481169165010000000000810482169166010000000000009091041687565b7389C3101E82f2B71ad8f3a23127752709BE35b67D90565b7300098026682c3B24f9aD5e60311Ce7A0cb753b4490565b6040518060400160405280601381526020017210985b185b98d95c8814db585c9d08141bdbdb606a1b81525081565b6101f481565b60006001600160a01b0383166123d35760405162461bcd60e51b81526004016106b2906142c9565b6123de338484612f2b565b50600192915050565b601454604051636c9b2a3f60e11b81526001600160a01b039091169063d936547e90612417903290600401613eaa565b60206040518083038186803b15801561242f57600080fd5b505afa158015612443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124679190613cff565b6124835760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516124b5929190613fa7565b60405180910390a2600260065414156124e05760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b031661250d5760405162461bcd60e51b81526004016106b29061432a565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b15801561255257600080fd5b505afa158015612566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258a9190613cff565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b59552906125bc90600090600401613f64565b600060405180830381600087803b1580156125d657600080fd5b505af11580156125ea573d6000803e3d6000fd5b505060085460405163151c70f960e21b8152600093508392506060917300098026682c3B24f9aD5e60311Ce7A0cb753b4491635471c3e4916126409130916001600160a01b0316908c908c908c906004016140cf565b60006040518083038186803b15801561265857600080fd5b505af415801561266c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126949190810190613df7565b9250925092506126a433886117f2565b6007546126ba906001600160a01b03168461093e565b6126c3826109de565b6008546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b15801561270857600080fd5b505afa15801561271c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127449190810190613bdc565b905060005b81518110156127e257600082828151811061276057fe5b60200260200101519050600084838151811061277857fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e9836040516127c5919061463c565b60405180910390a36127d8823383612c5d565b5050600101612749565b50506008546040516324dacaa960e11b81526001600160a01b0390911693506349b5955292506117a591508490600401613f64565b6008546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612858929190613fa7565b60405180910390a2600260065414156128835760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b031633146128b25760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b03166128da5760405162461bcd60e51b81526004016106b29061432a565b6009546301000000900460ff166129035760405162461bcd60e51b81526004016106b2906141b6565b600854601854604051633be961dd60e21b81527300098026682c3B24f9aD5e60311Ce7A0cb753b449263efa587749261294e9230926001600160a01b03169190600e9060040161410e565b60006040518083038186803b15801561296657600080fd5b505af415801561297a573d6000803e3d6000fd5b505060016006555050565b6005546001600160a01b031633146129af5760405162461bcd60e51b81526004016106b29061418a565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516129e1929190613fa7565b60405180910390a260026006541415612a0c5760405162461bcd60e51b81526004016106b2906143a8565b600260065580821015612a315760405162461bcd60e51b81526004016106b2906141ed565b60178290556018819055612a448361325d565b5050600160065550565b600e54600f546010546011546001600160a01b03841693600160a01b900460ff1692919085565b3360009081526002602090815260408083206001600160a01b0386168452909152812054612aa390836137d8565b3360008181526002602090815260408083206001600160a01b038916808552925291829020849055905190926000805160206146c883398151915291610993919061463c565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612b46929190613fa7565b60405180910390a260026006541415612b715760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b0316612b9e5760405162461bcd60e51b81526004016106b29061432a565b60095462010000900460ff16612bc65760405162461bcd60e51b81526004016106b2906142f3565b6008546040516382495b4560e01b81527300098026682c3B24f9aD5e60311Ce7A0cb753b44916382495b459161294e916001600160a01b031690600a90600401613f2a565b60185481565b60175481565b62015f9081565b3b151590565b6000806000612c3385856137fd565b915091508015612c555760405162461bcd60e51b81526004016106b290614518565b509392505050565b6008546001600160a01b0316612c855760405162461bcd60e51b81526004016106b29061432a565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90612cb6908790600401613eaa565b60206040518083038186803b158015612cce57600080fd5b505afa158015612ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d069190613d72565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce690612d3c908890600401613eaa565b60206040518083038186803b158015612d5457600080fd5b505afa158015612d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8c9190613d72565b6008549091506001600160a01b0316633fdddaa286612dab8587612c24565b846040518463ffffffff1660e01b8152600401612dca93929190613f43565b600060405180830381600087803b158015612de457600080fd5b505af1158015612df8573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038816915063a9059cbb90612e2d9088908890600401613f2a565b602060405180830381600087803b158015612e4757600080fd5b505af1158015612e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7f9190613cff565b905080612e9e5760405162461bcd60e51b81526004016106b2906144ef565b505050505050565b610948308383612f2b565b30600090815260016020526040902054612ecb9082612c24565b3060009081526001602052604081209190915554612ee99082612c24565b600090815560405130907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612f2090859061463c565b60405180910390a350565b6001600160a01b038316600090815260016020526040902054612f4e9082612c24565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612f7d90826137d8565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612fcf90859061463c565b60405180910390a3505050565b612fe581613822565b601a5460005411156109e75760405162461bcd60e51b81526004016106b29061442a565b6008546001600160a01b03166130315760405162461bcd60e51b81526004016106b29061432a565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90613062908790600401613eaa565b60206040518083038186803b15801561307a57600080fd5b505afa15801561308e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b29190613d72565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906130e8908890600401613eaa565b60206040518083038186803b15801561310057600080fd5b505afa158015613114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131389190613d72565b90506000856001600160a01b03166323b872dd8630876040518463ffffffff1660e01b815260040161316c93929190613ebe565b602060405180830381600087803b15801561318657600080fd5b505af115801561319a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131be9190613cff565b9050806131dd5760405162461bcd60e51b81526004016106b2906144ef565b6008546001600160a01b0316633fdddaa2876131f986886137d8565b856040518463ffffffff1660e01b815260040161321893929190613f43565b600060405180830381600087803b15801561323257600080fd5b505af1158015613246573d6000803e3d6000fd5b50505050505050505050565b610948823083612f2b565b6008546001600160a01b0316156132865760405162461bcd60e51b81526004016106b290614353565b68056bc75e2d631000008110156132af5760405162461bcd60e51b81526004016106b29061437b565b6b033b2e3c9fd0803ce80000008111156132db5760405162461bcd60e51b81526004016106b290614250565b60095465010000000000900460ff16156132f557601a8190555b6132fe81611100565b613308338261093e565b600760009054906101000a90046001600160a01b03166001600160a01b031663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561335857600080fd5b505af115801561336c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133909190613d1f565b600880546001600160a01b0319166001600160a01b0392831617908190556040805163632c068960e11b81529051919092169163c6580d12916004808301926020929190829003018186803b1580156133e857600080fd5b505afa1580156133fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134209190613d72565b1561343d5760405162461bcd60e51b81526004016106b2906143fc565b60005b6015548110156135ff5760006015828154811061345957fe5b6000918252602082200154601680546001600160a01b039092169350908490811061348057fe5b906000526020600020015490506000600a600201848154811061349f57fe5b60009182526020822001546040516323b872dd60e01b81529092506001600160a01b038516906323b872dd906134dd90339030908890600401613ebe565b602060405180830381600087803b1580156134f757600080fd5b505af115801561350b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352f9190613cff565b90508061354e5760405162461bcd60e51b81526004016106b2906144ef565b60085461356a906001600160a01b038681169116600019613892565b9050806135895760405162461bcd60e51b81526004016106b2906144ef565b600854604051631c9c3ca760e31b81526001600160a01b039091169063e4e1e538906135bd90879087908790600401613f43565b600060405180830381600087803b1580156135d757600080fd5b505af11580156135eb573d6000803e3d6000fd5b505060019096019550613440945050505050565b505b6015541561363b57601580548061361457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055613601565b6008546012546040516334e1990760e01b81526001600160a01b03909216916334e199079161366c9160040161463c565b600060405180830381600087803b15801561368657600080fd5b505af115801561369a573d6000803e3d6000fd5b50506008546040516324dacaa960e11b81526001600160a01b0390911692506349b5955291506136cf90600190600401613f64565b600060405180830381600087803b1580156136e957600080fd5b505af11580156136fd573d6000803e3d6000fd5b505060085460135460405163787dce3d60e01b81526001600160a01b03909216935063787dce3d92506137329160040161463c565b600060405180830381600087803b15801561374c57600080fd5b505af1158015613760573d6000803e3d6000fd5b505060085460145460405163e8d56b8b60e01b81526001600160a01b03928316945063e8d56b8b93506137999290911690600401613eaa565b600060405180830381600087803b1580156137b357600080fd5b505af11580156137c7573d6000803e3d6000fd5b505060006012819055601355505050565b600082820183811015610b115760405162461bcd60e51b81526004016106b290614543565b600080838311613813575050808203600061381b565b505081810360015b9250929050565b3060009081526001602052604090205461383c90826137d8565b306000908152600160205260408120919091555461385a90826137d8565b60009081556040513091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612f2090859061463c565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016138c3929190613ee2565b60206040518083038186803b1580156138db57600080fd5b505afa1580156138ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139139190613d72565b905082811415613927576001915050610b11565b80156139b05760405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061395c908790600090600401613f2a565b602060405180830381600087803b15801561397657600080fd5b505af115801561398a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ae9190613cff565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b3906139de9087908790600401613f2a565b602060405180830381600087803b1580156139f857600080fd5b505af1158015613a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a309190613cff565b95945050505050565b60008083601f840112613a4a578081fd5b50813567ffffffffffffffff811115613a61578182fd5b602083019150836020808302850101111561381b57600080fd5b600082601f830112613a8b578081fd5b8151613a9e613a9982614688565b614661565b818152915060208083019084810181840286018201871015613abf57600080fd5b60005b84811015613ade57815184529282019290820190600101613ac2565b505050505092915050565b600060208284031215613afa578081fd5b8135610b11816146b2565b60008060408385031215613b17578081fd5b8235613b22816146b2565b91506020830135613b32816146b2565b809150509250929050565b600080600060608486031215613b51578081fd5b8335613b5c816146b2565b92506020840135613b6c816146b2565b929592945050506040919091013590565b60008060408385031215613b8f578182fd5b8235613b9a816146b2565b946020939093013593505050565b600080600060608486031215613bbc578283fd5b8335613bc7816146b2565b95602085013595506040909401359392505050565b60006020808385031215613bee578182fd5b825167ffffffffffffffff811115613c04578283fd5b8301601f81018513613c14578283fd5b8051613c22613a9982614688565b8181528381019083850185840285018601891015613c3e578687fd5b8694505b83851015613c69578051613c55816146b2565b835260019490940193918501918501613c42565b50979650505050505050565b60008060008060608587031215613c8a578081fd5b843567ffffffffffffffff811115613ca0578182fd5b613cac87828801613a39565b90989097506020870135966040013595509350505050565b600060208284031215613cd5578081fd5b815167ffffffffffffffff811115613ceb578182fd5b613cf784828501613a7b565b949350505050565b600060208284031215613d10578081fd5b81518015158114610b11578182fd5b600060208284031215613d30578081fd5b8151610b11816146b2565b600060208284031215613d4c578081fd5b813560078110610b11578182fd5b600060208284031215613d6b578081fd5b5035919050565b600060208284031215613d83578081fd5b5051919050565b600080600060408486031215613d9e578283fd5b83359250602084013567ffffffffffffffff811115613dbb578283fd5b613dc786828701613a39565b9497909650939450505050565b60008060408385031215613de6578182fd5b505080516020909101519092909150565b600080600060608486031215613e0b578081fd5b8351925060208401519150604084015167ffffffffffffffff811115613e2f578182fd5b613e3b86828701613a7b565b9150509250925092565b600080600060608486031215613e59578081fd5b505081359360208301359350604090920135919050565b81835260006001600160fb1b03831115613e88578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03959095168552921515602085015260408401919091526060830152608082015260a00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b961515875294151560208701529215156040860152901515606085015215156080840152151560a0830152151560c082015260e00190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b600060018060a01b038916825287602083015260c0604083015261402f60c083018789613e70565b606083019590955250608081019290925260a090910152949350505050565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b03868116825285166020820152604081018490526080606082018190526000906141039083018486613e70565b979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602080835283518082850152825b8181101561416357858101830151858201604001528201614147565b818111156141745783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601c908201527f4552525f43414e4e4f545f4144445f52454d4f56455f544f4b454e5300000000604082015260600190565b6020808252818101527f4552525f494e434f4e53495354454e545f544f4b454e5f54494d455f4c4f434b604082015260600190565b60208082526014908201527311549497d393d517d3d397d5d2125511531254d560621b604082015260600190565b60208082526013908201527208aa4a4be929c92a8bea6aaa0a098b2be9a82b606b1b604082015260600190565b6020808252602c908201527f464358416363657373436f6e74726f6c3a2073656e646572206973206e6f742060408201526b1a5b881dda1a5d195b1a5cdd60a21b606082015260800190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252601c908201527f4552525f4e4f545f434f4e464947555241424c455f5745494748545300000000604082015260600190565b6020808252600f908201526e11549497d393d517d0d49150551151608a1b604082015260600190565b6020808252600e908201526d11549497d254d7d0d4915055115160921b604082015260600190565b60208082526013908201527222a9292fa4a724aa2fa9aaa828262cafa6a4a760691b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526015908201527404552525f43414e4e4f545f4348414e47455f43415605c1b604082015260600190565b6020808252601490820152734552525f4e4f4e5a45524f5f455849545f46454560601b604082015260600190565b60208082526015908201527411549497d0d05417d31253525517d4915050d21151605a1b604082015260600190565b60208082526016908201527522a9292fa821aa27a5a2a72fa120a22fa1a0a62622a960511b604082015260600190565b60208082526015908201527411549497d4115391125391d7d513d2d15397d05111605a1b604082015260600190565b6020808252601b908201527f4552525f52454d4f56455f574954485f4144445f50454e44494e470000000000604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b6020808252601c908201527f4552525f4e4f5f5550444154455f445552494e475f4752414455414c00000000604082015260600190565b600061010082019050835460ff808216151584526145ca60208501828460081c16613ea4565b6145dc60408501828460101c16613ea4565b6145ee60608501828460181c16613ea4565b61460060808501828460201c16613ea4565b61461260a08501828460281c16613ea4565b61462460c08501828460301c16613ea4565b505061462f836146a8565b8260e08301529392505050565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561468057600080fd5b604052919050565b600067ffffffffffffffff82111561469e578081fd5b5060209081020190565b600781106109e757fe5b6001600160a01b03811681146109e757600080fdfe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a26469706673582212204f79656ea2dadc66de91b50d42eda1365ddc31de95bc05f67a3d82c63c80766864736f6c634300060c0033a264697066735822122032a723b4558a3c27854af2ad7d6fed7e80efe39144ab27ef662e85641b40d9ec64736f6c634300060c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000525760003560e01c8063c7154c0a1462000057578063dc19e8421462000079578063e2cce565146200009f578063e8d56b8b14620000b6575b600080fd5b62000061620000cf565b60405162000070919062000780565b60405180910390f35b620000906200008a366004620005b0565b620000de565b60405162000070919062000902565b62000061620000b0366004620005d5565b620000fc565b620000cd620000c7366004620005b0565b62000397565b005b6001546001600160a01b031690565b6001600160a01b031660009081526020819052604090205460ff1690565b600154604051632474521560e21b81526000916001600160a01b0316906391d148549062000151907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759032906004016200090d565b60206040518083038186803b1580156200016a57600080fd5b505afa1580156200017f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a591906200063c565b620001cd5760405162461bcd60e51b8152600401620001c4906200095b565b60405180910390fd5b6002620001de604085018562000a9e565b90501015620002015760405162461bcd60e51b8152600401620001c49062000a72565b62000210604084018462000a9e565b905062000221606085018562000a9e565b905014620002435760405162461bcd60e51b8152600401620001c49062000a0e565b62000252604084018462000a9e565b905062000263608085018562000a9e565b905014620002855760405162461bcd60e51b8152600401620001c49062000924565b600084600260009054906101000a90046001600160a01b03168585604051620002ae906200056c565b620002bd949392919062000794565b604051809103906000f080158015620002da573d6000803e3d6000fd5b506040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055516392eefe9b60e01b81526392eefe9b906200035a90339060040162000780565b600060405180830381600087803b1580156200037557600080fd5b505af11580156200038a573d6000803e3d6000fd5b5092979650505050505050565b600154604051632474521560e21b81526001600160a01b03909116906391d1485490620003eb907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759032906004016200090d565b60206040518083038186803b1580156200040457600080fd5b505afa15801562000419573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043f91906200063c565b6200045e5760405162461bcd60e51b8152600401620001c4906200095b565b6001600160a01b038116620004875760405162461bcd60e51b8152600401620001c49062000a45565b604051632474521560e21b81526001600160a01b038216906391d1485490620004d7907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759032906004016200090d565b60206040518083038186803b158015620004f057600080fd5b505afa15801562000505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200052b91906200063c565b6200054a5760405162461bcd60e51b8152600401620001c490620009b1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6153298062000bad83390190565b80356001600160a01b03811681146200059257600080fd5b92915050565b600060e08284031215620005aa578081fd5b50919050565b600060208284031215620005c2578081fd5b620005ce83836200057a565b9392505050565b60008060006101208486031215620005eb578182fd5b620005f785856200057a565b9250602084013567ffffffffffffffff81111562000613578283fd5b620006218682870162000598565b92505062000633856040860162000598565b90509250925092565b6000602082840312156200064e578081fd5b8151620005ce8162000b9a565b6001600160a01b0316815260200190565b81835260006001600160fb1b0383111562000685578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b8035620006de8162000b9a565b151582526020810135620006f28162000b9a565b151560208301526040810135620007098162000b9a565b151560408301526060810135620007208162000b9a565b151560608301526080810135620007378162000b9a565b151560808301526200074d60a082018262000b43565b6200075c60a0840182620006a1565b506200076c60c082018262000b43565b6200077b60c0840182620006a1565b505050565b6001600160a01b0391909116815260200190565b600061014060018060a01b038088168452602081881681860152826040860152620007c0878862000b52565b925060e084870152620007d961022087018483620006a7565b935050620007ea8188018862000b52565b925061013f19808786030161016088015262000808858584620006a7565b94506200081960408a018a62000af8565b9450915080878603016101808801528462000835858762000aef565b929550869290505b84831015620008725783860162000860826200085a838a6200057a565b6200065b565b9150809650506001830192506200083d565b6200088160608b018b62000af8565b9650945081888203016101a08901526200089d8187876200066c565b955050620008af60808a018a62000af8565b9450925080878603016101c08801525050620008cd8383836200066c565b60a08801356101e087015260c08801356102008701529350620008f992505060608401905084620006d1565b95945050505050565b901515815260200190565b9182526001600160a01b0316602082015260400190565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b60208082526036908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616460408201527536b4b7103a37903430bb32903832b936b4b9b9b4b7b760511b606082015260800190565b60208082526039908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616460408201527f6d696e206f66206e65772061636365737320636f6e74726f6c00000000000000606082015260800190565b6020808252601b908201527f4552525f53544152545f42414c414e4345535f4d49534d415443480000000000604082015260600190565b6020808252601390820152724552525f494e56414c49445f4144445245535360681b604082015260600190565b6020808252601290820152714552525f544f4f5f4645575f544f4b454e5360701b604082015260600190565b6000808335601e1984360301811262000ab5578283fd5b83018035915067ffffffffffffffff82111562000ad0578283fd5b602090810192508102360382131562000ae857600080fd5b9250929050565b90815260200190565b6000808335601e1984360301811262000b0f578283fd5b830160208101925035905067ffffffffffffffff81111562000b3057600080fd5b60208102360383131562000ae857600080fd5b60008235620005ce8162000b9a565b6000808335601e1984360301811262000b69578283fd5b830160208101925035905067ffffffffffffffff81111562000b8a57600080fd5b80360383131562000ae857600080fd5b801515811462000ba957600080fd5b5056fe60806040523480156200001157600080fd5b50604051620053293803806200532983398101604081905262000034916200086d565b815160208084015182519091620000519160039185019062000499565b5080516200006790600490602084019062000499565b5050600580546001600160a01b03191633179055506001600655620f4240670de0b6b3a7640000048260a001511015620000be5760405162461bcd60e51b8152600401620000b59062000b47565b60405180910390fd5b670de0b6b3a76400008260a001511115620000ed5760405162461bcd60e51b8152600401620000b59062000b47565b670de0b6b3a76400008260c0015111156200011c5760405162461bcd60e51b8152600401620000b59062000a50565b81604001515182606001515114620001485760405162461bcd60e51b8152600401620000b59062000a87565b81604001515182608001515114620001745760405162461bcd60e51b8152600401620000b59062000a19565b600282604001515110156200019d5760405162461bcd60e51b8152600401620000b59062000b1b565b60088260400151511115620001c65760405162461bcd60e51b8152600401620000b59062000b7e565b60408083015190516377d4434960e01b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__916377d4434991620002039190600401620009ca565b60006040518083038186803b1580156200021c57600080fd5b505af415801562000231573d6000803e3d6000fd5b5050600780546001600160a01b0319166001600160a01b03881617905550508051600980546020808501516040808701516060880151608089015160a08a015160c08b015160ff199098169915159990991761ff001916610100951515959095029490941762ff0000191662010000921515929092029190911763ff00000019166301000000911515919091021760ff60201b1916640100000000921515929092029190911760ff60281b191665010000000000951515959095029490941760ff60301b191666010000000000009215159290920291909117909155908301518051620003239260159201906200051e565b50606082015180516200033f9160169160209091019062000584565b5060a082015160125560c08201516013556007546040805163638aa60560e11b815290516001600160a01b039092169163c7154c0a91600480820192602092909190829003018186803b1580156200039657600080fd5b505afa158015620003ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d1919062000848565b601480546001600160a01b0319166001600160a01b039290921691909117905562015f906017556101f4601855608082015180516200041991600c9160209091019062000584565b506000600a55600019601a5562000430836200043a565b5050505062000bfc565b62000450816200049360201b62002c1e1760201c565b6200046f5760405162461bcd60e51b8152600401620000b59062000abe565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004dc57805160ff19168380011785556200050c565b828001600101855582156200050c579182015b828111156200050c578251825591602001919060010190620004ef565b506200051a929150620005c1565b5090565b82805482825590600052602060002090810192821562000576579160200282015b828111156200057657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200053f565b506200051a929150620005d8565b8280548282559060005260206000209081019282156200050c57916020028201828111156200050c578251825591602001919060010190620004ef565b5b808211156200051a5760008155600101620005c2565b5b808211156200051a5780546001600160a01b0319168155600101620005d9565b80516001600160a01b03811681146200061157600080fd5b92915050565b600082601f83011262000628578081fd5b81516200063f620006398262000bdc565b62000bb5565b8181529150602080830190848101818402860182018710156200066157600080fd5b60005b848110156200068c57620006798883620005f9565b8452928201929082019060010162000664565b505050505092915050565b600082601f830112620006a8578081fd5b8151620006b9620006398262000bdc565b818152915060208083019084810181840286018201871015620006db57600080fd5b60005b848110156200068c57815184529282019290820190600101620006de565b805180151581146200061157600080fd5b600082601f8301126200071e578081fd5b81516001600160401b0381111562000734578182fd5b60206200074a601f8301601f1916820162000bb5565b925081835284818386010111156200076157600080fd5b60005b828110156200078157848101820151848201830152810162000764565b82811115620007935760008284860101525b50505092915050565b600060e08284031215620007ae578081fd5b620007ba60e062000bb5565b9050620007c88383620006fc565b8152620007d98360208401620006fc565b6020820152620007ed8360408401620006fc565b6040820152620008018360608401620006fc565b6060820152620008158360808401620006fc565b6080820152620008298360a08401620006fc565b60a08201526200083d8360c08401620006fc565b60c082015292915050565b6000602082840312156200085a578081fd5b620008668383620005f9565b9392505050565b600080600080610140858703121562000884578283fd5b620008908686620005f9565b9350620008a18660208701620005f9565b60408601519093506001600160401b0380821115620008be578384fd5b9086019060e08289031215620008d2578384fd5b620008de60e062000bb5565b825182811115620008ed578586fd5b620008fb8a8286016200070d565b82525060208301518281111562000910578586fd5b6200091e8a8286016200070d565b60208301525060408301518281111562000936578586fd5b620009448a82860162000617565b6040830152506060830151828111156200095c578586fd5b6200096a8a82860162000697565b60608301525060808301518281111562000982578586fd5b620009908a82860162000697565b60808301525060a083015160a082015260c083015160c0820152809450505050620009bf86606087016200079c565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101562000a0d5783516001600160a01b031683529284019291840191600101620009e6565b50909695505050505050565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b60208082526018908201527f4552525f494e56414c49445f50524f544f434f4c5f4645450000000000000000604082015260600190565b6020808252601b908201527f4552525f53544152545f42414c414e4345535f4d49534d415443480000000000604082015260600190565b60208082526036908201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e746160408201527f74696f6e206973206e6f74206120636f6e747261637400000000000000000000606082015260800190565b6020808252601290820152714552525f544f4f5f4645575f544f4b454e5360701b604082015260600190565b60208082526014908201527f4552525f494e56414c49445f535741505f464545000000000000000000000000604082015260600190565b60208082526013908201527f4552525f544f4f5f4d414e595f544f4b454e5300000000000000000000000000604082015260600190565b6040518181016001600160401b038111828210171562000bd457600080fd5b604052919050565b60006001600160401b0382111562000bf2578081fd5b5060209081020190565b61471d8062000c0c6000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80636d06dfa011610167578063a9059cbb116100ce578063d73dd62311610087578063d73dd62314610586578063dd62ed3e14610599578063e211b875146105ac578063e7f1a554146105b4578063e854f53d146105bc578063f226b528146105c4576102a0565b8063a9059cbb14610524578063b02f0b7314610537578063b64ef17b1461054a578063c275d81b14610552578063c3391d271461055a578063c42bd05a1461056d576102a0565b80639776e94b116101205780639776e94b146104d6578063980e8db6146104e95780639a82417e146105045780639d829c2b1461050c578063a3f4df7e14610514578063a835a0de1461051c576102a0565b80636d06dfa01461047a57806370a082311461048d57806374983a0d146104a05780638259e6a0146104a857806392eefe9b146104bb57806395d89b41146104ce576102a0565b8063313ce5671161020b5780634f69c0d4116101c45780634f69c0d41461040557806355c32a23146104185780635a8342d81461042b5780635db34277146104415780635fa7b584146104545780636618846314610467576102a0565b8063313ce5671461039e57806337c6f4d9146103a657806346ab38f1146103b957806347786d37146103cc5780634ba57882146103df5780634c20d209146103f2576102a0565b806318160ddd1161025d57806318160ddd14610340578063220eb7601461034857806323b872dd1461035b578063246bc19b1461036e5780632e0f2625146103815780633018205f14610396576102a0565b806302c96748146102b257806306fdde03146102db578063095dcccc146102f0578063095ea7b3146103035780630a165940146103235780630ce2792514610338575b6102b06102ab6105cc565b6105f1565b005b6102c56102c0366004613ba8565b610615565b6040516102d2919061463c565b60405180910390f35b6102e3610889565b6040516102d29190614137565b6102b06102fe366004613b7d565b61091f565b610316610311366004613b7d565b61094c565b6040516102d29190613f64565b61032b6109a4565b6040516102d29190613eaa565b6102c56109b3565b6102c56109b9565b6102b0610356366004613d5a565b6109bf565b610316610369366004613b3d565b6109ea565b6102b061037c366004613c75565b610b18565b610389610cac565b6040516102d29190614653565b61032b610cb1565b610389610cc0565b6103166103b4366004613d3b565b610cc5565b6102c56103c7366004613ba8565b610d58565b6102b06103da366004613d5a565b610fb3565b6102b06103ed366004613d5a565b6110e1565b6102b0610400366004613ba8565b611109565b6102b0610413366004613d8a565b61132a565b6102b0610426366004613b7d565b6117d3565b6104336117fc565b6040516102d2929190614645565b6102c561044f366004613ba8565b611805565b6102b0610462366004613ae9565b611a92565b610316610475366004613b7d565b611c39565b6102c5610488366004613ba8565b611d13565b6102c561049b366004613ae9565b611fa0565b61032b611fbb565b6102b06104b6366004613d5a565b611fd3565b6102b06104c9366004613ae9565b612070565b6102e361211c565b6102b06104e4366004613b7d565b61217d565b6104f16122fc565b6040516102d29796959493929190613f6f565b61032b612346565b61032b61235e565b6102e3612376565b6102c56123a5565b610316610532366004613b7d565b6123ab565b6102b0610545366004613d8a565b6123e7565b61032b612817565b6102b0612826565b6102b0610568366004613e45565b612985565b610575612a4e565b6040516102d2959493929190613efc565b610316610594366004613b7d565b612a75565b6102c56105a7366004613b05565b612ae9565b6102b0612b14565b6102c5612c0b565b6102c5612c11565b6102c5612c17565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610610573d6000f35b3d6000fd5b601454604051636c9b2a3f60e11b81526000916001600160a01b03169063d936547e90610646903290600401613eaa565b60206040518083038186803b15801561065e57600080fd5b505afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190613cff565b6106bb5760405162461bcd60e51b81526004016106b29061427d565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516106ed929190613fa7565b60405180910390a2600260065414156107185760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b03166107455760405162461bcd60e51b81526004016106b29061432a565b60085460405163724a2d5360e01b8152600091829173__$e9561d504b82fb1c7a2b5ba864c93772fd$__9163724a2d53916107969130916001600160a01b03909116908b908b908b9060040161409b565b604080518083038186803b1580156107ad57600080fd5b505af41580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190613dd4565b9150915080925060006107f88484612c24565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e98860405161083d919061463c565b60405180910390a361084f33856117f2565b610858816109de565b60075461086e906001600160a01b03168461093e565b610879873388612c5d565b5050505b60016006559392505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109155780601f106108ea57610100808354040283529160200191610915565b820191906000526020600020905b8154815290600101906020018083116108f857829003601f168201915b5050505050905090565b33301461093e5760405162461bcd60e51b81526004016106b29061418a565b6109488282612ea6565b5050565b3360008181526002602090815260408083206001600160a01b038716808552925280832085905551919290916000805160206146c88339815191529061099390869061463c565b60405180910390a350600192915050565b6007546001600160a01b031681565b601a5481565b60005490565b3330146109de5760405162461bcd60e51b81526004016106b29061418a565b6109e781612eb1565b50565b60006001600160a01b038316610a125760405162461bcd60e51b81526004016106b2906142c9565b336001600160a01b0385161480610a4c57506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610a685760405162461bcd60e51b81526004016106b290614459565b610a73848484612f2b565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610aa957506000198114155b15610b0b57610ab88184612c24565b6001600160a01b0386811660009081526002602090815260408083203380855292529182902084905590519187169290916000805160206146c883398151915291610b029161463c565b60405180910390a35b60019150505b9392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610b4a929190613fa7565b60405180910390a260026006541415610b755760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b03163314610ba45760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b0316610bcc5760405162461bcd60e51b81526004016106b29061432a565b60095462010000900460ff16610bf45760405162461bcd60e51b81526004016106b2906142f3565b600e54600160a01b900460ff1615610c1e5760405162461bcd60e51b81526004016106b290614489565b6008546017546040516304ee2fc960e21b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__926313b8bf2492610c71926001600160a01b0390921691600a918a918a918a918a9190600401614007565b60006040518083038186803b158015610c8957600080fd5b505af4158015610c9d573d6000803e3d6000fd5b50506001600655505050505050565b601281565b6005546001600160a01b031690565b601290565b6040516322c1aa2560e11b815260009073__$65cfd2d5529dc81e7927c1d303488554ec$__90634583544a90610d029060099086906004016145a4565b60206040518083038186803b158015610d1a57600080fd5b505af4158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190613cff565b92915050565b601454604051636c9b2a3f60e11b81526000916001600160a01b03169063d936547e90610d89903290600401613eaa565b60206040518083038186803b158015610da157600080fd5b505afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd99190613cff565b610df55760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610e27929190613fa7565b60405180910390a260026006541415610e525760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b0316610e7f5760405162461bcd60e51b81526004016106b29061432a565b600854604051636a82d4a760e11b8152600091829173__$e9561d504b82fb1c7a2b5ba864c93772fd$__9163d505a94e91610ed09130916001600160a01b03909116908b908b908b9060040161409b565b604080518083038186803b158015610ee757600080fd5b505af4158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f9190613dd4565b915091508092506000610f328684612c24565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e986604051610f77919061463c565b60405180910390a3610f8933876117f2565b610f92816109de565b600754610fa8906001600160a01b03168461093e565b610879873386612c5d565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610fe5929190613fa7565b60405180910390a2600260065414156110105760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b031661103d5760405162461bcd60e51b81526004016106b29061432a565b6005546001600160a01b031633146110675760405162461bcd60e51b81526004016106b29061418a565b60095465010000000000900460ff166110925760405162461bcd60e51b81526004016106b2906143cd565b336001600160a01b03167f6bc200110c7794738d401810b22ef824a2044a8ccb022d4ad8769840370331f5601a54836040516110cf929190614645565b60405180910390a2601a556001600655565b3330146111005760405162461bcd60e51b81526004016106b29061418a565b6109e781612fdc565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161113b929190613fa7565b60405180910390a2600260065414156111665760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b031633146111955760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b03166111bd5760405162461bcd60e51b81526004016106b29061432a565b6009546301000000900460ff166111e65760405162461bcd60e51b81526004016106b2906141b6565b600a54156112065760405162461bcd60e51b81526004016106b29061456d565b604051630e0d789b60e11b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__90631c1af1369061123d908690600401613eaa565b60006040518083038186803b15801561125557600080fd5b505af4158015611269573d6000803e3d6000fd5b50506040513392503091506001600160a01b038616907f33b043686b9408a355896fe90b2f8ecc86a41d87d1554ef65a739948b4f23e2790600090a460085460405163b489ec1960e01b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__9163b489ec19916112f0916001600160a01b031690879087908790600e90600401613fd6565b60006040518083038186803b15801561130857600080fd5b505af415801561131c573d6000803e3d6000fd5b505060016006555050505050565b601454604051636c9b2a3f60e11b81526001600160a01b039091169063d936547e9061135a903290600401613eaa565b60206040518083038186803b15801561137257600080fd5b505afa158015611386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113aa9190613cff565b6113c65760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516113f8929190613fa7565b60405180910390a2600260065414156114235760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b03166114505760405162461bcd60e51b81526004016106b29061432a565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b15801561149557600080fd5b505afa1580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd9190613cff565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b59552906114ff90600090600401613f64565b600060405180830381600087803b15801561151957600080fd5b505af115801561152d573d6000803e3d6000fd5b5050600954640100000000900460ff1615915081905061155c57503360009081526019602052604090205460ff165b8061157657503260009081526019602052604090205460ff165b6115925760405162461bcd60e51b81526004016106b290614222565b60085460405163a1925f1d60e01b815260609173__$e9561d504b82fb1c7a2b5ba864c93772fd$__9163a1925f1d916115df9130916001600160a01b0316908a908a908a906004016140cf565b60006040518083038186803b1580156115f757600080fd5b505af415801561160b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116339190810190613cc4565b90506060600860009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561168557600080fd5b505afa158015611699573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c19190810190613bdc565b905060005b815181101561175f5760008282815181106116dd57fe5b6020026020010151905060008483815181106116f557fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7283604051611742919061463c565b60405180910390a3611755823383613009565b50506001016116c6565b5061176986611100565b611773338761093e565b50506008546040516324dacaa960e11b81526001600160a01b03909116906349b59552906117a5908490600401613f64565b600060405180830381600087803b1580156117bf57600080fd5b505af1158015610c9d573d6000803e3d6000fd5b3330146117f25760405162461bcd60e51b81526004016106b29061418a565b6109488282613252565b600a54600b5482565b601454604051636c9b2a3f60e11b81526000916001600160a01b03169063d936547e90611836903290600401613eaa565b60206040518083038186803b15801561184e57600080fd5b505afa158015611862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118869190613cff565b6118a25760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516118d4929190613fa7565b60405180910390a2600260065414156118ff5760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b031661192c5760405162461bcd60e51b81526004016106b29061432a565b600954640100000000900460ff16158061195557503360009081526019602052604090205460ff165b8061196f57503260009081526019602052604090205460ff165b61198b5760405162461bcd60e51b81526004016106b290614222565b60085460405163df90de0b60e01b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__9163df90de0b916119d79130916001600160a01b039091169089908990899060040161409b565b60206040518083038186803b1580156119ef57600080fd5b505af4158015611a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a279190613d72565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7285604051611a6c919061463c565b60405180910390a3611a7d81611100565b611a87338261093e565b61087d843385613009565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611ac4929190613fa7565b60405180910390a260026006541415611aef5760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b03163314611b1e5760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b0316611b465760405162461bcd60e51b81526004016106b29061432a565b6009546301000000900460ff16611b6f5760405162461bcd60e51b81526004016106b2906141b6565b600e54600160a01b900460ff1615611b995760405162461bcd60e51b81526004016106b2906144b8565b600a5415611bb95760405162461bcd60e51b81526004016106b29061456d565b600854604051630970e47f60e01b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__91630970e47f91611c019130916001600160a01b0390911690869060040161404e565b60006040518083038186803b158015611c1957600080fd5b505af4158015611c2d573d6000803e3d6000fd5b50506001600655505050565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310611c8d573360009081526002602090815260408083206001600160a01b0388168452909152812055611cbc565b611c978184612c24565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529252918290205491519092916000805160206146c883398151915291611d01919061463c565b60405180910390a35060019392505050565b601454604051636c9b2a3f60e11b81526000916001600160a01b03169063d936547e90611d44903290600401613eaa565b60206040518083038186803b158015611d5c57600080fd5b505afa158015611d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d949190613cff565b611db05760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611de2929190613fa7565b60405180910390a260026006541415611e0d5760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b0316611e3a5760405162461bcd60e51b81526004016106b29061432a565b600954640100000000900460ff161580611e6357503360009081526019602052604090205460ff165b80611e7d57503260009081526019602052604090205460ff165b611e995760405162461bcd60e51b81526004016106b290614222565b600854604051636a6dc6e760e01b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__91636a6dc6e791611ee59130916001600160a01b039091169089908990899060040161409b565b60206040518083038186803b158015611efd57600080fd5b505af4158015611f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f359190613d72565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7283604051611f7a919061463c565b60405180910390a3611f8b83611100565b611f95338461093e565b61087d843383613009565b6001600160a01b031660009081526001602052604090205490565b73__$65cfd2d5529dc81e7927c1d303488554ec$__90565b6005546001600160a01b03163314611ffd5760405162461bcd60e51b81526004016106b29061418a565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161202f929190613fa7565b60405180910390a26002600654141561205a5760405162461bcd60e51b81526004016106b2906143a8565b60026006556120688161325d565b506001600655565b6005546001600160a01b0316331461209a5760405162461bcd60e51b81526004016106b29061418a565b6001600160a01b0381166120c05760405162461bcd60e51b81526004016106b2906142c9565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109155780601f106108ea57610100808354040283529160200191610915565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516121af929190613fa7565b60405180910390a2600260065414156121da5760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b031633146122095760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b03166122315760405162461bcd60e51b81526004016106b29061432a565b60095462010000900460ff166122595760405162461bcd60e51b81526004016106b2906142f3565b600a54156122795760405162461bcd60e51b81526004016106b29061456d565b600854604051633d512a8760e21b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__9163f544aa1c916122c39130916001600160a01b039091169087908790600401614071565b60006040518083038186803b1580156122db57600080fd5b505af41580156122ef573d6000803e3d6000fd5b5050600160065550505050565b60095460ff80821691610100810482169162010000820481169163010000008104821691640100000000820481169165010000000000810482169166010000000000009091041687565b73__$6550267eda8640387f6ec1d8d067b7c635$__90565b73__$e9561d504b82fb1c7a2b5ba864c93772fd$__90565b6040518060400160405280601381526020017210985b185b98d95c8814db585c9d08141bdbdb606a1b81525081565b6101f481565b60006001600160a01b0383166123d35760405162461bcd60e51b81526004016106b2906142c9565b6123de338484612f2b565b50600192915050565b601454604051636c9b2a3f60e11b81526001600160a01b039091169063d936547e90612417903290600401613eaa565b60206040518083038186803b15801561242f57600080fd5b505afa158015612443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124679190613cff565b6124835760405162461bcd60e51b81526004016106b29061427d565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516124b5929190613fa7565b60405180910390a2600260065414156124e05760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b031661250d5760405162461bcd60e51b81526004016106b29061432a565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b15801561255257600080fd5b505afa158015612566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258a9190613cff565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b59552906125bc90600090600401613f64565b600060405180830381600087803b1580156125d657600080fd5b505af11580156125ea573d6000803e3d6000fd5b505060085460405163151c70f960e21b81526000935083925060609173__$e9561d504b82fb1c7a2b5ba864c93772fd$__91635471c3e4916126409130916001600160a01b0316908c908c908c906004016140cf565b60006040518083038186803b15801561265857600080fd5b505af415801561266c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126949190810190613df7565b9250925092506126a433886117f2565b6007546126ba906001600160a01b03168461093e565b6126c3826109de565b6008546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b15801561270857600080fd5b505afa15801561271c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127449190810190613bdc565b905060005b81518110156127e257600082828151811061276057fe5b60200260200101519050600084838151811061277857fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e9836040516127c5919061463c565b60405180910390a36127d8823383612c5d565b5050600101612749565b50506008546040516324dacaa960e11b81526001600160a01b0390911693506349b5955292506117a591508490600401613f64565b6008546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612858929190613fa7565b60405180910390a2600260065414156128835760405162461bcd60e51b81526004016106b2906143a8565b60026006556005546001600160a01b031633146128b25760405162461bcd60e51b81526004016106b29061418a565b6008546001600160a01b03166128da5760405162461bcd60e51b81526004016106b29061432a565b6009546301000000900460ff166129035760405162461bcd60e51b81526004016106b2906141b6565b600854601854604051633be961dd60e21b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__9263efa587749261294e9230926001600160a01b03169190600e9060040161410e565b60006040518083038186803b15801561296657600080fd5b505af415801561297a573d6000803e3d6000fd5b505060016006555050565b6005546001600160a01b031633146129af5760405162461bcd60e51b81526004016106b29061418a565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516129e1929190613fa7565b60405180910390a260026006541415612a0c5760405162461bcd60e51b81526004016106b2906143a8565b600260065580821015612a315760405162461bcd60e51b81526004016106b2906141ed565b60178290556018819055612a448361325d565b5050600160065550565b600e54600f546010546011546001600160a01b03841693600160a01b900460ff1692919085565b3360009081526002602090815260408083206001600160a01b0386168452909152812054612aa390836137d8565b3360008181526002602090815260408083206001600160a01b038916808552925291829020849055905190926000805160206146c883398151915291610993919061463c565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612b46929190613fa7565b60405180910390a260026006541415612b715760405162461bcd60e51b81526004016106b2906143a8565b60026006556008546001600160a01b0316612b9e5760405162461bcd60e51b81526004016106b29061432a565b60095462010000900460ff16612bc65760405162461bcd60e51b81526004016106b2906142f3565b6008546040516382495b4560e01b815273__$e9561d504b82fb1c7a2b5ba864c93772fd$__916382495b459161294e916001600160a01b031690600a90600401613f2a565b60185481565b60175481565b62015f9081565b3b151590565b6000806000612c3385856137fd565b915091508015612c555760405162461bcd60e51b81526004016106b290614518565b509392505050565b6008546001600160a01b0316612c855760405162461bcd60e51b81526004016106b29061432a565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90612cb6908790600401613eaa565b60206040518083038186803b158015612cce57600080fd5b505afa158015612ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d069190613d72565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce690612d3c908890600401613eaa565b60206040518083038186803b158015612d5457600080fd5b505afa158015612d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8c9190613d72565b6008549091506001600160a01b0316633fdddaa286612dab8587612c24565b846040518463ffffffff1660e01b8152600401612dca93929190613f43565b600060405180830381600087803b158015612de457600080fd5b505af1158015612df8573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038816915063a9059cbb90612e2d9088908890600401613f2a565b602060405180830381600087803b158015612e4757600080fd5b505af1158015612e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7f9190613cff565b905080612e9e5760405162461bcd60e51b81526004016106b2906144ef565b505050505050565b610948308383612f2b565b30600090815260016020526040902054612ecb9082612c24565b3060009081526001602052604081209190915554612ee99082612c24565b600090815560405130907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612f2090859061463c565b60405180910390a350565b6001600160a01b038316600090815260016020526040902054612f4e9082612c24565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612f7d90826137d8565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612fcf90859061463c565b60405180910390a3505050565b612fe581613822565b601a5460005411156109e75760405162461bcd60e51b81526004016106b29061442a565b6008546001600160a01b03166130315760405162461bcd60e51b81526004016106b29061432a565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90613062908790600401613eaa565b60206040518083038186803b15801561307a57600080fd5b505afa15801561308e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b29190613d72565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906130e8908890600401613eaa565b60206040518083038186803b15801561310057600080fd5b505afa158015613114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131389190613d72565b90506000856001600160a01b03166323b872dd8630876040518463ffffffff1660e01b815260040161316c93929190613ebe565b602060405180830381600087803b15801561318657600080fd5b505af115801561319a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131be9190613cff565b9050806131dd5760405162461bcd60e51b81526004016106b2906144ef565b6008546001600160a01b0316633fdddaa2876131f986886137d8565b856040518463ffffffff1660e01b815260040161321893929190613f43565b600060405180830381600087803b15801561323257600080fd5b505af1158015613246573d6000803e3d6000fd5b50505050505050505050565b610948823083612f2b565b6008546001600160a01b0316156132865760405162461bcd60e51b81526004016106b290614353565b68056bc75e2d631000008110156132af5760405162461bcd60e51b81526004016106b29061437b565b6b033b2e3c9fd0803ce80000008111156132db5760405162461bcd60e51b81526004016106b290614250565b60095465010000000000900460ff16156132f557601a8190555b6132fe81611100565b613308338261093e565b600760009054906101000a90046001600160a01b03166001600160a01b031663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561335857600080fd5b505af115801561336c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133909190613d1f565b600880546001600160a01b0319166001600160a01b0392831617908190556040805163632c068960e11b81529051919092169163c6580d12916004808301926020929190829003018186803b1580156133e857600080fd5b505afa1580156133fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134209190613d72565b1561343d5760405162461bcd60e51b81526004016106b2906143fc565b60005b6015548110156135ff5760006015828154811061345957fe5b6000918252602082200154601680546001600160a01b039092169350908490811061348057fe5b906000526020600020015490506000600a600201848154811061349f57fe5b60009182526020822001546040516323b872dd60e01b81529092506001600160a01b038516906323b872dd906134dd90339030908890600401613ebe565b602060405180830381600087803b1580156134f757600080fd5b505af115801561350b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352f9190613cff565b90508061354e5760405162461bcd60e51b81526004016106b2906144ef565b60085461356a906001600160a01b038681169116600019613892565b9050806135895760405162461bcd60e51b81526004016106b2906144ef565b600854604051631c9c3ca760e31b81526001600160a01b039091169063e4e1e538906135bd90879087908790600401613f43565b600060405180830381600087803b1580156135d757600080fd5b505af11580156135eb573d6000803e3d6000fd5b505060019096019550613440945050505050565b505b6015541561363b57601580548061361457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055613601565b6008546012546040516334e1990760e01b81526001600160a01b03909216916334e199079161366c9160040161463c565b600060405180830381600087803b15801561368657600080fd5b505af115801561369a573d6000803e3d6000fd5b50506008546040516324dacaa960e11b81526001600160a01b0390911692506349b5955291506136cf90600190600401613f64565b600060405180830381600087803b1580156136e957600080fd5b505af11580156136fd573d6000803e3d6000fd5b505060085460135460405163787dce3d60e01b81526001600160a01b03909216935063787dce3d92506137329160040161463c565b600060405180830381600087803b15801561374c57600080fd5b505af1158015613760573d6000803e3d6000fd5b505060085460145460405163e8d56b8b60e01b81526001600160a01b03928316945063e8d56b8b93506137999290911690600401613eaa565b600060405180830381600087803b1580156137b357600080fd5b505af11580156137c7573d6000803e3d6000fd5b505060006012819055601355505050565b600082820183811015610b115760405162461bcd60e51b81526004016106b290614543565b600080838311613813575050808203600061381b565b505081810360015b9250929050565b3060009081526001602052604090205461383c90826137d8565b306000908152600160205260408120919091555461385a90826137d8565b60009081556040513091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612f2090859061463c565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016138c3929190613ee2565b60206040518083038186803b1580156138db57600080fd5b505afa1580156138ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139139190613d72565b905082811415613927576001915050610b11565b80156139b05760405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061395c908790600090600401613f2a565b602060405180830381600087803b15801561397657600080fd5b505af115801561398a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ae9190613cff565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b3906139de9087908790600401613f2a565b602060405180830381600087803b1580156139f857600080fd5b505af1158015613a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a309190613cff565b95945050505050565b60008083601f840112613a4a578081fd5b50813567ffffffffffffffff811115613a61578182fd5b602083019150836020808302850101111561381b57600080fd5b600082601f830112613a8b578081fd5b8151613a9e613a9982614688565b614661565b818152915060208083019084810181840286018201871015613abf57600080fd5b60005b84811015613ade57815184529282019290820190600101613ac2565b505050505092915050565b600060208284031215613afa578081fd5b8135610b11816146b2565b60008060408385031215613b17578081fd5b8235613b22816146b2565b91506020830135613b32816146b2565b809150509250929050565b600080600060608486031215613b51578081fd5b8335613b5c816146b2565b92506020840135613b6c816146b2565b929592945050506040919091013590565b60008060408385031215613b8f578182fd5b8235613b9a816146b2565b946020939093013593505050565b600080600060608486031215613bbc578283fd5b8335613bc7816146b2565b95602085013595506040909401359392505050565b60006020808385031215613bee578182fd5b825167ffffffffffffffff811115613c04578283fd5b8301601f81018513613c14578283fd5b8051613c22613a9982614688565b8181528381019083850185840285018601891015613c3e578687fd5b8694505b83851015613c69578051613c55816146b2565b835260019490940193918501918501613c42565b50979650505050505050565b60008060008060608587031215613c8a578081fd5b843567ffffffffffffffff811115613ca0578182fd5b613cac87828801613a39565b90989097506020870135966040013595509350505050565b600060208284031215613cd5578081fd5b815167ffffffffffffffff811115613ceb578182fd5b613cf784828501613a7b565b949350505050565b600060208284031215613d10578081fd5b81518015158114610b11578182fd5b600060208284031215613d30578081fd5b8151610b11816146b2565b600060208284031215613d4c578081fd5b813560078110610b11578182fd5b600060208284031215613d6b578081fd5b5035919050565b600060208284031215613d83578081fd5b5051919050565b600080600060408486031215613d9e578283fd5b83359250602084013567ffffffffffffffff811115613dbb578283fd5b613dc786828701613a39565b9497909650939450505050565b60008060408385031215613de6578182fd5b505080516020909101519092909150565b600080600060608486031215613e0b578081fd5b8351925060208401519150604084015167ffffffffffffffff811115613e2f578182fd5b613e3b86828701613a7b565b9150509250925092565b600080600060608486031215613e59578081fd5b505081359360208301359350604090920135919050565b81835260006001600160fb1b03831115613e88578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03959095168552921515602085015260408401919091526060830152608082015260a00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b961515875294151560208701529215156040860152901515606085015215156080840152151560a0830152151560c082015260e00190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b600060018060a01b038916825287602083015260c0604083015261402f60c083018789613e70565b606083019590955250608081019290925260a090910152949350505050565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b03868116825285166020820152604081018490526080606082018190526000906141039083018486613e70565b979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602080835283518082850152825b8181101561416357858101830151858201604001528201614147565b818111156141745783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601c908201527f4552525f43414e4e4f545f4144445f52454d4f56455f544f4b454e5300000000604082015260600190565b6020808252818101527f4552525f494e434f4e53495354454e545f544f4b454e5f54494d455f4c4f434b604082015260600190565b60208082526014908201527311549497d393d517d3d397d5d2125511531254d560621b604082015260600190565b60208082526013908201527208aa4a4be929c92a8bea6aaa0a098b2be9a82b606b1b604082015260600190565b6020808252602c908201527f464358416363657373436f6e74726f6c3a2073656e646572206973206e6f742060408201526b1a5b881dda1a5d195b1a5cdd60a21b606082015260800190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252601c908201527f4552525f4e4f545f434f4e464947555241424c455f5745494748545300000000604082015260600190565b6020808252600f908201526e11549497d393d517d0d49150551151608a1b604082015260600190565b6020808252600e908201526d11549497d254d7d0d4915055115160921b604082015260600190565b60208082526013908201527222a9292fa4a724aa2fa9aaa828262cafa6a4a760691b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526015908201527404552525f43414e4e4f545f4348414e47455f43415605c1b604082015260600190565b6020808252601490820152734552525f4e4f4e5a45524f5f455849545f46454560601b604082015260600190565b60208082526015908201527411549497d0d05417d31253525517d4915050d21151605a1b604082015260600190565b60208082526016908201527522a9292fa821aa27a5a2a72fa120a22fa1a0a62622a960511b604082015260600190565b60208082526015908201527411549497d4115391125391d7d513d2d15397d05111605a1b604082015260600190565b6020808252601b908201527f4552525f52454d4f56455f574954485f4144445f50454e44494e470000000000604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b6020808252601c908201527f4552525f4e4f5f5550444154455f445552494e475f4752414455414c00000000604082015260600190565b600061010082019050835460ff808216151584526145ca60208501828460081c16613ea4565b6145dc60408501828460101c16613ea4565b6145ee60608501828460181c16613ea4565b61460060808501828460201c16613ea4565b61461260a08501828460281c16613ea4565b61462460c08501828460301c16613ea4565b505061462f836146a8565b8260e08301529392505050565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561468057600080fd5b604052919050565b600067ffffffffffffffff82111561469e578081fd5b5060209081020190565b600781106109e757fe5b6001600160a01b03811681146109e757600080fdfe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a26469706673582212204f79656ea2dadc66de91b50d42eda1365ddc31de95bc05f67a3d82c63c80766864736f6c634300060c0033a264697066735822122032a723b4558a3c27854af2ad7d6fed7e80efe39144ab27ef662e85641b40d9ec64736f6c634300060c0033",
  "libraries": {
    "BalancerSafeMath": "0x89C3101E82f2B71ad8f3a23127752709BE35b67D",
    "RightsManager": "0x9Fd5e70828D2157990A7ccB8E7AAe625fAB84de2",
    "SmartPoolManager": "0x00098026682c3B24f9aD5e60311Ce7A0cb753b44"
  },
  "devdoc": {
    "author": "Balancer Labs",
    "details": "Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)",
    "kind": "dev",
    "methods": {
      "isCrp(address)": {
        "params": {
          "addr": "- address to check"
        },
        "returns": {
          "_0": "boolean indicating whether it is a CRP"
        }
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256),(bool,bool,bool,bool,bool,bool,bool))": {
        "details": "emits a LogNewCRP event",
        "params": {
          "factoryAddress": "- the BFactory instance used to create the underlying pool",
          "poolParams": "- struct containing the names, tokens, weights, balances, and swap fee",
          "rights": "- struct of permissions, configuring this CRP instance (see above for definitions)"
        }
      }
    },
    "title": "Configurable Rights Pool Factory - create parameterized smart pools",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isCrp(address)": {
        "notice": "Check to see if a given address is a CRP"
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256),(bool,bool,bool,bool,bool,bool,bool))": {
        "notice": "Create a new CRP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2039,
        "contract": "contracts/CRPFactory.sol:CRPFactory",
        "label": "_isCrp",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2041,
        "contract": "contracts/CRPFactory.sol:CRPFactory",
        "label": "_accessAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2043,
        "contract": "contracts/CRPFactory.sol:CRPFactory",
        "label": "_logic",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}