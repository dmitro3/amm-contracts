{
  "address": "0x5174dC75aEf03792b255398438C14ca8e0B0bb29",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapChanged",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LogCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        }
      ],
      "name": "LogExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        }
      ],
      "name": "LogJoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NewTokenCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addTokenTimeLockInBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bFactory",
      "outputs": [
        {
          "internalType": "contract IBFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bPool",
      "outputs": [
        {
          "internalType": "contract IBPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bspCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "canProvideLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getDenormalizedWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gradualUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumWeightChangeBlockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCommitted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "commitBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denorm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "providers",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelistedLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canPauseSwapping",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeSwapFee",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeWeights",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canAddRemoveTokens",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canWhitelistLPs",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeCap",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeProtocolFee",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessAddress",
          "type": "address"
        }
      ],
      "name": "setAccessControlAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_canChangeSwapFee",
          "type": "bool"
        }
      ],
      "name": "setCanWhitelistLPs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "publicSwap",
          "type": "bool"
        }
      ],
      "name": "setPublicSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        }
      ],
      "name": "setRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "providers",
          "type": "address[]"
        }
      ],
      "name": "whitelistLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x84e2679ace115b30b2a8b6d9e116586f85d714eba2f453e06a8a06951e00c6c5",
  "receipt": {
    "to": null,
    "from": "0xf29162ed5Ed4Da23656C5190aae71e61Bb074AeC",
    "contractAddress": "0x5174dC75aEf03792b255398438C14ca8e0B0bb29",
    "transactionIndex": 4,
    "gasUsed": "2067599",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcd00d29bd89836331d4b37756eb7c0a3d3ebb49f36b2f6252046336b43e5710e",
    "transactionHash": "0x84e2679ace115b30b2a8b6d9e116586f85d714eba2f453e06a8a06951e00c6c5",
    "logs": [],
    "blockNumber": 13215562,
    "cumulativeGasUsed": "2531710",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3ab02400ec88730fc886e6b58fe6ae75",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapChanged\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"LogExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"}],\"name\":\"LogJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NewTokenCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addTokenTimeLockInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bFactory\",\"outputs\":[{\"internalType\":\"contract IBFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bPool\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bspCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"canProvideLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDenormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradualUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumWeightChangeBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCommitted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"commitBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denorm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"providers\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistedLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeProtocolFee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessAddress\",\"type\":\"address\"}],\"name\":\"setAccessControlAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canChangeSwapFee\",\"type\":\"bool\"}],\"name\":\"setCanWhitelistLPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"publicSwap\",\"type\":\"bool\"}],\"name\":\"setPublicSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"}],\"name\":\"setRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"providers\",\"type\":\"address[]\"}],\"name\":\"whitelistLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"- owner of the tokens\",\"spender\":\"- entity allowed to spend the tokens\"},\"returns\":{\"_0\":\"uint - remaining amount spender is allowed to transfer\"}},\"approve(address,uint256)\":{\"details\":\"emits an Approval event\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"- address we're checking the balance of\"},\"returns\":{\"_0\":\"uint - token balance in the account\"}},\"canProvideLiquidity(address)\":{\"details\":\"If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)\",\"returns\":{\"_0\":\"boolean value indicating whether the address can join a pool\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseApproval(address,uint256)\":{\"details\":\"emits an Approval eventIf you try to decrease it below the current limit, it's just set to zero (not an error)\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"getController()\":{\"details\":\"external for gas optimization\",\"returns\":{\"_0\":\"address - of the owner (AKA controller)\"}},\"getDenormalizedWeight(address)\":{\"details\":\"viewlock to prevent calling if it's being updated\",\"returns\":{\"_0\":\"token weight\"}},\"increaseApproval(address,uint256)\":{\"details\":\"emits an Approval event\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"isPublicSwap()\":{\"details\":\"viewLock, because setPublicSwap is lock      bPool is a contract interface; function calls on it are external\",\"returns\":{\"_0\":\"Current value of isPublicSwap\"}},\"name()\":{\"details\":\"Returns the name of the token.      We allow the user to set this name (as well as the symbol).      Alternatives are 1) A fixed string (original design)                       2) A fixed string plus the user-defined symbol                          return string(abi.encodePacked(NAME, \\\"-\\\", _symbol));\"},\"removeWhitelistedLiquidityProvider(address[])\":{\"params\":{\"providers\":\"- addresses of the liquidity provider\"}},\"setController(address)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"setPublicSwap(bool)\":{\"details\":\"If this smart pool has canPauseSwapping enabled, we can turn publicSwap off if it's already on      Note that if they turn swapping off - but then finalize the pool - finalizing will turn the      swapping back on. They're not supposed to finalize the underlying pool... would defeat the      smart pool functions. (Only the owner can finalize the pool - which is this contract -      so there is no risk from outside.)      bPool is a contract interface; function calls on it are external\",\"params\":{\"publicSwap\":\"new value of the swap\"}},\"setSwapFee(uint256)\":{\"details\":\"Keep the local version and core in sync (see below)      bPool is a contract interface; function calls on it are external\",\"params\":{\"swapFee\":\"in Wei\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"declared external for gas optimization\",\"returns\":{\"_0\":\"uint - total number of tokens in existence\"}},\"transfer(address,uint256)\":{\"details\":\"_move emits a Transfer event if successful\",\"params\":{\"amount\":\"- number of tokens being transferred\",\"recipient\":\"- entity receiving the tokens\"},\"returns\":{\"_0\":\"bool - result of the transfer (will always be true if it doesn't revert)\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"_move emits a Transfer event if successful; may also emit an Approval event\",\"params\":{\"amount\":\"- number of tokens being transferred\",\"recipient\":\"- recipient of the tokens\",\"sender\":\"- entity sending the tokens (must be caller or allowed to spend on behalf of caller)\"},\"returns\":{\"_0\":\"bool - result of the transfer (will always be true if it doesn't revert)\"}},\"whitelistLiquidityProvider(address[])\":{\"params\":{\"providers\":\"- addresses of the liquidity provider\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Getter for allowance: amount spender will be allowed to spend on behalf of owner\"},\"approve(address,uint256)\":{\"notice\":\"Approve owner (sender) to spend a certain amount\"},\"balanceOf(address)\":{\"notice\":\"Getter for current account balance\"},\"canProvideLiquidity(address)\":{\"notice\":\"Check if an address is a liquidity provider\"},\"decreaseApproval(address,uint256)\":{\"notice\":\"Decrease the amount the spender is allowed to spend on behalf of the owner (sender)\"},\"getController()\":{\"notice\":\"Returns the address of the current owner\"},\"getDenormalizedWeight(address)\":{\"notice\":\"Get the denormalized weight of a token\"},\"increaseApproval(address,uint256)\":{\"notice\":\"Increase the amount the spender is allowed to spend on behalf of the owner (sender)\"},\"isPublicSwap()\":{\"notice\":\"Getter for the publicSwap field on the underlying pool\"},\"removeWhitelistedLiquidityProvider(address[])\":{\"notice\":\"Remove from the whitelist of liquidity providers (if enabled)\"},\"setController(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"setPublicSwap(bool)\":{\"notice\":\"Set the public swap flag on the underlying pool\"},\"setSwapFee(uint256)\":{\"notice\":\"Set the swap fee on the underlying pool\"},\"totalSupply()\":{\"notice\":\"Getter for the total supply\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer the given amount from sender (caller) to recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer the given amount from sender to recipient\"},\"whitelistLiquidityProvider(address[])\":{\"notice\":\"Add to the whitelist of liquidity providers (if enabled)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConfigurableRightsPoolExtension.sol\":\"ConfigurableRightsPoolExtension\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ConfigurableRightsPoolExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./IBFactory.sol\\\";\\nimport \\\"./PCToken.sol\\\";\\nimport \\\"./utils/BalancerReentrancyGuard.sol\\\";\\nimport \\\"./utils/BalancerOwnable.sol\\\";\\n\\n// Libraries\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../libraries/SafeApprove.sol\\\";\\n\\ncontract ConfigurableRightsPoolExtension is PCToken, BalancerOwnable, BalancerReentrancyGuard {\\n    using BalancerSafeMath for uint256;\\n    using SafeApprove for IERC20;\\n\\n    // Type declarations\\n\\n    struct PoolParams {\\n        // Balancer Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint256[] tokenBalances;\\n        uint256[] tokenWeights;\\n        uint256 swapFee;\\n        uint256 protocolFee;\\n    }\\n\\n    // State variables\\n\\n    IBFactory public bFactory;\\n    IBPool public bPool;\\n\\n    // Struct holding the rights configuration\\n    RightsManager.Rights public rights;\\n\\n    // Hold the parameters used in updateWeightsGradually\\n    SmartPoolManager.GradualUpdateParams public gradualUpdate;\\n\\n    // This is for adding a new (currently unbound) token to the pool\\n    // It's a two-step process: commitAddToken(), then applyAddToken()\\n    SmartPoolManager.NewTokenParams public newToken;\\n\\n    // Fee is initialized on creation, and can be changed if permission is set\\n    // Only needed for temporary storage between construction and createPool\\n    // Thereafter, the swap fee should always be read from the underlying pool\\n    uint256 private _initialSwapFee;\\n\\n    uint256 private _initialProtocolFee;\\n\\n    address private _initialAccessAddress;\\n\\n    // Store the list of tokens in the pool, and balances\\n    // NOTE that the token list is *only* used to store the pool tokens between\\n    //   construction and createPool - thereafter, use the underlying BPool's list\\n    //   (avoids synchronization issues)\\n    address[] private _initialTokens;\\n    uint256[] private _initialBalances;\\n\\n    // Enforce a minimum time between the start and end blocks\\n    uint256 public minimumWeightChangeBlockPeriod;\\n    // Enforce a mandatory wait time between updates\\n    // This is also the wait time between committing and applying a new token\\n    uint256 public addTokenTimeLockInBlocks;\\n\\n    // Whitelist of LPs (if configured)\\n    mapping(address => bool) private _liquidityProviderWhitelist;\\n\\n    // Cap on the pool size (i.e., # of tokens minted when joining)\\n    // Limits the risk of experimental pools; failsafe/backup for fixed-size pools\\n    uint256 public bspCap;\\n\\n    // Event declarations\\n\\n    // Anonymous logger event - can only be filtered by contract address\\n\\n    event LogCall(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    event LogJoin(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LogExit(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event CapChanged(address indexed caller, uint256 oldCap, uint256 newCap);\\n\\n    event NewTokenCommitted(address indexed token, address indexed pool, address indexed caller);\\n\\n    // Modifiers\\n\\n    modifier logs() {\\n        emit LogCall(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    // Mark functions that require delegation to the underlying Pool\\n    modifier needsBPool() {\\n        require(address(bPool) != address(0), \\\"ERR_NOT_CREATED\\\");\\n        _;\\n    }\\n\\n    modifier lockUnderlyingPool() {\\n        // Turn off swapping on the underlying pool during joins\\n        // Otherwise tokens with callbacks would enable attacks involving simultaneous swaps and joins\\n        bool origSwapState = bPool.isPublicSwap();\\n        bPool.setPublicSwap(false);\\n        _;\\n        bPool.setPublicSwap(origSwapState);\\n    }\\n\\n    // Default values for these variables (used only in updateWeightsGradually), set in the constructor\\n    // Pools without permission to update weights cannot use them anyway, and should call\\n    //   the default createPool() function.\\n    // To override these defaults, pass them into the overloaded createPool()\\n    // Period is in blocks; 500 blocks ~ 2 hours; 90,000 blocks ~ 2 weeks\\n    uint256 public constant DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD = 90000;\\n    uint256 public constant DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS = 500;\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    constructor() public PCToken(\\\"FCX\\\", \\\"FCX\\\") {}\\n\\n    // External functions\\n\\n    /**\\n     * @notice Set the swap fee on the underlying pool\\n     * @dev Keep the local version and core in sync (see below)\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param swapFee in Wei\\n     */\\n    function setSwapFee(uint256 swapFee) external virtual logs lock onlyOwner needsBPool {\\n        require(rights.canChangeSwapFee, \\\"ERR_NOT_CONFIGURABLE_SWAP_FEE\\\");\\n\\n        // Underlying pool will check against min/max fee\\n        bPool.setSwapFee(swapFee);\\n    }\\n\\n    function setProtocolFee(uint256 protocolFee) external virtual logs lock onlyOwner needsBPool {\\n        require(rights.canChangeProtocolFee, \\\"ERR_NOT_CONFIGURABLE_PROTOCOL_FEE\\\");\\n\\n        // Underlying pool will check against min/max fee\\n        bPool.setProtocolFee(protocolFee);\\n    }\\n\\n    function setRoles(bytes32[] memory roles) external virtual logs lock onlyOwner needsBPool {\\n        bPool.setRoles(roles);\\n    }\\n\\n    function setAccessControlAddress(address accessAddress) external logs lock onlyOwner needsBPool {\\n        bPool.setAccessControlAddress(accessAddress);\\n        _initialAccessAddress = accessAddress;\\n    }\\n\\n    /**\\n     * @notice Set the public swap flag on the underlying pool\\n     * @dev If this smart pool has canPauseSwapping enabled, we can turn publicSwap off if it's already on\\n     *      Note that if they turn swapping off - but then finalize the pool - finalizing will turn the\\n     *      swapping back on. They're not supposed to finalize the underlying pool... would defeat the\\n     *      smart pool functions. (Only the owner can finalize the pool - which is this contract -\\n     *      so there is no risk from outside.)\\n     *\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param publicSwap new value of the swap\\n     */\\n    function setPublicSwap(bool publicSwap) external virtual logs lock onlyOwner needsBPool {\\n        require(rights.canPauseSwapping, \\\"ERR_NOT_PAUSABLE_SWAP\\\");\\n\\n        bPool.setPublicSwap(publicSwap);\\n    }\\n\\n    /**\\n     * @notice Getter for the publicSwap field on the underlying pool\\n     * @dev viewLock, because setPublicSwap is lock\\n     *      bPool is a contract interface; function calls on it are external\\n     * @return Current value of isPublicSwap\\n     */\\n    function isPublicSwap() external view virtual viewlock needsBPool returns (bool) {\\n        return bPool.isPublicSwap();\\n    }\\n\\n    function setCanWhitelistLPs(bool _canChangeSwapFee) external virtual logs lock onlyOwner needsBPool {\\n        require(rights.canWhitelistLPs == !_canChangeSwapFee, \\\"ALREADY_SET\\\");\\n        rights.canWhitelistLPs = _canChangeSwapFee;\\n    }\\n\\n    /**\\n     * @notice Add to the whitelist of liquidity providers (if enabled)\\n     * @param providers - addresses of the liquidity provider\\n     */\\n    function whitelistLiquidityProvider(address[] calldata providers) external onlyOwner lock logs {\\n        require(rights.canWhitelistLPs, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        for (uint256 i = 0; i < providers.length; i++) {\\n            address provider = providers[i];\\n            require(provider != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n\\n            _liquidityProviderWhitelist[provider] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove from the whitelist of liquidity providers (if enabled)\\n     * @param providers - addresses of the liquidity provider\\n     */\\n    function removeWhitelistedLiquidityProvider(address[] calldata providers) external onlyOwner lock logs {\\n        require(rights.canWhitelistLPs, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        for (uint256 i = 0; i < providers.length; i++) {\\n            address provider = providers[i];\\n            require(_liquidityProviderWhitelist[provider], \\\"ERR_LP_NOT_WHITELISTED\\\");\\n            require(provider != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n\\n            _liquidityProviderWhitelist[provider] = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if an address is a liquidity provider\\n     * @dev If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)\\n     * @return boolean value indicating whether the address can join a pool\\n     */\\n    function canProvideLiquidity(address provider) external view returns (bool) {\\n        if (rights.canWhitelistLPs) {\\n            return _liquidityProviderWhitelist[provider];\\n        } else {\\n            // Probably don't strictly need this (could just return true)\\n            // But the null address can't provide funds\\n            return provider != address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the denormalized weight of a token\\n     * @dev viewlock to prevent calling if it's being updated\\n     * @return token weight\\n     */\\n    function getDenormalizedWeight(address token) external view viewlock needsBPool returns (uint256) {\\n        return bPool.getDenormalizedWeight(token);\\n    }\\n}\\n\",\"keccak256\":\"0xe94bcd96cabd9abfb18ac5499cc35c8bb0886ae8c5d8c98459f7ffeba7d38028\",\"license\":\"GPL-3.0-or-later\"},\"contracts/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setProtocolFee(uint256 protocolFee) external;\\n\\n    function setRoles(bytes32[] memory roles) external;\\n\\n    function setAccessControlAddress(address accessAddress) external;\\n\\n    function setPublicSwap(bool publicSwap) external;\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function gulp(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint256);\\n\\n    function getSwapFee() external view returns (uint256);\\n\\n    function getProtocolFee() external view returns (uint256);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint256);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXIT_FEE() external view returns (uint256);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountIn);\\n\\n    function isFinalized() external view returns (bool);\\n\\n    function getNumTokens() external view returns (uint256);\\n\\n    function getCurrentTokens() external view returns (address[] memory);\\n\\n    function getFinalTokens() external view returns (address[] memory);\\n\\n    function getNormalizedWeight(address) external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function getAccessControlAddress() external view returns (address);\\n\\n    function getRoles() external view returns (bytes32[] memory);\\n\\n    function setController(address) external;\\n\\n    function getSpotPrice(address, address) external view returns (uint256);\\n\\n    function getSpotPriceSansFee(address, address) external view returns (uint256);\\n\\n    function finalize() external;\\n\\n    // BPool function\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    function joinPool(uint256, uint256[] calldata) external;\\n\\n    function swapExactAmountIn(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    function exitPool(uint256, uint256[] calldata) external;\\n\\n    function joinswapExternAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountIn);\\n\\n    // ERC20\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n\\n    function increaseApproval(address, uint256) external returns (bool);\\n\\n    function decreaseApproval(address, uint256) external returns (bool);\\n}\\n\\ninterface IBFactory {\\n    function newBPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getAccessControlAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8008bf5575ad8eb14ea4f198462999fd47ea09d756436dba1e3d3491eece8f4d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/PCToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../libraries/BalancerSafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Contracts\\n\\n/* solhint-disable func-order */\\n\\n/**\\n * @author Balancer Labs\\n * @title Highly opinionated token implementation\\n */\\ncontract PCToken is IERC20 {\\n    using BalancerSafeMath for uint256;\\n\\n    // State variables\\n    string public constant NAME = \\\"Balancer Smart Pool\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    // No leading underscore per naming convention (non-private)\\n    // Cannot call totalSupply (name conflict)\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    uint256 internal varTotalSupply;\\n\\n    mapping(address => uint256) private _balance;\\n    mapping(address => mapping(address => uint256)) private _allowance;\\n\\n    string private _symbol;\\n    string private _name;\\n\\n    // Event declarations\\n\\n    // See definitions above; must be redeclared to be emitted from this contract\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Base token constructor\\n     * @param tokenSymbol - the token symbol\\n     */\\n    constructor(string memory tokenSymbol, string memory tokenName) public {\\n        _symbol = tokenSymbol;\\n        _name = tokenName;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Getter for allowance: amount spender will be allowed to spend on behalf of owner\\n     * @param owner - owner of the tokens\\n     * @param spender - entity allowed to spend the tokens\\n     * @return uint - remaining amount spender is allowed to transfer\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Getter for current account balance\\n     * @param account - address we're checking the balance of\\n     * @return uint - token balance in the account\\n     */\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balance[account];\\n    }\\n\\n    /**\\n     * @notice Approve owner (sender) to spend a certain amount\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        /* In addition to the increase/decreaseApproval functions, could\\n           avoid the \\\"approval race condition\\\" by only allowing calls to approve\\n           when the current approval amount is 0\\n        \\n           require(_allowance[msg.sender][spender] == 0, \\\"ERR_RACE_CONDITION\\\");\\n\\n           Some token contracts (e.g., KNC), already revert if you call approve \\n           on a non-zero allocation. To deal with these, we use the SafeApprove library\\n           and safeApprove function when adding tokens to the pool.\\n        */\\n\\n        _allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function increaseApproval(address spender, uint256 amount) external returns (bool) {\\n        _allowance[msg.sender][spender] = BalancerSafeMath.badd(_allowance[msg.sender][spender], amount);\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @dev If you try to decrease it below the current limit, it's just set to zero (not an error)\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function decreaseApproval(address spender, uint256 amount) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][spender];\\n        // Gas optimization - if amount == oldValue (or is larger), set to zero immediately\\n        if (amount >= oldValue) {\\n            _allowance[msg.sender][spender] = 0;\\n        } else {\\n            _allowance[msg.sender][spender] = BalancerSafeMath.bsub(oldValue, amount);\\n        }\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender (caller) to recipient\\n     * @dev _move emits a Transfer event if successful\\n     * @param recipient - entity receiving the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        _move(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender to recipient\\n     * @dev _move emits a Transfer event if successful; may also emit an Approval event\\n     * @param sender - entity sending the tokens (must be caller or allowed to spend on behalf of caller)\\n     * @param recipient - recipient of the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n        require(msg.sender == sender || amount <= _allowance[sender][msg.sender], \\\"ERR_PCTOKEN_BAD_CALLER\\\");\\n\\n        _move(sender, recipient, amount);\\n\\n        // memoize for gas optimization\\n        uint256 oldAllowance = _allowance[sender][msg.sender];\\n\\n        // If the sender is not the caller, adjust the allowance by the amount transferred\\n        if (msg.sender != sender && oldAllowance != uint256(-1)) {\\n            _allowance[sender][msg.sender] = BalancerSafeMath.bsub(oldAllowance, amount);\\n\\n            emit Approval(msg.sender, recipient, _allowance[sender][msg.sender]);\\n        }\\n\\n        return true;\\n    }\\n\\n    // public functions\\n\\n    /**\\n     * @notice Getter for the total supply\\n     * @dev declared external for gas optimization\\n     * @return uint - total number of tokens in existence\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return varTotalSupply;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     *      We allow the user to set this name (as well as the symbol).\\n     *      Alternatives are 1) A fixed string (original design)\\n     *                       2) A fixed string plus the user-defined symbol\\n     *                          return string(abi.encodePacked(NAME, \\\"-\\\", _symbol));\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    // internal functions\\n\\n    // Mint an amount of new tokens, and add them to the balance (and total supply)\\n    // Emit a transfer amount from the null address to this contract\\n    function _mint(uint256 amount) internal virtual {\\n        _balance[address(this)] = BalancerSafeMath.badd(_balance[address(this)], amount);\\n        varTotalSupply = BalancerSafeMath.badd(varTotalSupply, amount);\\n\\n        emit Transfer(address(0), address(this), amount);\\n    }\\n\\n    // Burn an amount of new tokens, and subtract them from the balance (and total supply)\\n    // Emit a transfer amount from this contract to the null address\\n    function _burn(uint256 amount) internal virtual {\\n        // Can't burn more than we have\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[address(this)] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[address(this)] = BalancerSafeMath.bsub(_balance[address(this)], amount);\\n        varTotalSupply = BalancerSafeMath.bsub(varTotalSupply, amount);\\n\\n        emit Transfer(address(this), address(0), amount);\\n    }\\n\\n    // Transfer tokens from sender to recipient\\n    // Adjust balances, and emit a Transfer event\\n    function _move(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        // Can't send more than sender has\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[sender] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[sender] = BalancerSafeMath.bsub(_balance[sender], amount);\\n        _balance[recipient] = BalancerSafeMath.badd(_balance[recipient], amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // Transfer from this contract to recipient\\n    // Emits a transfer event if successful\\n    function _push(address recipient, uint256 amount) internal {\\n        _move(address(this), recipient, amount);\\n    }\\n\\n    // Transfer from recipient to this contract\\n    // Emits a transfer event if successful\\n    function _pull(address sender, uint256 amount) internal {\\n        _move(sender, address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x60484c385e1aa339053e9d94240b7246c7a4511e4297aa40464ac40a7cda399c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BalancerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract BalancerOwnable {\\n    // State variables\\n\\n    address private _owner;\\n\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x5907d7a22e0df36874a7d06de159cbfdb7be37fbaace7b109930d8cd2dbb5a98\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BalancerReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Balancer Labs (and OpenZeppelin)\\n * @title Protect against reentrant calls (and also selectively protect view functions)\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `_lock_` guard, functions marked as\\n * `_lock_` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `_lock_` entry\\n * points to them.\\n *\\n * Also adds a _lockview_ modifier, which doesn't create a lock, but fails\\n *   if another _lock_ call is in progress\\n */\\ncontract BalancerReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `_lock_` function from another `_lock_`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `_lock_` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock() {\\n        // On the first call to _lock_, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ERR_REENTRY\\\");\\n\\n        // Any calls to _lock_ after this point will fail\\n        _status = _ENTERED;\\n        _;\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Also add a modifier that doesn't create a lock, but protects functions that\\n     *      should not be called while a _lock_ function is running\\n     */\\n    modifier viewlock() {\\n        require(_status != _ENTERED, \\\"ERR_REENTRY_VIEW\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbf697bdd4ac87b30b9c1177512a10c4cfa1fb0ea5de75364c9229044ffba9458\",\"license\":\"GPL-3.0-or-later\"},\"interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\npragma experimental ABIEncoderV2;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        CHANGE_CAP,\\n        CHANGE_PROTOCOL_FEE\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n        bool canChangeProtocolFee;\\n    }\\n\\n    function mintPoolShareFromLib(uint256 amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint256 amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint256 amount) external;\\n\\n    function burnPoolShareFromLib(uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setProtocolFee(uint256 protocolFee) external;\\n\\n    function setRoles(bytes32[] memory roles) external;\\n\\n    function setAccessControlAddress(address accessAddress) external;\\n\\n    function setPublicSwap(bool publicSwap) external;\\n\\n    function setCap(uint256 newCap) external;\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function createPool(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function createPool(uint256) external;\\n\\n    function updateWeight(address, uint256) external;\\n\\n    function updateWeightsGradually(\\n        uint256[] calldata,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function pokeWeights() external;\\n\\n    function commitAddToken(\\n        address,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function applyAddToken() external;\\n\\n    function removeToken(address) external;\\n\\n    function joinPool(uint256, uint256[] calldata) external;\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n\\n    function joinswapExternAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountIn);\\n\\n    function whitelistLiquidityProvider(address[] calldata) external;\\n\\n    function removeWhitelistedLiquidityProvider(address[] calldata) external;\\n\\n    function canProvideLiquidity(address) external view returns (bool);\\n\\n    function hasPermission(Permissions) external view returns (bool);\\n\\n    function getDenormalizedWeight(address) external view returns (uint256);\\n\\n    function getRightsManagerVersion() external pure returns (address);\\n\\n    function getBalancerSafeMathVersion() external pure returns (address);\\n\\n    function getSmartPoolManagerVersion() external pure returns (address);\\n\\n    function createPoolInternal(uint256) external;\\n\\n    function approve(address, uint256) external;\\n\\n    function bspCap() external view returns (uint256);\\n\\n    function bPool() external view returns (address);\\n\\n    function rights() external view returns (Rights memory);\\n\\n    // erc20\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function increaseApproval(address, uint256) external returns (bool);\\n\\n    function decreaseApproval(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function setCanWhitelistLPs(bool) external;\\n}\\n\",\"keccak256\":\"0xf3fb362693754c3985e3305b68c600126cdfc9940cd566198c7dd2155e4fb46c\",\"license\":\"GPL-3.0-or-later\"},\"interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x37d7904de6fabb6ab50b063cc6623997d5f7ff8e0322d0b4ba651c1c00fceed9\",\"license\":\"GPL-3.0-or-later\"},\"libraries/BalancerConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Balancer Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary BalancerConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint256 public constant BONE = 10**18;\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**14;\\n    uint256 public constant MAX_BALANCE = BONE * 10**12;\\n    uint256 public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint256 public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    // uint256 public constant MAX_FEE = BONE / 10;\\n    // FCX: max fee is 100%\\n    uint256 public constant MAX_FEE = BONE;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint256 public constant EXIT_FEE = 0;\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint256 public constant MIN_ASSET_LIMIT = 2;\\n    uint256 public constant MAX_ASSET_LIMIT = 8;\\n    uint256 public constant MAX_UINT = uint256(-1);\\n}\\n\",\"keccak256\":\"0x0823d2332f883801131620e42570203de679566a9de01c2db10a3f87362e42be\",\"license\":\"GPL-3.0-or-later\"},\"libraries/BalancerSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n\\n// Imports\\n\\nimport \\\"./BalancerConstants.sol\\\";\\n\\n/**\\n * @author Balancer Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary BalancerSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (BalancerConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / BalancerConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0){\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * BalancerConstants.BONE;\\n        require(c0 / dividend == BalancerConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        }\\n        else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8525e4ade460fb2f220853beedb56580f2ba0525f92313c079a72cf3b70fd03\",\"license\":\"GPL-3.0-or-later\"},\"libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Balancer Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\nlibrary RightsManager {\\n\\n    // Type declarations\\n\\n    enum Permissions { PAUSE_SWAPPING,\\n                       CHANGE_SWAP_FEE,\\n                       CHANGE_WEIGHTS,\\n                       ADD_REMOVE_TOKENS,\\n                       WHITELIST_LPS,\\n                       CHANGE_CAP,\\n                       CHANGE_PROTOCOL_FEE }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n        bool canChangeProtocolFee;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    bool public constant DEFAULT_CAN_CHANGE_PROTOCOL_FEE = true;\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */ \\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length == 0) {\\n            return Rights(DEFAULT_CAN_PAUSE_SWAPPING,\\n                          DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                          DEFAULT_CAN_CHANGE_WEIGHTS,\\n                          DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                          DEFAULT_CAN_WHITELIST_LPS,\\n                          DEFAULT_CAN_CHANGE_CAP,\\n                          DEFAULT_CAN_CHANGE_PROTOCOL_FEE);\\n        }\\n        else {\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](7);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canChangeCap;\\n        result[6] = rights.canChangeProtocolFee;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        }\\n        else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        }\\n        else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        }\\n        else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        }\\n        else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }\\n        else if (Permissions.CHANGE_CAP == permission) {\\n            return self.canChangeCap;\\n        }\\n        else if (Permissions.CHANGE_PROTOCOL_FEE == permission) {\\n            return self.canChangeProtocolFee;\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x48b5cec09f48faab491918b8a3c42a5d5c7e2d078f58605ed5bea7f22939ee6b\",\"license\":\"GPL-3.0-or-later\"},\"libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Balancer Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            // return token.approve(spender, 0);\\n            // FCX: fixed, do not returns\\n            // base on BActions._safeApprove\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf5652b9ccae4c9998987f2c09fb2432607267049352b5574f7f81f6b91350e02\",\"license\":\"GPL-3.0-or-later\"},\"libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../contracts/IBFactory.sol\\\";\\nimport \\\"./BalancerSafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n\\n/**\\n * @author Balancer Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    // Type declarations\\n\\n    struct NewTokenParams {\\n        address addr;\\n        bool isCommitted;\\n        uint commitBlock;\\n        uint denorm;\\n        uint balance;\\n    }\\n\\n    // For blockwise, automated weight updates\\n    // Move weights linearly from startWeights to endWeights,\\n    // between startBlock and endBlock\\n    struct GradualUpdateParams {\\n        uint startBlock;\\n        uint endBlock;\\n        uint[] startWeights;\\n        uint[] endWeights;\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n    */\\n    function updateWeight(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token,\\n        uint newWeight\\n    )\\n        external\\n    {\\n        require(newWeight >= BalancerConstants.MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(newWeight <= BalancerConstants.MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n\\n        uint currentWeight = bPool.getDenormalizedWeight(token);\\n        // Save gas; return immediately on NOOP\\n        if (currentWeight == newWeight) {\\n             return;\\n        }\\n\\n        uint currentBalance = bPool.getBalance(token);\\n        uint totalSupply = self.totalSupply();\\n        uint totalWeight = bPool.getTotalDenormalizedWeight();\\n        uint poolShares;\\n        uint deltaBalance;\\n        uint deltaWeight;\\n        uint newBalance;\\n\\n        if (newWeight < currentWeight) {\\n            // This means the controller will withdraw tokens to keep price\\n            // So they need to redeem PCTokens\\n            deltaWeight = BalancerSafeMath.bsub(currentWeight, newWeight);\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BalancerSafeMath.bmul(totalSupply,\\n                                               BalancerSafeMath.bdiv(deltaWeight, totalWeight));\\n\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BalancerSafeMath.bmul(currentBalance,\\n                                                 BalancerSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // New balance cannot be lower than MIN_BALANCE\\n            newBalance = BalancerSafeMath.bsub(currentBalance, deltaBalance);\\n\\n            require(newBalance >= BalancerConstants.MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n            // First get the tokens from this contract (Pool Controller) to msg.sender\\n            bPool.rebind(token, newBalance, newWeight);\\n\\n            // Now with the tokens this contract can send them to msg.sender\\n            bool xfer = IERC20(token).transfer(msg.sender, deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            self.pullPoolShareFromLib(msg.sender, poolShares);\\n            self.burnPoolShareFromLib(poolShares);\\n        }\\n        else {\\n            // This means the controller will deposit tokens to keep the price.\\n            // They will be minted and given PCTokens\\n            deltaWeight = BalancerSafeMath.bsub(newWeight, currentWeight);\\n\\n            require(BalancerSafeMath.badd(totalWeight, deltaWeight) <= BalancerConstants.MAX_TOTAL_WEIGHT,\\n                    \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BalancerSafeMath.bmul(totalSupply,\\n                                               BalancerSafeMath.bdiv(deltaWeight, totalWeight));\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BalancerSafeMath.bmul(currentBalance,\\n                                                 BalancerSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // First gets the tokens from msg.sender to this contract (Pool Controller)\\n            bool xfer = IERC20(token).transferFrom(msg.sender, address(this), deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            // Now with the tokens this contract can bind them to the pool it controls\\n            bPool.rebind(token, BalancerSafeMath.badd(currentBalance, deltaBalance), newWeight);\\n\\n            self.mintPoolShareFromLib(poolShares);\\n            self.pushPoolShareFromLib(msg.sender, poolShares);\\n        }\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param gradualUpdate - gradual update parameters from the CRP\\n    */\\n    function pokeWeights(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate\\n    )\\n        external\\n    {\\n        // Do nothing if we call this when there is no update plan\\n        if (gradualUpdate.startBlock == 0) {\\n            return;\\n        }\\n\\n        // Error to call it before the start of the plan\\n        require(block.number >= gradualUpdate.startBlock, \\\"ERR_CANT_POKE_YET\\\");\\n        // Proposed error message improvement\\n        // require(block.number >= startBlock, \\\"ERR_NO_HOKEY_POKEY\\\");\\n\\n        // This allows for pokes after endBlock that get weights to endWeights\\n        // Get the current block (or the endBlock, if we're already past the end)\\n        uint currentBlock;\\n        if (block.number > gradualUpdate.endBlock) {\\n            currentBlock = gradualUpdate.endBlock;\\n        }\\n        else {\\n            currentBlock = block.number;\\n        }\\n\\n        uint blockPeriod = BalancerSafeMath.bsub(gradualUpdate.endBlock, gradualUpdate.startBlock);\\n        uint blocksElapsed = BalancerSafeMath.bsub(currentBlock, gradualUpdate.startBlock);\\n        uint weightDelta;\\n        uint deltaPerBlock;\\n        uint newWeight;\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            // Make sure it does nothing if the new and old weights are the same (saves gas)\\n            // It's a degenerate case if they're *all* the same, but you certainly could have\\n            // a plan where you only change some of the weights in the set\\n            if (gradualUpdate.startWeights[i] != gradualUpdate.endWeights[i]) {\\n                if (gradualUpdate.endWeights[i] < gradualUpdate.startWeights[i]) {\\n                    // We are decreasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BalancerSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                        gradualUpdate.endWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BalancerSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight - (blocksElapsed * deltaPerBlock)\\n                    newWeight = BalancerSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                      BalancerSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n                else {\\n                    // We are increasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BalancerSafeMath.bsub(gradualUpdate.endWeights[i],\\n                                                        gradualUpdate.startWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BalancerSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight + (blocksElapsed * deltaPerBlock)\\n                    newWeight = BalancerSafeMath.badd(gradualUpdate.startWeights[i],\\n                                                      BalancerSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n\\n                uint bal = bPool.getBalance(tokens[i]);\\n\\n                bPool.rebind(tokens[i], bal, newWeight);\\n            }\\n        }\\n\\n        // Reset to allow add/remove tokens, or manual weight updates\\n        if (block.number >= gradualUpdate.endBlock) {\\n            gradualUpdate.startBlock = 0;\\n        }\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function commitAddToken(\\n        IBPool bPool,\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(!bPool.isBound(token), \\\"ERR_IS_BOUND\\\");\\n\\n        require(denormalizedWeight <= BalancerConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n        require(denormalizedWeight >= BalancerConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n        require(BalancerSafeMath.badd(bPool.getTotalDenormalizedWeight(),\\n                                      denormalizedWeight) <= BalancerConstants.MAX_TOTAL_WEIGHT,\\n                \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        require(balance >= BalancerConstants.MIN_BALANCE, \\\"ERR_BALANCE_BELOW_MIN\\\");\\n\\n        newToken.addr = token;\\n        newToken.balance = balance;\\n        newToken.denorm = denormalizedWeight;\\n        newToken.commitBlock = block.number;\\n        newToken.isCommitted = true;\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param addTokenTimeLockInBlocks -  Wait time between committing and applying a new token\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function applyAddToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint addTokenTimeLockInBlocks,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(newToken.isCommitted, \\\"ERR_NO_TOKEN_COMMIT\\\");\\n        require(BalancerSafeMath.bsub(block.number, newToken.commitBlock) >= addTokenTimeLockInBlocks,\\n                                      \\\"ERR_TIMELOCK_STILL_COUNTING\\\");\\n\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * newTokenWeight / totalWeight\\n        uint poolShares = BalancerSafeMath.bdiv(BalancerSafeMath.bmul(totalSupply, newToken.denorm),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // Clear this to allow adding more tokens\\n        newToken.isCommitted = false;\\n\\n        // First gets the tokens from msg.sender to this contract (Pool Controller)\\n        bool returnValue = IERC20(newToken.addr).transferFrom(self.getController(), address(self), newToken.balance);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        // Approves bPool to pull from this controller\\n        // Approve unlimited, same as when creating the pool, so they can join pools later\\n        returnValue = SafeApprove.safeApprove(IERC20(newToken.addr), address(bPool), BalancerConstants.MAX_UINT);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        bPool.bind(newToken.addr, newToken.balance, newToken.denorm);\\n\\n        self.mintPoolShareFromLib(poolShares);\\n        self.pushPoolShareFromLib(msg.sender, poolShares);\\n    }\\n\\n     /**\\n     * @notice Remove a token from the pool\\n     * @dev Logic in the CRP controls when ths can be called. There are two related permissions:\\n     *      AddRemoveTokens - which allows removing down to the underlying BPool limit of two\\n     *      RemoveAllTokens - which allows completely draining the pool by removing all tokens\\n     *                        This can result in a non-viable pool with 0 or 1 tokens (by design),\\n     *                        meaning all swapping or binding operations would fail in this state\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to remove\\n     */\\n    function removeToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token\\n    )\\n        external\\n    {\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * tokenWeight / totalWeight\\n        uint poolShares = BalancerSafeMath.bdiv(BalancerSafeMath.bmul(totalSupply,\\n                                                                      bPool.getDenormalizedWeight(token)),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // this is what will be unbound from the pool\\n        // Have to get it before unbinding\\n        uint balance = bPool.getBalance(token);\\n\\n        // Unbind and get the tokens out of balancer pool\\n        bPool.unbind(token);\\n\\n        // Now with the tokens this contract can send them to msg.sender\\n        bool xfer = IERC20(token).transfer(self.getController(), balance);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n        self.pullPoolShareFromLib(self.getController(), poolShares);\\n        self.burnPoolShareFromLib(poolShares);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n         }\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external cals to pokeWeights\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param newWeights - final weights we want to get to\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n     * @param minimumWeightChangeBlockPeriod - needed to validate the block period\\n    */\\n    function updateWeightsGradually(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate,\\n        uint[] calldata newWeights,\\n        uint startBlock,\\n        uint endBlock,\\n        uint minimumWeightChangeBlockPeriod\\n    )\\n        external\\n    {\\n        require(block.number < endBlock, \\\"ERR_GRADUAL_UPDATE_TIME_TRAVEL\\\");\\n        \\n        if (block.number > startBlock) {\\n            // This means the weight update should start ASAP\\n            // Moving the start block up prevents a big jump/discontinuity in the weights\\n            gradualUpdate.startBlock = block.number;\\n        }\\n        else{\\n            gradualUpdate.startBlock = startBlock;\\n        }\\n\\n        // Enforce a minimum time over which to make the changes\\n        // The also prevents endBlock <= startBlock\\n        require(BalancerSafeMath.bsub(endBlock, gradualUpdate.startBlock) >= minimumWeightChangeBlockPeriod,\\n                \\\"ERR_WEIGHT_CHANGE_TIME_BELOW_MIN\\\");\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // Must specify weights for all tokens\\n        require(newWeights.length == tokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        uint weightsSum = 0;\\n        gradualUpdate.startWeights = new uint[](tokens.length);\\n\\n        // Check that endWeights are valid now to avoid reverting in a future pokeWeights call\\n        //\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            require(newWeights[i] <= BalancerConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n            require(newWeights[i] >= BalancerConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n\\n            weightsSum = BalancerSafeMath.badd(weightsSum, newWeights[i]);\\n            gradualUpdate.startWeights[i] = bPool.getDenormalizedWeight(tokens[i]);\\n        }\\n        require(weightsSum <= BalancerConstants.MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n        gradualUpdate.endBlock = endBlock;\\n        gradualUpdate.endWeights = newWeights;\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    )\\n         external\\n         view\\n         returns (uint[] memory actualAmountsIn)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = BalancerSafeMath.bdiv(poolAmountOut,\\n                                           BalancerSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = BalancerSafeMath.bmul(ratio,\\n                                                       BalancerSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint pAiAfterExitFee, uint[] memory actualAmountsOut)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n        pAiAfterExitFee = BalancerSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        uint ratio = BalancerSafeMath.bdiv(pAiAfterExitFee,\\n                                           BalancerSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = BalancerSafeMath.bmul(ratio,\\n                                                        BalancerSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    )\\n        external\\n        view\\n        returns (uint poolAmountOut)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= BalancerSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BalancerConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        poolAmountOut = bPool.calcPoolOutGivenSingleIn(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    )\\n        external\\n        view\\n        returns (uint tokenAmountIn)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountIn = bPool.calcSingleInGivenPoolOut(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= BalancerSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BalancerConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint tokenAmountOut)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        require(tokenAmountOut <= BalancerSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BalancerConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return exitFee - calculated exit fee\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint poolAmountIn)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= BalancerSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BalancerConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n        poolAmountIn = bPool.calcPoolInGivenSingleOut(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n    }\\n\\n    // Internal functions\\n\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd085e09cdfffae7f0c9b3e444cfefe1c860d25a498c3eface37db40374ae8d15\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600381526020016208c86b60eb1b8152506040518060400160405280600381526020016208c86b60eb1b81525081600390805190602001906200006292919062000098565b5080516200007890600490602084019062000098565b5050600580546001600160a01b0319163317905550600160065562000134565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000db57805160ff19168380011785556200010b565b828001600101855582156200010b579182015b828111156200010b578251825591602001919060010190620000ee565b50620001199291506200011d565b5090565b5b808211156200011957600081556001016200011e565b6122d880620001446000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80638cc3780111610125578063c2a14eb5116100ad578063e7f1a5541161007c578063e7f1a5541461078f578063e854f53d14610797578063e8d56b8b1461079f578063f226b528146107c5578063fde924f7146107cd5761021c565b8063c2a14eb5146106d9578063c42bd05a146106f8578063d73dd62314610735578063dd62ed3e146107615761021c565b8063980e8db6116100f4578063980e8db61461064d578063a3f4df7e14610695578063a835a0de1461069d578063a9059cbb146106a5578063b64ef17b146106d15761021c565b80638cc378011461058b57806392eefe9b146105f9578063948d8ce61461061f57806395d89b41146106455761021c565b806334e19907116101a857806366476661116101775780636647666114610413578063691a91c21461048157806370a0823114610522578063787dce3d14610548578063806c6f87146105655761021c565b806334e199071461038857806349b59552146103a75780635a8342d8146103c657806366188463146103e75761021c565b806318160ddd116101ef57806318160ddd1461031c57806323b872dd146103245780632e0f26251461035a5780633018205f14610378578063313ce567146103805761021c565b806306fdde0314610221578063095ea7b31461029e5780630a165940146102de5780630ce2792514610302575b600080fd5b6102296107d5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026357818101518382015260200161024b565b50505050905090810190601f1680156102905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ca600480360360408110156102b457600080fd5b506001600160a01b03813516906020013561086b565b604080519115158252519081900360200190f35b6102e66108bf565b604080516001600160a01b039092168252519081900360200190f35b61030a6108ce565b60408051918252519081900360200190f35b61030a6108d4565b6102ca6004803603606081101561033a57600080fd5b506001600160a01b038135811691602081013590911690604001356108da565b610362610a58565b6040805160ff9092168252519081900360200190f35b6102e6610a5d565b610362610a6c565b6103a56004803603602081101561039e57600080fd5b5035610a71565b005b6103a5600480360360208110156103bd57600080fd5b50351515610c89565b6103ce610e75565b6040805192835260208301919091528051918290030190f35b6102ca600480360360408110156103fd57600080fd5b506001600160a01b038135169060200135610e7e565b6103a56004803603602081101561042957600080fd5b810190602081018135600160201b81111561044357600080fd5b82018360208201111561045557600080fd5b803590602001918460208302840111600160201b8311171561047657600080fd5b509092509050610f55565b6103a56004803603602081101561049757600080fd5b810190602081018135600160201b8111156104b157600080fd5b8201836020820111156104c357600080fd5b803590602001918460208302840111600160201b831117156104e457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506111ab945050505050565b61030a6004803603602081101561053857600080fd5b50356001600160a01b0316611380565b6103a56004803603602081101561055e57600080fd5b503561139f565b6102ca6004803603602081101561057b57600080fd5b50356001600160a01b0316611586565b6103a5600480360360208110156105a157600080fd5b810190602081018135600160201b8111156105bb57600080fd5b8201836020820111156105cd57600080fd5b803590602001918460208302840111600160201b831117156105ee57600080fd5b5090925090506115cf565b6103a56004803603602081101561060f57600080fd5b50356001600160a01b03166117ca565b61030a6004803603602081101561063557600080fd5b50356001600160a01b03166118c8565b6102296119e3565b610655611a44565b604080519715158852951515602088015293151586860152911515606086015215156080850152151560a0840152151560c0830152519081900360e00190f35b610229611a8d565b61030a611abc565b6102ca600480360360408110156106bb57600080fd5b506001600160a01b038135169060200135611ac2565b6102e6611b26565b6103a5600480360360208110156106ef57600080fd5b50351515611b35565b610700611cfa565b604080516001600160a01b03909616865293151560208601528484019290925260608401526080830152519081900360a00190f35b6102ca6004803603604081101561074b57600080fd5b506001600160a01b038135169060200135611d21565b61030a6004803603604081101561077757600080fd5b506001600160a01b0381358116916020013516611da2565b61030a611dcd565b61030a611dd3565b6103a5600480360360208110156107b557600080fd5b50356001600160a01b0316611dd9565b61030a611fb6565b6102ca611fbd565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108615780601f1061083657610100808354040283529160200191610861565b820191906000526020600020905b81548152906001019060200180831161084457829003601f168201915b5050505050905090565b3360008181526002602090815260408083206001600160a01b03871680855290835281842086905581518681529151939490939092600080516020612283833981519152928290030190a350600192915050565b6007546001600160a01b031681565b601a5481565b60005490565b60006001600160a01b03831661092a576040805162461bcd60e51b815260206004820152601060248201526f4552525f5a45524f5f4144445245535360801b604482015290519081900360640190fd5b336001600160a01b038516148061096457506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b6109ae576040805162461bcd60e51b815260206004820152601660248201527522a9292fa821aa27a5a2a72fa120a22fa1a0a62622a960511b604482015290519081900360640190fd5b6109b98484846120d8565b6001600160a01b03841660008181526002602090815260408083203380855292529091205491148015906109ef57506000198114155b15610a4d576109fe8184612186565b6001600160a01b03868116600090815260026020908152604080832033808552908352928190208590558051948552519288169391926000805160206122838339815191529281900390910190a35b506001949350505050565b601281565b6005546001600160a01b031690565b601290565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a260026006541415610b18576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b60026006556005546001600160a01b03163314610b71576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6008546001600160a01b0316610bc0576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d0d49150551151608a1b604482015290519081900360640190fd5b600954610100900460ff16610c1c576040805162461bcd60e51b815260206004820152601d60248201527f4552525f4e4f545f434f4e464947555241424c455f535741505f464545000000604482015290519081900360640190fd5b600854604080516334e1990760e01b81526004810184905290516001600160a01b03909216916334e199079160248082019260009290919082900301818387803b158015610c6957600080fd5b505af1158015610c7d573d6000803e3d6000fd5b50506001600655505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a260026006541415610d30576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b60026006556005546001600160a01b03163314610d89576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6008546001600160a01b0316610dd8576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d0d49150551151608a1b604482015290519081900360640190fd5b60095460ff16610e27576040805162461bcd60e51b815260206004820152601560248201527404552525f4e4f545f5041555341424c455f5357415605c1b604482015290519081900360640190fd5b600854604080516324dacaa960e11b8152831515600482015290516001600160a01b03909216916349b595529160248082019260009290919082900301818387803b158015610c6957600080fd5b600a54600b5482565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310610ed2573360009081526002602090815260408083206001600160a01b0388168452909152812055610f01565b610edc8184612186565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552908352928190205481519081529051929392600080516020612283833981519152929181900390910190a35060019392505050565b6005546001600160a01b03163314610fa9576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b60026006541415610fef576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6002600655604080516020808252369082018190523392600080356001600160e01b0319169390929181908101848480828437600083820152604051601f909101601f19169092018290039550909350505050a2600954600160201b900460ff1661109c576040805162461bcd60e51b81526020600482015260186024820152774552525f43414e4e4f545f57484954454c4953545f4c505360401b604482015290519081900360640190fd5b60005b818110156111a15760008383838181106110b557fe5b602090810292909201356001600160a01b0316600081815260199093526040909220549192505060ff16611129576040805162461bcd60e51b815260206004820152601660248201527511549497d31417d393d517d5d2125511531254d5115160521b604482015290519081900360640190fd5b6001600160a01b03811661117a576040805162461bcd60e51b81526020600482015260136024820152724552525f494e56414c49445f4144445245535360681b604482015290519081900360640190fd5b6001600160a01b03166000908152601960205260409020805460ff1916905560010161109f565b5050600160065550565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a260026006541415611252576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b60026006556005546001600160a01b031633146112ab576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6008546001600160a01b03166112fa576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d0d49150551151608a1b604482015290519081900360640190fd5b60085460405163348d48e160e11b81526020600482018181528451602484015284516001600160a01b039094169363691a91c29386938392604490920191818601910280838360005b8381101561135b578181015183820152602001611343565b5050505090500192505050600060405180830381600087803b158015610c6957600080fd5b6001600160a01b0381166000908152600160205260409020545b919050565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a260026006541415611446576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b60026006556005546001600160a01b0316331461149f576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6008546001600160a01b03166114ee576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d0d49150551151608a1b604482015290519081900360640190fd5b6009546601000000000000900460ff166115395760405162461bcd60e51b81526004018080602001828103825260218152602001806122626021913960400191505060405180910390fd5b6008546040805163787dce3d60e01b81526004810184905290516001600160a01b039092169163787dce3d9160248082019260009290919082900301818387803b158015610c6957600080fd5b600954600090600160201b900460ff16156115bd57506001600160a01b03811660009081526019602052604090205460ff1661139a565b506001600160a01b038116151561139a565b6005546001600160a01b03163314611623576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b60026006541415611669576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b6002600655604080516020808252369082018190523392600080356001600160e01b0319169390929181908101848480828437600083820152604051601f909101601f19169092018290039550909350505050a2600954600160201b900460ff16611716576040805162461bcd60e51b81526020600482015260186024820152774552525f43414e4e4f545f57484954454c4953545f4c505360401b604482015290519081900360640190fd5b60005b818110156111a157600083838381811061172f57fe5b905060200201356001600160a01b0316905060006001600160a01b0316816001600160a01b0316141561179f576040805162461bcd60e51b81526020600482015260136024820152724552525f494e56414c49445f4144445245535360681b604482015290519081900360640190fd5b6001600160a01b03166000908152601960205260409020805460ff1916600190811790915501611719565b6005546001600160a01b0316331461181e576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6001600160a01b03811661186c576040805162461bcd60e51b815260206004820152601060248201526f4552525f5a45524f5f4144445245535360801b604482015290519081900360640190fd5b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b600060026006541415611915576040805162461bcd60e51b815260206004820152601060248201526f4552525f5245454e5452595f5649455760801b604482015290519081900360640190fd5b6008546001600160a01b0316611964576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d0d49150551151608a1b604482015290519081900360640190fd5b60085460408051634a46c67360e11b81526001600160a01b0385811660048301529151919092169163948d8ce6916024808301926020929190829003018186803b1580156119b157600080fd5b505afa1580156119c5573d6000803e3d6000fd5b505050506040513d60208110156119db57600080fd5b505192915050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108615780601f1061083657610100808354040283529160200191610861565b60095460ff80821691610100810482169162010000820481169163010000008104821691600160201b820481169165010000000000810482169166010000000000009091041687565b6040518060400160405280601381526020017210985b185b98d95c8814db585c9d08141bdbdb606a1b81525081565b6101f481565b60006001600160a01b038316611b12576040805162461bcd60e51b815260206004820152601060248201526f4552525f5a45524f5f4144445245535360801b604482015290519081900360640190fd5b611b1d3384846120d8565b50600192915050565b6008546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a260026006541415611bdc576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b60026006556005546001600160a01b03163314611c35576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6008546001600160a01b0316611c84576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d0d49150551151608a1b604482015290519081900360640190fd5b60095460ff600160201b909104161515811514611cd6576040805162461bcd60e51b815260206004820152600b60248201526a1053149150511657d4d15560aa1b604482015290519081900360640190fd5b60098054911515600160201b0264ff00000000199092169190911790556001600655565b600e54600f546010546011546001600160a01b03841693600160a01b900460ff1692919085565b3360009081526002602090815260408083206001600160a01b0386168452909152812054611d4f90836121e8565b3360008181526002602090815260408083206001600160a01b038916808552908352928190208590558051948552519193600080516020612283833981519152929081900390910190a350600192915050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60185481565b60175481565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a260026006541415611e80576040805162461bcd60e51b815260206004820152600b60248201526a4552525f5245454e54525960a81b604482015290519081900360640190fd5b60026006556005546001600160a01b03163314611ed9576040805162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604482015290519081900360640190fd5b6008546001600160a01b0316611f28576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d0d49150551151608a1b604482015290519081900360640190fd5b6008546040805163e8d56b8b60e01b81526001600160a01b0384811660048301529151919092169163e8d56b8b91602480830192600092919082900301818387803b158015611f7657600080fd5b505af1158015611f8a573d6000803e3d6000fd5b5050601480546001600160a01b0319166001600160a01b03949094169390931790925550506001600655565b62015f9081565b60006002600654141561200a576040805162461bcd60e51b815260206004820152601060248201526f4552525f5245454e5452595f5649455760801b604482015290519081900360640190fd5b6008546001600160a01b0316612059576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d0d49150551151608a1b604482015290519081900360640190fd5b600860009054906101000a90046001600160a01b03166001600160a01b031663fde924f76040518163ffffffff1660e01b815260040160206040518083038186803b1580156120a757600080fd5b505afa1580156120bb573d6000803e3d6000fd5b505050506040513d60208110156120d157600080fd5b5051905090565b6001600160a01b0383166000908152600160205260409020546120fb9082612186565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461212a90826121e8565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000806000612195858561223c565b9150915080156121e0576040805162461bcd60e51b81526020600482015260116024820152704552525f5355425f554e444552464c4f5760781b604482015290519081900360640190fd5b509392505050565b600082820183811015612235576040805162461bcd60e51b815260206004820152601060248201526f4552525f4144445f4f564552464c4f5760801b604482015290519081900360640190fd5b9392505050565b600080838311612252575050808203600061225a565b505081810360015b925092905056fe4552525f4e4f545f434f4e464947555241424c455f50524f544f434f4c5f4645458c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a26469706673582212209e3d93fb2c583f87c5e7b5f65e7120cd6baef6f48cb337b1e817fe053019930264736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "owner": "- owner of the tokens",
          "spender": "- entity allowed to spend the tokens"
        },
        "returns": {
          "_0": "uint - remaining amount spender is allowed to transfer"
        }
      },
      "approve(address,uint256)": {
        "details": "emits an Approval event",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "- address we're checking the balance of"
        },
        "returns": {
          "_0": "uint - token balance in the account"
        }
      },
      "canProvideLiquidity(address)": {
        "details": "If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)",
        "returns": {
          "_0": "boolean value indicating whether the address can join a pool"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseApproval(address,uint256)": {
        "details": "emits an Approval eventIf you try to decrease it below the current limit, it's just set to zero (not an error)",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "getController()": {
        "details": "external for gas optimization",
        "returns": {
          "_0": "address - of the owner (AKA controller)"
        }
      },
      "getDenormalizedWeight(address)": {
        "details": "viewlock to prevent calling if it's being updated",
        "returns": {
          "_0": "token weight"
        }
      },
      "increaseApproval(address,uint256)": {
        "details": "emits an Approval event",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "isPublicSwap()": {
        "details": "viewLock, because setPublicSwap is lock      bPool is a contract interface; function calls on it are external",
        "returns": {
          "_0": "Current value of isPublicSwap"
        }
      },
      "name()": {
        "details": "Returns the name of the token.      We allow the user to set this name (as well as the symbol).      Alternatives are 1) A fixed string (original design)                       2) A fixed string plus the user-defined symbol                          return string(abi.encodePacked(NAME, \"-\", _symbol));"
      },
      "removeWhitelistedLiquidityProvider(address[])": {
        "params": {
          "providers": "- addresses of the liquidity provider"
        }
      },
      "setController(address)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "setPublicSwap(bool)": {
        "details": "If this smart pool has canPauseSwapping enabled, we can turn publicSwap off if it's already on      Note that if they turn swapping off - but then finalize the pool - finalizing will turn the      swapping back on. They're not supposed to finalize the underlying pool... would defeat the      smart pool functions. (Only the owner can finalize the pool - which is this contract -      so there is no risk from outside.)      bPool is a contract interface; function calls on it are external",
        "params": {
          "publicSwap": "new value of the swap"
        }
      },
      "setSwapFee(uint256)": {
        "details": "Keep the local version and core in sync (see below)      bPool is a contract interface; function calls on it are external",
        "params": {
          "swapFee": "in Wei"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "declared external for gas optimization",
        "returns": {
          "_0": "uint - total number of tokens in existence"
        }
      },
      "transfer(address,uint256)": {
        "details": "_move emits a Transfer event if successful",
        "params": {
          "amount": "- number of tokens being transferred",
          "recipient": "- entity receiving the tokens"
        },
        "returns": {
          "_0": "bool - result of the transfer (will always be true if it doesn't revert)"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "_move emits a Transfer event if successful; may also emit an Approval event",
        "params": {
          "amount": "- number of tokens being transferred",
          "recipient": "- recipient of the tokens",
          "sender": "- entity sending the tokens (must be caller or allowed to spend on behalf of caller)"
        },
        "returns": {
          "_0": "bool - result of the transfer (will always be true if it doesn't revert)"
        }
      },
      "whitelistLiquidityProvider(address[])": {
        "params": {
          "providers": "- addresses of the liquidity provider"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Getter for allowance: amount spender will be allowed to spend on behalf of owner"
      },
      "approve(address,uint256)": {
        "notice": "Approve owner (sender) to spend a certain amount"
      },
      "balanceOf(address)": {
        "notice": "Getter for current account balance"
      },
      "canProvideLiquidity(address)": {
        "notice": "Check if an address is a liquidity provider"
      },
      "decreaseApproval(address,uint256)": {
        "notice": "Decrease the amount the spender is allowed to spend on behalf of the owner (sender)"
      },
      "getController()": {
        "notice": "Returns the address of the current owner"
      },
      "getDenormalizedWeight(address)": {
        "notice": "Get the denormalized weight of a token"
      },
      "increaseApproval(address,uint256)": {
        "notice": "Increase the amount the spender is allowed to spend on behalf of the owner (sender)"
      },
      "isPublicSwap()": {
        "notice": "Getter for the publicSwap field on the underlying pool"
      },
      "removeWhitelistedLiquidityProvider(address[])": {
        "notice": "Remove from the whitelist of liquidity providers (if enabled)"
      },
      "setController(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "setPublicSwap(bool)": {
        "notice": "Set the public swap flag on the underlying pool"
      },
      "setSwapFee(uint256)": {
        "notice": "Set the swap fee on the underlying pool"
      },
      "totalSupply()": {
        "notice": "Getter for the total supply"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer the given amount from sender (caller) to recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer the given amount from sender to recipient"
      },
      "whitelistLiquidityProvider(address[])": {
        "notice": "Add to the whitelist of liquidity providers (if enabled)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5481,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "varTotalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5485,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_balance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5491,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_allowance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5493,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 5495,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 12020,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 12098,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4097,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "bFactory",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IBFactory)5435"
      },
      {
        "astId": 4099,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "bPool",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IBPool)5402"
      },
      {
        "astId": 4101,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "rights",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Rights)13040_storage"
      },
      {
        "astId": 4103,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "gradualUpdate",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(GradualUpdateParams)13344_storage"
      },
      {
        "astId": 4105,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "newToken",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(NewTokenParams)13333_storage"
      },
      {
        "astId": 4107,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_initialSwapFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4109,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_initialProtocolFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4111,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_initialAccessAddress",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 4114,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_initialTokens",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4117,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_initialBalances",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4119,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "minimumWeightChangeBlockPeriod",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 4121,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "addTokenTimeLockInBlocks",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 4125,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "_liquidityProviderWhitelist",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4127,
        "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
        "label": "bspCap",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBFactory)5435": {
        "encoding": "inplace",
        "label": "contract IBFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IBPool)5402": {
        "encoding": "inplace",
        "label": "contract IBPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GradualUpdateParams)13344_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.GradualUpdateParams",
        "members": [
          {
            "astId": 13335,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13337,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13340,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "startWeights",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 13343,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "endWeights",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(NewTokenParams)13333_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.NewTokenParams",
        "members": [
          {
            "astId": 13324,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13326,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "isCommitted",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13328,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "commitBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13330,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "denorm",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13332,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "balance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Rights)13040_storage": {
        "encoding": "inplace",
        "label": "struct RightsManager.Rights",
        "members": [
          {
            "astId": 13027,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "canPauseSwapping",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13029,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "canChangeSwapFee",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13031,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "canChangeWeights",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13033,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "canAddRemoveTokens",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13035,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "canWhitelistLPs",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13037,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "canChangeCap",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13039,
            "contract": "contracts/ConfigurableRightsPoolExtension.sol:ConfigurableRightsPoolExtension",
            "label": "canChangeProtocolFee",
            "offset": 6,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}