{
  "address": "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "restrictedAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "unrestrictedAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESTRICTED_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUPER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNRESTRICTED_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRoles",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "internalType": "struct FCXAccessControl.GrantParams[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "grantRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x517e392b2bbb7f5901c037df2466d3b33150236b2db8cad024e3ec8b92554486",
  "receipt": {
    "to": null,
    "from": "0xf29162ed5Ed4Da23656C5190aae71e61Bb074AeC",
    "contractAddress": "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
    "transactionIndex": 0,
    "gasUsed": "1090649",
    "logsBloom": "0x
    "blockHash": "0x4b956e044e5f3df8c1d1470f896de3d66de92c23a395931754292de3c774234b",
    "transactionHash": "0x517e392b2bbb7f5901c037df2466d3b33150236b2db8cad024e3ec8b92554486",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12020299,
        "transactionHash": "0x517e392b2bbb7f5901c037df2466d3b33150236b2db8cad024e3ec8b92554486",
        "address": "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4b956e044e5f3df8c1d1470f896de3d66de92c23a395931754292de3c774234b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12020299,
        "transactionHash": "0x517e392b2bbb7f5901c037df2466d3b33150236b2db8cad024e3ec8b92554486",
        "address": "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4b956e044e5f3df8c1d1470f896de3d66de92c23a395931754292de3c774234b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12020299,
        "transactionHash": "0x517e392b2bbb7f5901c037df2466d3b33150236b2db8cad024e3ec8b92554486",
        "address": "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xa0962abd2c4b5637166310be8994eed908f58b5b5396ff129d47c68a40bd22be",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x4b956e044e5f3df8c1d1470f896de3d66de92c23a395931754292de3c774234b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12020299,
        "transactionHash": "0x517e392b2bbb7f5901c037df2466d3b33150236b2db8cad024e3ec8b92554486",
        "address": "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xf1ace51d64be07e49551907f704b17a27f35380de69c40bb47b25cccef03fe1e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x4b956e044e5f3df8c1d1470f896de3d66de92c23a395931754292de3c774234b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12020299,
        "transactionHash": "0x517e392b2bbb7f5901c037df2466d3b33150236b2db8cad024e3ec8b92554486",
        "address": "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689",
          "0x000000000000000000000000f29162ed5ed4da23656c5190aae71e61bb074aec",
          "0x000000000000000000000000f29162ed5ed4da23656c5190aae71e61bb074aec"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x4b956e044e5f3df8c1d1470f896de3d66de92c23a395931754292de3c774234b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12020299,
        "transactionHash": "0x517e392b2bbb7f5901c037df2466d3b33150236b2db8cad024e3ec8b92554486",
        "address": "0xFB2b87255Aac30a0B66f75330B428a62351C8A75",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000f29162ed5ed4da23656c5190aae71e61bb074aec",
          "0x000000000000000000000000f29162ed5ed4da23656c5190aae71e61bb074aec"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x4b956e044e5f3df8c1d1470f896de3d66de92c23a395931754292de3c774234b"
      }
    ],
    "blockNumber": 12020299,
    "cumulativeGasUsed": "1090649",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf29162ed5Ed4Da23656C5190aae71e61Bb074AeC",
    [],
    []
  ],
  "solcInputHash": "47a48e3fded8a512a17f386cfbcb5bcc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"restrictedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"unrestrictedAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESTRICTED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNRESTRICTED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoles\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"internalType\":\"struct FCXAccessControl.GrantParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"grantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"FCX user manager.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoles(address)\":{\"details\":\"get all roles of account\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"grantRoles((address,bytes32)[])\":{\"details\":\"Grants `roles` to `accounts`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"whitelisted(address)\":{\"details\":\"check account in whitelist\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FCXAccessControl.sol\":\"FCXAccessControl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/FCXAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract FCXAccessControl is AccessControl {\\n    bytes32 public constant SUPER_ADMIN_ROLE = keccak256(\\\"SUPER_ADMIN_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RESTRICTED_ROLE = keccak256(\\\"RESTRICTED_ROLE\\\");\\n    bytes32 public constant UNRESTRICTED_ROLE = keccak256(\\\"UNRESTRICTED_ROLE\\\");\\n\\n    struct GrantParams {\\n        address account;\\n        bytes32 role;\\n    }\\n\\n    /**\\n     * @dev FCX user manager.\\n     */\\n    constructor(\\n        address adminAddress,\\n        address[] memory restrictedAddresses,\\n        address[] memory unrestrictedAddresses\\n    ) public {\\n        _setRoleAdmin(SUPER_ADMIN_ROLE, SUPER_ADMIN_ROLE);\\n        _setRoleAdmin(ADMIN_ROLE, SUPER_ADMIN_ROLE);\\n        _setRoleAdmin(RESTRICTED_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(UNRESTRICTED_ROLE, ADMIN_ROLE);\\n\\n        // deployer + self administration\\n        _setupRole(SUPER_ADMIN_ROLE, adminAddress);\\n        _setupRole(ADMIN_ROLE, adminAddress);\\n\\n        // register proposers\\n        for (uint256 i = 0; i < restrictedAddresses.length; ++i) {\\n            _setupRole(RESTRICTED_ROLE, restrictedAddresses[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < unrestrictedAddresses.length; ++i) {\\n            _setupRole(UNRESTRICTED_ROLE, unrestrictedAddresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Grants `roles` to `accounts`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRoles(GrantParams[] calldata params) public virtual {\\n        for (uint256 i = 0; i < params.length; i++) {\\n            GrantParams calldata entity = params[i];\\n            if (entity.role == RESTRICTED_ROLE && hasRole(UNRESTRICTED_ROLE, entity.account)) {\\n                revokeRole(UNRESTRICTED_ROLE, entity.account);\\n            }\\n            if (entity.role == UNRESTRICTED_ROLE && hasRole(RESTRICTED_ROLE, entity.account)) {\\n                revokeRole(RESTRICTED_ROLE, entity.account);\\n            }\\n\\n            if (entity.role == ADMIN_ROLE && !hasRole(UNRESTRICTED_ROLE, entity.account)) {\\n                grantRole(UNRESTRICTED_ROLE, entity.account);\\n            }\\n\\n            grantRole(entity.role, entity.account);\\n        }\\n    }\\n\\n    function blacklist(address[] calldata accounts) public virtual {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            if (hasRole(UNRESTRICTED_ROLE, account)) {\\n                revokeRole(UNRESTRICTED_ROLE, account);\\n            }\\n            if (hasRole(RESTRICTED_ROLE, account)) {\\n                revokeRole(RESTRICTED_ROLE, account);\\n            }\\n            if (hasRole(ADMIN_ROLE, account)) {\\n                revokeRole(ADMIN_ROLE, account);\\n            }\\n            if (hasRole(SUPER_ADMIN_ROLE, account)) {\\n                revokeRole(SUPER_ADMIN_ROLE, account);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev get all roles of account\\n     */\\n    function getRoles(address account) public view returns (bytes32[] memory) {\\n        bytes32[4] memory roles = [ADMIN_ROLE, RESTRICTED_ROLE, UNRESTRICTED_ROLE, SUPER_ADMIN_ROLE];\\n        bytes32[] memory result = new bytes32[](4);\\n\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            if (hasRole(roles[i], account)) {\\n                result[i] = roles[i];\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev check account in whitelist\\n     */\\n    function whitelisted(address account) public view returns (bool) {\\n        bytes32[4] memory roles = [ADMIN_ROLE, RESTRICTED_ROLE, UNRESTRICTED_ROLE, SUPER_ADMIN_ROLE];\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            if (hasRole(roles[i], account)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x94da61e5ec9b68bf1ac607052a0c93326d52ec5ed77c417bdb4a4be301a6f4a0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001321380380620013218339810160408190526200003491620003b0565b6200004f600080516020620012a18339815191528062000190565b62000079600080516020620012c1833981519152600080516020620012a183398151915262000190565b620000a360008051602062001301833981519152600080516020620012c183398151915262000190565b620000cd600080516020620012e1833981519152600080516020620012c183398151915262000190565b620000e8600080516020620012a183398151915284620001e2565b62000103600080516020620012c183398151915284620001e2565b60005b82518110156200014e5762000145600080516020620013018339815191528483815181106200013157fe5b6020026020010151620001e260201b60201c565b60010162000106565b5060005b815181101562000186576200017d600080516020620012e18339815191528383815181106200013157fe5b60010162000152565b505050506200042b565b600082815260208190526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526020829052604090912060020155565b620001ee8282620001f2565b5050565b60008281526020818152604090912062000217918390620007eb6200026b821b17901c565b15620001ee57620002276200028b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000282836001600160a01b0384166200028f565b90505b92915050565b3390565b60006200029d8383620002de565b620002d55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000285565b50600062000285565b60009081526001919091016020526040902054151590565b80516001600160a01b03811681146200028557600080fd5b600082601f8301126200031f578081fd5b81516001600160401b038082111562000336578283fd5b60208083026040518282820101818110858211171562000354578687fd5b6040528481529450818501925085820181870183018810156200037657600080fd5b600091505b84821015620003a557620003908882620002f6565b8452928201926001919091019082016200037b565b505050505092915050565b600080600060608486031215620003c5578283fd5b620003d18585620002f6565b60208501519093506001600160401b0380821115620003ee578384fd5b620003fc878388016200030e565b9350604086015191508082111562000412578283fd5b5062000421868287016200030e565b9150509250925092565b610e66806200043b6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806391d1485411610097578063ce6ccfaf11610066578063ce6ccfaf146101e4578063d547741f14610204578063d936547e14610217578063f634dcbd1461022a57610100565b806391d14854146101a1578063a217fddf146101c1578063c39893ff146101c9578063ca15c873146101d157610100565b80634460bdd6116100d35780634460bdd6146101695780635321afb01461017157806375b238fc146101795780639010d07c1461018157610100565b8063041f173f14610105578063248a9ca31461011a5780632f2ff15d1461014357806336568abe14610156575b600080fd5b610118610113366004610ad4565b61023d565b005b61012d610128366004610ba1565b61034f565b60405161013a9190610c77565b60405180910390f35b610118610151366004610bb9565b610367565b610118610164366004610bb9565b6103b8565b61012d6103fa565b61012d61040c565b61012d61041e565b61019461018f366004610bf3565b610430565b60405161013a9190610c14565b6101b46101af366004610bb9565b610451565b60405161013a9190610c6c565b61012d610469565b61012d61046e565b61012d6101df366004610ba1565b610480565b6101f76101f2366004610aa6565b610497565b60405161013a9190610c28565b610118610212366004610bb9565b6105a8565b6101b4610225366004610aa6565b6105e2565b610118610238366004610b43565b61068f565b60005b8181101561034a57600083838381811061025657fe5b905060200201602081019061026b9190610aa6565b9050610285600080516020610df183398151915282610451565b156102a2576102a2600080516020610df1833981519152826105a8565b6102ba600080516020610e1183398151915282610451565b156102d7576102d7600080516020610e11833981519152826105a8565b6102ef600080516020610dd183398151915282610451565b1561030c5761030c600080516020610dd1833981519152826105a8565b610324600080516020610db183398151915282610451565b1561034157610341600080516020610db1833981519152826105a8565b50600101610240565b505050565b6000818152602081905260409020600201545b919050565b600082815260208190526040902060020154610385906101af610800565b6103aa5760405162461bcd60e51b81526004016103a190610cc2565b60405180910390fd5b6103b48282610804565b5050565b6103c0610800565b6001600160a01b0316816001600160a01b0316146103f05760405162461bcd60e51b81526004016103a190610d61565b6103b4828261086d565b600080516020610db183398151915281565b600080516020610df183398151915281565b600080516020610dd183398151915281565b600082815260208190526040812061044890836108d6565b90505b92915050565b600082815260208190526040812061044890836108e2565b600081565b600080516020610e1183398151915281565b600081815260208190526040812061044b906108f7565b60606104a1610a88565b6040518060800160405280600080516020610dd18339815191528152602001600080516020610e118339815191528152602001600080516020610df18339815191528152602001600080516020610db183398151915281525090506060600467ffffffffffffffff8111801561051657600080fd5b50604051908082528060200260200182016040528015610540578160200160208202803683370190505b50905060005b60048110156105a05761056983826004811061055e57fe5b602002015186610451565b156105985782816004811061057a57fe5b602002015182828151811061058b57fe5b6020026020010181815250505b600101610546565b509392505050565b6000828152602081905260409020600201546105c6906101af610800565b6103f05760405162461bcd60e51b81526004016103a190610d11565b60006105ec610a88565b6040518060800160405280600080516020610dd18339815191528152602001600080516020610e118339815191528152602001600080516020610df18339815191528152602001600080516020610db1833981519152815250905060005b60048110156106855761066d82826004811061066257fe5b602002015185610451565b1561067d57600192505050610362565b60010161064a565b5060009392505050565b60005b8181101561034a57368383838181106106a757fe5b9050604002019050600080516020610e1183398151915281602001351480156106ea57506106ea600080516020610df18339815191526101af6020840184610aa6565b1561070e5761070e600080516020610df18339815191526102126020840184610aa6565b600080516020610df183398151915281602001351480156107495750610749600080516020610e118339815191526101af6020840184610aa6565b1561076d5761076d600080516020610e118339815191526102126020840184610aa6565b600080516020610dd183398151915281602001351480156107aa57506107a8600080516020610df18339815191526101af6020840184610aa6565b155b156107ce576107ce600080516020610df18339815191526101516020840184610aa6565b6107e2602082018035906101519084610aa6565b50600101610692565b6000610448836001600160a01b038416610902565b3390565b600082815260208190526040902061081c90826107eb565b156103b457610829610800565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020610885908261094c565b156103b457610892610800565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006104488383610961565b6000610448836001600160a01b0384166109a6565b600061044b826109be565b600061090e83836109a6565b6109445750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561044b565b50600061044b565b6000610448836001600160a01b0384166109c2565b815460009082106109845760405162461bcd60e51b81526004016103a190610c80565b82600001828154811061099357fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015610a7e57835460001980830191908101906000908790839081106109f557fe5b9060005260206000200154905080876000018481548110610a1257fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610a4257fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061044b565b600091505061044b565b60405180608001604052806004906020820280368337509192915050565b600060208284031215610ab7578081fd5b81356001600160a01b0381168114610acd578182fd5b9392505050565b60008060208385031215610ae6578081fd5b823567ffffffffffffffff80821115610afd578283fd5b818501915085601f830112610b10578283fd5b813581811115610b1e578384fd5b8660208083028501011115610b31578384fd5b60209290920196919550909350505050565b60008060208385031215610b55578182fd5b823567ffffffffffffffff80821115610b6c578384fd5b818501915085601f830112610b7f578384fd5b813581811115610b8d578485fd5b866020604083028501011115610b31578485fd5b600060208284031215610bb2578081fd5b5035919050565b60008060408385031215610bcb578182fd5b8235915060208301356001600160a01b0381168114610be8578182fd5b809150509250929050565b60008060408385031215610c05578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610c6057835183529284019291840191600101610c44565b50909695505050505050565b901515815260200190565b90815260200190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b60608201526080019056fe7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775f1ace51d64be07e49551907f704b17a27f35380de69c40bb47b25cccef03fe1ea0962abd2c4b5637166310be8994eed908f58b5b5396ff129d47c68a40bd22bea2646970667358221220283f7935bb1acf572b30dbfddc3a957c043e193eecea79d1483b46bc0187982c64736f6c634300060c00337613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775f1ace51d64be07e49551907f704b17a27f35380de69c40bb47b25cccef03fe1ea0962abd2c4b5637166310be8994eed908f58b5b5396ff129d47c68a40bd22be",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806391d1485411610097578063ce6ccfaf11610066578063ce6ccfaf146101e4578063d547741f14610204578063d936547e14610217578063f634dcbd1461022a57610100565b806391d14854146101a1578063a217fddf146101c1578063c39893ff146101c9578063ca15c873146101d157610100565b80634460bdd6116100d35780634460bdd6146101695780635321afb01461017157806375b238fc146101795780639010d07c1461018157610100565b8063041f173f14610105578063248a9ca31461011a5780632f2ff15d1461014357806336568abe14610156575b600080fd5b610118610113366004610ad4565b61023d565b005b61012d610128366004610ba1565b61034f565b60405161013a9190610c77565b60405180910390f35b610118610151366004610bb9565b610367565b610118610164366004610bb9565b6103b8565b61012d6103fa565b61012d61040c565b61012d61041e565b61019461018f366004610bf3565b610430565b60405161013a9190610c14565b6101b46101af366004610bb9565b610451565b60405161013a9190610c6c565b61012d610469565b61012d61046e565b61012d6101df366004610ba1565b610480565b6101f76101f2366004610aa6565b610497565b60405161013a9190610c28565b610118610212366004610bb9565b6105a8565b6101b4610225366004610aa6565b6105e2565b610118610238366004610b43565b61068f565b60005b8181101561034a57600083838381811061025657fe5b905060200201602081019061026b9190610aa6565b9050610285600080516020610df183398151915282610451565b156102a2576102a2600080516020610df1833981519152826105a8565b6102ba600080516020610e1183398151915282610451565b156102d7576102d7600080516020610e11833981519152826105a8565b6102ef600080516020610dd183398151915282610451565b1561030c5761030c600080516020610dd1833981519152826105a8565b610324600080516020610db183398151915282610451565b1561034157610341600080516020610db1833981519152826105a8565b50600101610240565b505050565b6000818152602081905260409020600201545b919050565b600082815260208190526040902060020154610385906101af610800565b6103aa5760405162461bcd60e51b81526004016103a190610cc2565b60405180910390fd5b6103b48282610804565b5050565b6103c0610800565b6001600160a01b0316816001600160a01b0316146103f05760405162461bcd60e51b81526004016103a190610d61565b6103b4828261086d565b600080516020610db183398151915281565b600080516020610df183398151915281565b600080516020610dd183398151915281565b600082815260208190526040812061044890836108d6565b90505b92915050565b600082815260208190526040812061044890836108e2565b600081565b600080516020610e1183398151915281565b600081815260208190526040812061044b906108f7565b60606104a1610a88565b6040518060800160405280600080516020610dd18339815191528152602001600080516020610e118339815191528152602001600080516020610df18339815191528152602001600080516020610db183398151915281525090506060600467ffffffffffffffff8111801561051657600080fd5b50604051908082528060200260200182016040528015610540578160200160208202803683370190505b50905060005b60048110156105a05761056983826004811061055e57fe5b602002015186610451565b156105985782816004811061057a57fe5b602002015182828151811061058b57fe5b6020026020010181815250505b600101610546565b509392505050565b6000828152602081905260409020600201546105c6906101af610800565b6103f05760405162461bcd60e51b81526004016103a190610d11565b60006105ec610a88565b6040518060800160405280600080516020610dd18339815191528152602001600080516020610e118339815191528152602001600080516020610df18339815191528152602001600080516020610db1833981519152815250905060005b60048110156106855761066d82826004811061066257fe5b602002015185610451565b1561067d57600192505050610362565b60010161064a565b5060009392505050565b60005b8181101561034a57368383838181106106a757fe5b9050604002019050600080516020610e1183398151915281602001351480156106ea57506106ea600080516020610df18339815191526101af6020840184610aa6565b1561070e5761070e600080516020610df18339815191526102126020840184610aa6565b600080516020610df183398151915281602001351480156107495750610749600080516020610e118339815191526101af6020840184610aa6565b1561076d5761076d600080516020610e118339815191526102126020840184610aa6565b600080516020610dd183398151915281602001351480156107aa57506107a8600080516020610df18339815191526101af6020840184610aa6565b155b156107ce576107ce600080516020610df18339815191526101516020840184610aa6565b6107e2602082018035906101519084610aa6565b50600101610692565b6000610448836001600160a01b038416610902565b3390565b600082815260208190526040902061081c90826107eb565b156103b457610829610800565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020610885908261094c565b156103b457610892610800565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006104488383610961565b6000610448836001600160a01b0384166109a6565b600061044b826109be565b600061090e83836109a6565b6109445750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561044b565b50600061044b565b6000610448836001600160a01b0384166109c2565b815460009082106109845760405162461bcd60e51b81526004016103a190610c80565b82600001828154811061099357fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015610a7e57835460001980830191908101906000908790839081106109f557fe5b9060005260206000200154905080876000018481548110610a1257fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610a4257fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061044b565b600091505061044b565b60405180608001604052806004906020820280368337509192915050565b600060208284031215610ab7578081fd5b81356001600160a01b0381168114610acd578182fd5b9392505050565b60008060208385031215610ae6578081fd5b823567ffffffffffffffff80821115610afd578283fd5b818501915085601f830112610b10578283fd5b813581811115610b1e578384fd5b8660208083028501011115610b31578384fd5b60209290920196919550909350505050565b60008060208385031215610b55578182fd5b823567ffffffffffffffff80821115610b6c578384fd5b818501915085601f830112610b7f578384fd5b813581811115610b8d578485fd5b866020604083028501011115610b31578485fd5b600060208284031215610bb2578081fd5b5035919050565b60008060408385031215610bcb578182fd5b8235915060208301356001600160a01b0381168114610be8578182fd5b809150509250929050565b60008060408385031215610c05578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610c6057835183529284019291840191600101610c44565b50909695505050505050565b901515815260200190565b90815260200190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b60608201526080019056fe7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775f1ace51d64be07e49551907f704b17a27f35380de69c40bb47b25cccef03fe1ea0962abd2c4b5637166310be8994eed908f58b5b5396ff129d47c68a40bd22bea2646970667358221220283f7935bb1acf572b30dbfddc3a957c043e193eecea79d1483b46bc0187982c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "FCX user manager."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoles(address)": {
        "details": "get all roles of account"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "grantRoles((address,bytes32)[])": {
        "details": "Grants `roles` to `accounts`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "whitelisted(address)": {
        "details": "check account in whitelist"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/FCXAccessControl.sol:FCXAccessControl",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1813_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1812,
            "contract": "contracts/FCXAccessControl.sol:FCXAccessControl",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1548_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/FCXAccessControl.sol:FCXAccessControl",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)1813_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/FCXAccessControl.sol:FCXAccessControl",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1548_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1543,
            "contract": "contracts/FCXAccessControl.sol:FCXAccessControl",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1547,
            "contract": "contracts/FCXAccessControl.sol:FCXAccessControl",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}