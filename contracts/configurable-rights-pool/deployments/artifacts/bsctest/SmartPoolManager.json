{
  "address": "0x00098026682c3B24f9aD5e60311Ce7A0cb753b44",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exitFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pAiAfterExitFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "actualAmountsOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPoolAmountIn",
          "type": "uint256"
        }
      ],
      "name": "exitswapExternAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exitFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "exitswapPoolAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exitFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "joinPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualAmountsIn",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPoolAmountOut",
          "type": "uint256"
        }
      ],
      "name": "joinswapExternAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "joinswapPoolAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3daf6f483f090cae77a3c9811b7c5c2222c72d50b90978d8d7f854f12f87a71",
  "receipt": {
    "to": null,
    "from": "0xf29162ed5Ed4Da23656C5190aae71e61Bb074AeC",
    "contractAddress": "0x00098026682c3B24f9aD5e60311Ce7A0cb753b44",
    "transactionIndex": 11,
    "gasUsed": "3556940",
    "logsBloom": "0x
    "blockHash": "0x353d61b988fc1003bf2b77ec44faa65b2181025b99146131945874afcd9b8e9a",
    "transactionHash": "0xf3daf6f483f090cae77a3c9811b7c5c2222c72d50b90978d8d7f854f12f87a71",
    "logs": [],
    "blockNumber": 13215581,
    "cumulativeGasUsed": "10681090",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3ab02400ec88730fc886e6b58fe6ae75",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pAiAfterExitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"actualAmountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolAmountIn\",\"type\":\"uint256\"}],\"name\":\"exitswapExternAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exitswapPoolAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualAmountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"joinswapExternAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"joinswapPoolAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Balancer Labs\",\"kind\":\"dev\",\"methods\":{\"applyAddToken(IConfigurableRightsPool,IBPool,uint256,SmartPoolManager.NewTokenParams storage)\":{\"params\":{\"addTokenTimeLockInBlocks\":\"-  Wait time between committing and applying a new token\",\"bPool\":\"- Core BPool the CRP is wrapping\",\"newToken\":\"- NewTokenParams struct used to hold the token data (in CRP storage)\",\"self\":\"- ConfigurableRightsPool instance calling the library\"}},\"commitAddToken(IBPool,address,uint256,uint256,SmartPoolManager.NewTokenParams storage)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"balance\":\"- how much to be added\",\"denormalizedWeight\":\"- the desired token weight\",\"newToken\":\"- NewTokenParams struct used to hold the token data (in CRP storage)\",\"token\":\"- the token to be added\"}},\"exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"minAmountsOut\":\"- minimum amount of asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\",\"self\":\"- ConfigurableRightsPool instance calling the library\"},\"returns\":{\"actualAmountsOut\":\"- calculated amounts of each token to pull\",\"exitFee\":\"- calculated exit fee\",\"pAiAfterExitFee\":\"- final amount in (after accounting for exit fee)\"}},\"exitswapExternAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"maxPoolAmountIn\":\"- maximum pool tokens to be redeemed\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenAmountOut\":\"- amount of underlying asset tokens to receive\",\"tokenOut\":\"- which token the caller wants to receive\"},\"returns\":{\"exitFee\":\"- calculated exit fee\",\"poolAmountIn\":\"- amount of pool tokens redeemed\"}},\"exitswapPoolAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"minAmountOut\":\"- minimum asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenOut\":\"- which token the caller wants to receive\"},\"returns\":{\"exitFee\":\"- calculated exit fee\",\"tokenAmountOut\":\"- amount of asset tokens returned\"}},\"joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"maxAmountsIn\":\"- Max amount of asset tokens to spend\",\"poolAmountOut\":\"- number of pool tokens to receive\",\"self\":\"- ConfigurableRightsPool instance calling the library\"},\"returns\":{\"actualAmountsIn\":\"- calculated values of the tokens to pull in\"}},\"joinswapExternAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"minPoolAmountOut\":\"- minimum of pool tokens to receive\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenAmountIn\":\"- amount of deposit\",\"tokenIn\":\"- which token we're transferring in\"},\"returns\":{\"poolAmountOut\":\"- amount of pool tokens minted and transferred\"}},\"joinswapPoolAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"maxAmountIn\":\"- Maximum asset tokens that can be pulled to pay for the pool tokens\",\"poolAmountOut\":\"- amount of pool tokens to be received\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenIn\":\"- which token we're transferring in (system calculates amount required)\"},\"returns\":{\"tokenAmountIn\":\"- amount of asset tokens transferred in to purchase the pool tokens\"}},\"pokeWeights(IBPool,SmartPoolManager.GradualUpdateParams storage)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"gradualUpdate\":\"- gradual update parameters from the CRP\"}},\"removeToken(IConfigurableRightsPool,IBPool,address)\":{\"details\":\"Logic in the CRP controls when ths can be called. There are two related permissions:      AddRemoveTokens - which allows removing down to the underlying BPool limit of two      RemoveAllTokens - which allows completely draining the pool by removing all tokens                        This can result in a non-viable pool with 0 or 1 tokens (by design),                        meaning all swapping or binding operations would fail in this state\",\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"token\":\"- token to remove\"}},\"updateWeight(IConfigurableRightsPool,IBPool,address,uint256)\":{\"details\":\"Refactored to library to make CRPFactory deployable\",\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"newWeight\":\"- new weight of the token\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"token\":\"- token to be reweighted\"}},\"updateWeightsGradually(IBPool,SmartPoolManager.GradualUpdateParams storage,uint256[],uint256,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"endBlock\":\"- when weights will be at their final values\",\"minimumWeightChangeBlockPeriod\":\"- needed to validate the block period\",\"newWeights\":\"- final weights we want to get to\",\"startBlock\":\"- when weights should start to change\"}},\"verifyTokenCompliance(address)\":{\"details\":\"Will revert if invalid\",\"params\":{\"token\":\"- The prospective token to verify\"}},\"verifyTokenCompliance(address[])\":{\"details\":\"Will revert if invalid - overloaded to save space in the main contract\",\"params\":{\"tokens\":\"- The prospective tokens to verify\"}}},\"title\":\"Factor out the weight updates\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"applyAddToken(IConfigurableRightsPool,IBPool,uint256,SmartPoolManager.NewTokenParams storage)\":{\"notice\":\"Add the token previously committed (in commitAddToken) to the pool\"},\"commitAddToken(IBPool,address,uint256,uint256,SmartPoolManager.NewTokenParams storage)\":{\"notice\":\"Schedule (commit) a token to be added; must call applyAddToken after a fixed         number of blocks to actually add the token\"},\"exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"notice\":\"Exit a pool - redeem pool tokens for underlying assets\"},\"exitswapExternAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"notice\":\"Exit a pool - redeem pool tokens for a specific amount of underlying assets         Asset must be present in the pool\"},\"exitswapPoolAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"notice\":\"Exit a pool - redeem a specific number of pool tokens for an underlying asset         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\"},\"joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"notice\":\"Join a pool\"},\"joinswapExternAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"notice\":\"Join by swapping a fixed amount of an external token in (must be present in the pool)         System calculates the pool token amount\"},\"joinswapPoolAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"notice\":\"Join by swapping an external token in (must be present in the pool)         To receive an exact amount of pool tokens out. System calculates the deposit amount\"},\"pokeWeights(IBPool,SmartPoolManager.GradualUpdateParams storage)\":{\"notice\":\"External function called to make the contract update weights according to plan\"},\"removeToken(IConfigurableRightsPool,IBPool,address)\":{\"notice\":\"Remove a token from the pool\"},\"updateWeight(IConfigurableRightsPool,IBPool,address,uint256)\":{\"notice\":\"Update the weight of an existing token\"},\"updateWeightsGradually(IBPool,SmartPoolManager.GradualUpdateParams storage,uint256[],uint256,uint256,uint256)\":{\"notice\":\"Update weights in a predetermined way, between startBlock and endBlock,         through external cals to pokeWeights\"},\"verifyTokenCompliance(address)\":{\"notice\":\"Non ERC20-conforming tokens are problematic; don't allow them in pools\"},\"verifyTokenCompliance(address[])\":{\"notice\":\"Non ERC20-conforming tokens are problematic; don't allow them in pools\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/SmartPoolManager.sol\":\"SmartPoolManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setProtocolFee(uint256 protocolFee) external;\\n\\n    function setRoles(bytes32[] memory roles) external;\\n\\n    function setAccessControlAddress(address accessAddress) external;\\n\\n    function setPublicSwap(bool publicSwap) external;\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function gulp(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint256);\\n\\n    function getSwapFee() external view returns (uint256);\\n\\n    function getProtocolFee() external view returns (uint256);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint256);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXIT_FEE() external view returns (uint256);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) external pure returns (uint256 tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) external pure returns (uint256 poolAmountIn);\\n\\n    function isFinalized() external view returns (bool);\\n\\n    function getNumTokens() external view returns (uint256);\\n\\n    function getCurrentTokens() external view returns (address[] memory);\\n\\n    function getFinalTokens() external view returns (address[] memory);\\n\\n    function getNormalizedWeight(address) external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function getAccessControlAddress() external view returns (address);\\n\\n    function getRoles() external view returns (bytes32[] memory);\\n\\n    function setController(address) external;\\n\\n    function getSpotPrice(address, address) external view returns (uint256);\\n\\n    function getSpotPriceSansFee(address, address) external view returns (uint256);\\n\\n    function finalize() external;\\n\\n    // BPool function\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    function joinPool(uint256, uint256[] calldata) external;\\n\\n    function swapExactAmountIn(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address,\\n        uint256,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    function exitPool(uint256, uint256[] calldata) external;\\n\\n    function joinswapExternAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountIn);\\n\\n    // ERC20\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n\\n    function increaseApproval(address, uint256) external returns (bool);\\n\\n    function decreaseApproval(address, uint256) external returns (bool);\\n}\\n\\ninterface IBFactory {\\n    function newBPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getAccessControlAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8008bf5575ad8eb14ea4f198462999fd47ea09d756436dba1e3d3491eece8f4d\",\"license\":\"GPL-3.0-or-later\"},\"interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\npragma experimental ABIEncoderV2;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        CHANGE_CAP,\\n        CHANGE_PROTOCOL_FEE\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n        bool canChangeProtocolFee;\\n    }\\n\\n    function mintPoolShareFromLib(uint256 amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint256 amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint256 amount) external;\\n\\n    function burnPoolShareFromLib(uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setProtocolFee(uint256 protocolFee) external;\\n\\n    function setRoles(bytes32[] memory roles) external;\\n\\n    function setAccessControlAddress(address accessAddress) external;\\n\\n    function setPublicSwap(bool publicSwap) external;\\n\\n    function setCap(uint256 newCap) external;\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function createPool(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function createPool(uint256) external;\\n\\n    function updateWeight(address, uint256) external;\\n\\n    function updateWeightsGradually(\\n        uint256[] calldata,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function pokeWeights() external;\\n\\n    function commitAddToken(\\n        address,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function applyAddToken() external;\\n\\n    function removeToken(address) external;\\n\\n    function joinPool(uint256, uint256[] calldata) external;\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n\\n    function joinswapExternAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountOut);\\n\\n    function joinswapPoolAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountIn);\\n\\n    function exitswapPoolAmountIn(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    function exitswapExternAmountOut(\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256 poolAmountIn);\\n\\n    function whitelistLiquidityProvider(address[] calldata) external;\\n\\n    function removeWhitelistedLiquidityProvider(address[] calldata) external;\\n\\n    function canProvideLiquidity(address) external view returns (bool);\\n\\n    function hasPermission(Permissions) external view returns (bool);\\n\\n    function getDenormalizedWeight(address) external view returns (uint256);\\n\\n    function getRightsManagerVersion() external pure returns (address);\\n\\n    function getBalancerSafeMathVersion() external pure returns (address);\\n\\n    function getSmartPoolManagerVersion() external pure returns (address);\\n\\n    function createPoolInternal(uint256) external;\\n\\n    function approve(address, uint256) external;\\n\\n    function bspCap() external view returns (uint256);\\n\\n    function bPool() external view returns (address);\\n\\n    function rights() external view returns (Rights memory);\\n\\n    // erc20\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function increaseApproval(address, uint256) external returns (bool);\\n\\n    function decreaseApproval(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function setCanWhitelistLPs(bool) external;\\n}\\n\",\"keccak256\":\"0xf3fb362693754c3985e3305b68c600126cdfc9940cd566198c7dd2155e4fb46c\",\"license\":\"GPL-3.0-or-later\"},\"interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x37d7904de6fabb6ab50b063cc6623997d5f7ff8e0322d0b4ba651c1c00fceed9\",\"license\":\"GPL-3.0-or-later\"},\"libraries/BalancerConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Balancer Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary BalancerConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint256 public constant BONE = 10**18;\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**14;\\n    uint256 public constant MAX_BALANCE = BONE * 10**12;\\n    uint256 public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint256 public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    // uint256 public constant MAX_FEE = BONE / 10;\\n    // FCX: max fee is 100%\\n    uint256 public constant MAX_FEE = BONE;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint256 public constant EXIT_FEE = 0;\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint256 public constant MIN_ASSET_LIMIT = 2;\\n    uint256 public constant MAX_ASSET_LIMIT = 8;\\n    uint256 public constant MAX_UINT = uint256(-1);\\n}\\n\",\"keccak256\":\"0x0823d2332f883801131620e42570203de679566a9de01c2db10a3f87362e42be\",\"license\":\"GPL-3.0-or-later\"},\"libraries/BalancerSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n\\n// Imports\\n\\nimport \\\"./BalancerConstants.sol\\\";\\n\\n/**\\n * @author Balancer Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary BalancerSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (BalancerConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / BalancerConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0){\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * BalancerConstants.BONE;\\n        require(c0 / dividend == BalancerConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        }\\n        else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8525e4ade460fb2f220853beedb56580f2ba0525f92313c079a72cf3b70fd03\",\"license\":\"GPL-3.0-or-later\"},\"libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Balancer Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            // return token.approve(spender, 0);\\n            // FCX: fixed, do not returns\\n            // base on BActions._safeApprove\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf5652b9ccae4c9998987f2c09fb2432607267049352b5574f7f81f6b91350e02\",\"license\":\"GPL-3.0-or-later\"},\"libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../contracts/IBFactory.sol\\\";\\nimport \\\"./BalancerSafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n\\n/**\\n * @author Balancer Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    // Type declarations\\n\\n    struct NewTokenParams {\\n        address addr;\\n        bool isCommitted;\\n        uint commitBlock;\\n        uint denorm;\\n        uint balance;\\n    }\\n\\n    // For blockwise, automated weight updates\\n    // Move weights linearly from startWeights to endWeights,\\n    // between startBlock and endBlock\\n    struct GradualUpdateParams {\\n        uint startBlock;\\n        uint endBlock;\\n        uint[] startWeights;\\n        uint[] endWeights;\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n    */\\n    function updateWeight(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token,\\n        uint newWeight\\n    )\\n        external\\n    {\\n        require(newWeight >= BalancerConstants.MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(newWeight <= BalancerConstants.MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n\\n        uint currentWeight = bPool.getDenormalizedWeight(token);\\n        // Save gas; return immediately on NOOP\\n        if (currentWeight == newWeight) {\\n             return;\\n        }\\n\\n        uint currentBalance = bPool.getBalance(token);\\n        uint totalSupply = self.totalSupply();\\n        uint totalWeight = bPool.getTotalDenormalizedWeight();\\n        uint poolShares;\\n        uint deltaBalance;\\n        uint deltaWeight;\\n        uint newBalance;\\n\\n        if (newWeight < currentWeight) {\\n            // This means the controller will withdraw tokens to keep price\\n            // So they need to redeem PCTokens\\n            deltaWeight = BalancerSafeMath.bsub(currentWeight, newWeight);\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BalancerSafeMath.bmul(totalSupply,\\n                                               BalancerSafeMath.bdiv(deltaWeight, totalWeight));\\n\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BalancerSafeMath.bmul(currentBalance,\\n                                                 BalancerSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // New balance cannot be lower than MIN_BALANCE\\n            newBalance = BalancerSafeMath.bsub(currentBalance, deltaBalance);\\n\\n            require(newBalance >= BalancerConstants.MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n            // First get the tokens from this contract (Pool Controller) to msg.sender\\n            bPool.rebind(token, newBalance, newWeight);\\n\\n            // Now with the tokens this contract can send them to msg.sender\\n            bool xfer = IERC20(token).transfer(msg.sender, deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            self.pullPoolShareFromLib(msg.sender, poolShares);\\n            self.burnPoolShareFromLib(poolShares);\\n        }\\n        else {\\n            // This means the controller will deposit tokens to keep the price.\\n            // They will be minted and given PCTokens\\n            deltaWeight = BalancerSafeMath.bsub(newWeight, currentWeight);\\n\\n            require(BalancerSafeMath.badd(totalWeight, deltaWeight) <= BalancerConstants.MAX_TOTAL_WEIGHT,\\n                    \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BalancerSafeMath.bmul(totalSupply,\\n                                               BalancerSafeMath.bdiv(deltaWeight, totalWeight));\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BalancerSafeMath.bmul(currentBalance,\\n                                                 BalancerSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // First gets the tokens from msg.sender to this contract (Pool Controller)\\n            bool xfer = IERC20(token).transferFrom(msg.sender, address(this), deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            // Now with the tokens this contract can bind them to the pool it controls\\n            bPool.rebind(token, BalancerSafeMath.badd(currentBalance, deltaBalance), newWeight);\\n\\n            self.mintPoolShareFromLib(poolShares);\\n            self.pushPoolShareFromLib(msg.sender, poolShares);\\n        }\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param gradualUpdate - gradual update parameters from the CRP\\n    */\\n    function pokeWeights(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate\\n    )\\n        external\\n    {\\n        // Do nothing if we call this when there is no update plan\\n        if (gradualUpdate.startBlock == 0) {\\n            return;\\n        }\\n\\n        // Error to call it before the start of the plan\\n        require(block.number >= gradualUpdate.startBlock, \\\"ERR_CANT_POKE_YET\\\");\\n        // Proposed error message improvement\\n        // require(block.number >= startBlock, \\\"ERR_NO_HOKEY_POKEY\\\");\\n\\n        // This allows for pokes after endBlock that get weights to endWeights\\n        // Get the current block (or the endBlock, if we're already past the end)\\n        uint currentBlock;\\n        if (block.number > gradualUpdate.endBlock) {\\n            currentBlock = gradualUpdate.endBlock;\\n        }\\n        else {\\n            currentBlock = block.number;\\n        }\\n\\n        uint blockPeriod = BalancerSafeMath.bsub(gradualUpdate.endBlock, gradualUpdate.startBlock);\\n        uint blocksElapsed = BalancerSafeMath.bsub(currentBlock, gradualUpdate.startBlock);\\n        uint weightDelta;\\n        uint deltaPerBlock;\\n        uint newWeight;\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            // Make sure it does nothing if the new and old weights are the same (saves gas)\\n            // It's a degenerate case if they're *all* the same, but you certainly could have\\n            // a plan where you only change some of the weights in the set\\n            if (gradualUpdate.startWeights[i] != gradualUpdate.endWeights[i]) {\\n                if (gradualUpdate.endWeights[i] < gradualUpdate.startWeights[i]) {\\n                    // We are decreasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BalancerSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                        gradualUpdate.endWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BalancerSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight - (blocksElapsed * deltaPerBlock)\\n                    newWeight = BalancerSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                      BalancerSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n                else {\\n                    // We are increasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BalancerSafeMath.bsub(gradualUpdate.endWeights[i],\\n                                                        gradualUpdate.startWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BalancerSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight + (blocksElapsed * deltaPerBlock)\\n                    newWeight = BalancerSafeMath.badd(gradualUpdate.startWeights[i],\\n                                                      BalancerSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n\\n                uint bal = bPool.getBalance(tokens[i]);\\n\\n                bPool.rebind(tokens[i], bal, newWeight);\\n            }\\n        }\\n\\n        // Reset to allow add/remove tokens, or manual weight updates\\n        if (block.number >= gradualUpdate.endBlock) {\\n            gradualUpdate.startBlock = 0;\\n        }\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function commitAddToken(\\n        IBPool bPool,\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(!bPool.isBound(token), \\\"ERR_IS_BOUND\\\");\\n\\n        require(denormalizedWeight <= BalancerConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n        require(denormalizedWeight >= BalancerConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n        require(BalancerSafeMath.badd(bPool.getTotalDenormalizedWeight(),\\n                                      denormalizedWeight) <= BalancerConstants.MAX_TOTAL_WEIGHT,\\n                \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        require(balance >= BalancerConstants.MIN_BALANCE, \\\"ERR_BALANCE_BELOW_MIN\\\");\\n\\n        newToken.addr = token;\\n        newToken.balance = balance;\\n        newToken.denorm = denormalizedWeight;\\n        newToken.commitBlock = block.number;\\n        newToken.isCommitted = true;\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param addTokenTimeLockInBlocks -  Wait time between committing and applying a new token\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function applyAddToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint addTokenTimeLockInBlocks,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(newToken.isCommitted, \\\"ERR_NO_TOKEN_COMMIT\\\");\\n        require(BalancerSafeMath.bsub(block.number, newToken.commitBlock) >= addTokenTimeLockInBlocks,\\n                                      \\\"ERR_TIMELOCK_STILL_COUNTING\\\");\\n\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * newTokenWeight / totalWeight\\n        uint poolShares = BalancerSafeMath.bdiv(BalancerSafeMath.bmul(totalSupply, newToken.denorm),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // Clear this to allow adding more tokens\\n        newToken.isCommitted = false;\\n\\n        // First gets the tokens from msg.sender to this contract (Pool Controller)\\n        bool returnValue = IERC20(newToken.addr).transferFrom(self.getController(), address(self), newToken.balance);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        // Approves bPool to pull from this controller\\n        // Approve unlimited, same as when creating the pool, so they can join pools later\\n        returnValue = SafeApprove.safeApprove(IERC20(newToken.addr), address(bPool), BalancerConstants.MAX_UINT);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        bPool.bind(newToken.addr, newToken.balance, newToken.denorm);\\n\\n        self.mintPoolShareFromLib(poolShares);\\n        self.pushPoolShareFromLib(msg.sender, poolShares);\\n    }\\n\\n     /**\\n     * @notice Remove a token from the pool\\n     * @dev Logic in the CRP controls when ths can be called. There are two related permissions:\\n     *      AddRemoveTokens - which allows removing down to the underlying BPool limit of two\\n     *      RemoveAllTokens - which allows completely draining the pool by removing all tokens\\n     *                        This can result in a non-viable pool with 0 or 1 tokens (by design),\\n     *                        meaning all swapping or binding operations would fail in this state\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to remove\\n     */\\n    function removeToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token\\n    )\\n        external\\n    {\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * tokenWeight / totalWeight\\n        uint poolShares = BalancerSafeMath.bdiv(BalancerSafeMath.bmul(totalSupply,\\n                                                                      bPool.getDenormalizedWeight(token)),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // this is what will be unbound from the pool\\n        // Have to get it before unbinding\\n        uint balance = bPool.getBalance(token);\\n\\n        // Unbind and get the tokens out of balancer pool\\n        bPool.unbind(token);\\n\\n        // Now with the tokens this contract can send them to msg.sender\\n        bool xfer = IERC20(token).transfer(self.getController(), balance);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n        self.pullPoolShareFromLib(self.getController(), poolShares);\\n        self.burnPoolShareFromLib(poolShares);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n         }\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external cals to pokeWeights\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param newWeights - final weights we want to get to\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n     * @param minimumWeightChangeBlockPeriod - needed to validate the block period\\n    */\\n    function updateWeightsGradually(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate,\\n        uint[] calldata newWeights,\\n        uint startBlock,\\n        uint endBlock,\\n        uint minimumWeightChangeBlockPeriod\\n    )\\n        external\\n    {\\n        require(block.number < endBlock, \\\"ERR_GRADUAL_UPDATE_TIME_TRAVEL\\\");\\n        \\n        if (block.number > startBlock) {\\n            // This means the weight update should start ASAP\\n            // Moving the start block up prevents a big jump/discontinuity in the weights\\n            gradualUpdate.startBlock = block.number;\\n        }\\n        else{\\n            gradualUpdate.startBlock = startBlock;\\n        }\\n\\n        // Enforce a minimum time over which to make the changes\\n        // The also prevents endBlock <= startBlock\\n        require(BalancerSafeMath.bsub(endBlock, gradualUpdate.startBlock) >= minimumWeightChangeBlockPeriod,\\n                \\\"ERR_WEIGHT_CHANGE_TIME_BELOW_MIN\\\");\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // Must specify weights for all tokens\\n        require(newWeights.length == tokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        uint weightsSum = 0;\\n        gradualUpdate.startWeights = new uint[](tokens.length);\\n\\n        // Check that endWeights are valid now to avoid reverting in a future pokeWeights call\\n        //\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            require(newWeights[i] <= BalancerConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n            require(newWeights[i] >= BalancerConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n\\n            weightsSum = BalancerSafeMath.badd(weightsSum, newWeights[i]);\\n            gradualUpdate.startWeights[i] = bPool.getDenormalizedWeight(tokens[i]);\\n        }\\n        require(weightsSum <= BalancerConstants.MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n        gradualUpdate.endBlock = endBlock;\\n        gradualUpdate.endWeights = newWeights;\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    )\\n         external\\n         view\\n         returns (uint[] memory actualAmountsIn)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = BalancerSafeMath.bdiv(poolAmountOut,\\n                                           BalancerSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = BalancerSafeMath.bmul(ratio,\\n                                                       BalancerSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint pAiAfterExitFee, uint[] memory actualAmountsOut)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n        pAiAfterExitFee = BalancerSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        uint ratio = BalancerSafeMath.bdiv(pAiAfterExitFee,\\n                                           BalancerSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = BalancerSafeMath.bmul(ratio,\\n                                                        BalancerSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    )\\n        external\\n        view\\n        returns (uint poolAmountOut)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= BalancerSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BalancerConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        poolAmountOut = bPool.calcPoolOutGivenSingleIn(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    )\\n        external\\n        view\\n        returns (uint tokenAmountIn)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountIn = bPool.calcSingleInGivenPoolOut(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= BalancerSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BalancerConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint tokenAmountOut)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        require(tokenAmountOut <= BalancerSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BalancerConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return exitFee - calculated exit fee\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint poolAmountIn)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= BalancerSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BalancerConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n        poolAmountIn = bPool.calcPoolInGivenSingleOut(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n    }\\n\\n    // Internal functions\\n\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd085e09cdfffae7f0c9b3e444cfefe1c860d25a498c3eface37db40374ae8d15\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x613f65610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c806382495b4511610096578063d505a94e11610070578063d505a94e14610247578063df90de0b1461025a578063efa587741461026d578063f544aa1c1461028d576100f4565b806382495b45146101e7578063a1925f1d14610207578063b489ec1914610227576100f4565b80635471c3e4116100d25780635471c3e41461015b5780636a6dc6e714610186578063724a2d53146101a657806377d44349146101c7576100f4565b80630970e47f146100f957806313b8bf241461011b5780631c1af1361461013b575b600080fd5b81801561010557600080fd5b50610119610114366004613721565b6102ad565b005b81801561012757600080fd5b506101196101363660046136ac565b610754565b81801561014757600080fd5b506101196101563660046134ee565b610a46565b61016e610169366004613815565b610a52565b60405161017d93929190613eac565b60405180910390f35b6101996101943660046137bb565b610d2b565b60405161017d9190613e95565b6101b96101b43660046137bb565b611180565b60405161017d929190613e9e565b8180156101d357600080fd5b506101196101e2366004613526565b6115e3565b8180156101f357600080fd5b50610119610202366004613681565b611624565b61021a610215366004613815565b6119a6565b60405161017d91906139a9565b81801561023357600080fd5b50610119610242366004613631565b611c61565b6101b96102553660046137bb565b611e57565b6101996102683660046137bb565b612233565b81801561027957600080fd5b50610119610288366004613886565b612604565b81801561029957600080fd5b506101196102a836600461376b565b612976565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e857600080fd5b505afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906138cb565b905060006104226103ac83866001600160a01b031663948d8ce6876040518263ffffffff1660e01b8152600401610357919061391d565b60206040518083038186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a791906138cb565b61302c565b856001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e557600080fd5b505afa1580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d91906138cb565b6130ab565b90506000846001600160a01b031663f8b2cb4f856040518263ffffffff1660e01b8152600401610452919061391d565b60206040518083038186803b15801561046a57600080fd5b505afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a291906138cb565b60405163cf5e7bd360e01b81529091506001600160a01b0386169063cf5e7bd3906104d190879060040161391d565b600060405180830381600087803b1580156104eb57600080fd5b505af11580156104ff573d6000803e3d6000fd5b505050506000846001600160a01b031663a9059cbb886001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054d57600080fd5b505afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061350a565b846040518363ffffffff1660e01b81526004016105a3929190613955565b602060405180830381600087803b1580156105bd57600080fd5b505af11580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f59190613611565b90508061061d5760405162461bcd60e51b815260040161061490613e17565b60405180910390fd5b866001600160a01b03166355c32a23886001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d919061350a565b856040518363ffffffff1660e01b81526004016106bb929190613955565b600060405180830381600087803b1580156106d557600080fd5b505af11580156106e9573d6000803e3d6000fd5b505060405163011075bb60e51b81526001600160a01b038a16925063220eb7609150610719908690600401613e95565b600060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b5050505050505050505050565b8143106107735760405162461bcd60e51b8152600401610614906139e9565b8243111561078357438655610787565b8286555b8061079683886000015461313c565b10156107b45760405162461bcd60e51b815260040161061490613a20565b6060876001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156107ef57600080fd5b505afa158015610803573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082b9190810190613566565b8051909150851461084e5760405162461bcd60e51b815260040161061490613a55565b6000815167ffffffffffffffff8111801561086857600080fd5b50604051908082528060200260200182016040528015610892578160200160208202803683370190505b5080516108a99160028b0191602090910190613406565b5060005b82518110156109fb576802b5e3af16b18800008888838181106108cc57fe5b9050602002013511156108f15760405162461bcd60e51b815260040161061490613cfc565b670de0b6b3a764000088888381811061090657fe5b90506020020135101561092b5760405162461bcd60e51b815260040161061490613c54565b6109478289898481811061093b57fe5b90506020020135613175565b9150896001600160a01b031663948d8ce684838151811061096457fe5b60200260200101516040518263ffffffff1660e01b8152600401610988919061391d565b60206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d891906138cb565b8960020182815481106109e757fe5b6000918252602090912001556001016108ad565b506802b5e3af16b1880000811115610a255760405162461bcd60e51b815260040161061490613b2d565b60018801849055610a3a600389018888613451565b50505050505050505050565b610a4f816131a1565b50565b600080606080876001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a9157600080fd5b505afa158015610aa5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610acd9190810190613566565b80519091508514610af05760405162461bcd60e51b815260040161061490613b5b565b6000896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6391906138cb565b9050610b7088600061302c565b9450610b7c888661313c565b93506000610b8f8561041d846001613175565b905080610bae5760405162461bcd60e51b815260040161061490613adc565b825167ffffffffffffffff81118015610bc657600080fd5b50604051908082528060200260200182016040528015610bf0578160200160208202803683370190505b50935060005b8351811015610d1c576000848281518110610c0d57fe5b6020026020010151905060008c6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401610c45919061391d565b60206040518083038186803b158015610c5d57600080fd5b505afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9591906138cb565b90506000610ca8856103a784600161313c565b905080610cc75760405162461bcd60e51b815260040161061490613adc565b8b8b85818110610cd357fe5b90506020020135811015610cf95760405162461bcd60e51b815260040161061490613b89565b80888581518110610d0657fe5b6020908102919091010152505050600101610bf6565b50505050955095509592505050565b604051630bcded8960e21b81526000906001600160a01b03861690632f37b62490610d5a90879060040161391d565b60206040518083038186803b158015610d7257600080fd5b505afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa9190613611565b610dc65760405162461bcd60e51b815260040161061490613cad565b60405163f8b2cb4f60e01b81526001600160a01b03861690635c1bbaf790829063f8b2cb4f90610dfa90899060040161391d565b60206040518083038186803b158015610e1257600080fd5b505afa158015610e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4a91906138cb565b604051634a46c67360e11b81526001600160a01b0389169063948d8ce690610e76908a9060040161391d565b60206040518083038186803b158015610e8e57600080fd5b505afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec691906138cb565b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3791906138cb565b896001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7057600080fd5b505afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa891906138cb565b888b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a91906138cb565b6040518763ffffffff1660e01b815260040161103b96959493929190613ecb565b60206040518083038186803b15801561105357600080fd5b505afa158015611067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108b91906138cb565b9050806110aa5760405162461bcd60e51b815260040161061490613adc565b818111156110ca5760405162461bcd60e51b815260040161061490613c2e565b60405163f8b2cb4f60e01b8152611158906001600160a01b0387169063f8b2cb4f906110fa90889060040161391d565b60206040518083038186803b15801561111257600080fd5b505afa158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a91906138cb565b6706f05b59d3b2000061302c565b8111156111775760405162461bcd60e51b815260040161061490613ab2565b95945050505050565b600080856001600160a01b0316632f37b624866040518263ffffffff1660e01b81526004016111af919061391d565b60206040518083038186803b1580156111c757600080fd5b505afa1580156111db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ff9190613611565b61121b5760405162461bcd60e51b815260040161061490613cad565b60405163f8b2cb4f60e01b81526112a9906001600160a01b0388169063f8b2cb4f9061124b90899060040161391d565b60206040518083038186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b91906138cb565b6704a03ce68d21555661302c565b8411156112c85760405162461bcd60e51b815260040161061490613c82565b60405163f8b2cb4f60e01b81526001600160a01b038716906382f652ad90829063f8b2cb4f906112fc908a9060040161391d565b60206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c91906138cb565b604051634a46c67360e11b81526001600160a01b038a169063948d8ce690611378908b9060040161391d565b60206040518083038186803b15801561139057600080fd5b505afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c891906138cb565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140157600080fd5b505afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143991906138cb565b8a6001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa91906138cb565b898c6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c91906138cb565b6040518763ffffffff1660e01b815260040161153d96959493929190613ecb565b60206040518083038186803b15801561155557600080fd5b505afa158015611569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158d91906138cb565b9050806115ac5760405162461bcd60e51b815260040161061490613adc565b828111156115cc5760405162461bcd60e51b815260040161061490613c2e565b6115d781600061302c565b91509550959350505050565b60005b8181101561161f576116178383838181106115fd57fe5b905060200201602081019061161291906134ee565b6131a1565b6001016115e6565b505050565b805461162f576119a2565b80544310156116505760405162461bcd60e51b815260040161061490613bd9565b600081600101544311156116695750600181015461166c565b50435b60006116808360010154846000015461313c565b9050600061169283856000015461313c565b905060008060006060886001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156116d457600080fd5b505afa1580156116e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117109190810190613566565b905060005b81518110156119895788600301818154811061172d57fe5b906000526020600020015489600201828154811061174757fe5b9060005260206000200154146119815788600201818154811061176657fe5b906000526020600020015489600301828154811061178057fe5b9060005260206000200154101561180e576117cd8960020182815481106117a357fe5b90600052602060002001548a60030183815481106117bd57fe5b906000526020600020015461313c565b94506117d985886130ab565b93506118078960020182815481106117ed57fe5b9060005260206000200154611802888761302c565b61313c565b9250611877565b61183a89600301828154811061182057fe5b90600052602060002001548a60020183815481106117bd57fe5b945061184685886130ab565b935061187489600201828154811061185a57fe5b906000526020600020015461186f888761302c565b613175565b92505b60008a6001600160a01b031663f8b2cb4f84848151811061189457fe5b60200260200101516040518263ffffffff1660e01b81526004016118b8919061391d565b60206040518083038186803b1580156118d057600080fd5b505afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190891906138cb565b90508a6001600160a01b0316633fdddaa284848151811061192557fe5b602002602001015183876040518463ffffffff1660e01b815260040161194d93929190613988565b600060405180830381600087803b15801561196757600080fd5b505af115801561197b573d6000803e3d6000fd5b50505050505b600101611715565b508760010154431061199a57600088555b505050505050505b5050565b606080856001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156119e257600080fd5b505afa1580156119f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a1e9190810190613566565b80519091508314611a415760405162461bcd60e51b815260040161061490613b5b565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7c57600080fd5b505afa158015611a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab491906138cb565b90506000611ac78761041d84600161313c565b905080611ae65760405162461bcd60e51b815260040161061490613adc565b825167ffffffffffffffff81118015611afe57600080fd5b50604051908082528060200260200182016040528015611b28578160200160208202803683370190505b50935060005b8351811015611c54576000848281518110611b4557fe5b6020026020010151905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401611b7d919061391d565b60206040518083038186803b158015611b9557600080fd5b505afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd91906138cb565b90506000611be0856103a7846001613175565b905080611bff5760405162461bcd60e51b815260040161061490613adc565b898985818110611c0b57fe5b90506020020135811115611c315760405162461bcd60e51b815260040161061490613c2e565b80888581518110611c3e57fe5b6020908102919091010152505050600101611b2e565b5050505095945050505050565b604051630bcded8960e21b81526001600160a01b03861690632f37b62490611c8d90879060040161391d565b60206040518083038186803b158015611ca557600080fd5b505afa158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190613611565b15611cfa5760405162461bcd60e51b815260040161061490613a8c565b6802b5e3af16b1880000821115611d235760405162461bcd60e51b815260040161061490613cfc565b670de0b6b3a7640000821015611d4b5760405162461bcd60e51b815260040161061490613c54565b670de0b6b3a7640000603202611dd1866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9357600080fd5b505afa158015611da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcb91906138cb565b84613175565b1115611def5760405162461bcd60e51b815260040161061490613b2d565b612710831015611e115760405162461bcd60e51b815260040161061490613de8565b805460038201939093556002810191909155436001820155600160a01b6001600160a01b03199092166001600160a01b03939093169290921760ff60a01b191617905550565b600080856001600160a01b0316632f37b624866040518263ffffffff1660e01b8152600401611e86919061391d565b60206040518083038186803b158015611e9e57600080fd5b505afa158015611eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed69190613611565b611ef25760405162461bcd60e51b815260040161061490613cad565b60405163f8b2cb4f60e01b81526001600160a01b03871690638929801290829063f8b2cb4f90611f26908a9060040161391d565b60206040518083038186803b158015611f3e57600080fd5b505afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7691906138cb565b604051634a46c67360e11b81526001600160a01b038a169063948d8ce690611fa2908b9060040161391d565b60206040518083038186803b158015611fba57600080fd5b505afa158015611fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff291906138cb565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206391906138cb565b8a6001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b15801561209c57600080fd5b505afa1580156120b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d491906138cb565b898c6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214691906138cb565b6040518763ffffffff1660e01b815260040161216796959493929190613ecb565b60206040518083038186803b15801561217f57600080fd5b505afa158015612193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b791906138cb565b9050828110156121d95760405162461bcd60e51b815260040161061490613b89565b60405163f8b2cb4f60e01b8152612209906001600160a01b0388169063f8b2cb4f9061124b90899060040161391d565b8111156122285760405162461bcd60e51b815260040161061490613c82565b6115d784600061302c565b604051630bcded8960e21b81526000906001600160a01b03861690632f37b6249061226290879060040161391d565b60206040518083038186803b15801561227a57600080fd5b505afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b29190613611565b6122ce5760405162461bcd60e51b815260040161061490613cad565b60405163f8b2cb4f60e01b81526122fe906001600160a01b0387169063f8b2cb4f906110fa90889060040161391d565b83111561231d5760405162461bcd60e51b815260040161061490613ab2565b60405163f8b2cb4f60e01b81526001600160a01b03861690638656b65390829063f8b2cb4f9061235190899060040161391d565b60206040518083038186803b15801561236957600080fd5b505afa15801561237d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a191906138cb565b604051634a46c67360e11b81526001600160a01b0389169063948d8ce6906123cd908a9060040161391d565b60206040518083038186803b1580156123e557600080fd5b505afa1580156123f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241d91906138cb565b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245657600080fd5b505afa15801561246a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248e91906138cb565b896001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c757600080fd5b505afa1580156124db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ff91906138cb565b888b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561253957600080fd5b505afa15801561254d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257191906138cb565b6040518763ffffffff1660e01b815260040161259296959493929190613ecb565b60206040518083038186803b1580156125aa57600080fd5b505afa1580156125be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e291906138cb565b9050818110156111775760405162461bcd60e51b815260040161061490613b89565b8054600160a01b900460ff1661262c5760405162461bcd60e51b8152600401610614906139bc565b8161263b43836001015461313c565b10156126595760405162461bcd60e51b815260040161061490613d2a565b6000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561269457600080fd5b505afa1580156126a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cc91906138cb565b9050600061271a6126e183856002015461302c565b866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e557600080fd5b835460ff60a01b198116855560408051633018205f60e01b815290519293506000926001600160a01b03928316926323b872dd92908b1691633018205f91600480820192602092909190829003018186803b15801561277857600080fd5b505afa15801561278c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b0919061350a565b8987600301546040518463ffffffff1660e01b81526004016127d493929190613931565b602060405180830381600087803b1580156127ee57600080fd5b505af1158015612802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128269190613611565b9050806128455760405162461bcd60e51b815260040161061490613e17565b835461285d906001600160a01b031687600019613243565b90508061287c5760405162461bcd60e51b815260040161061490613e17565b835460038501546002860154604051631c9c3ca760e31b81526001600160a01b03808b169463e4e1e538946128b8949190921692600401613988565b600060405180830381600087803b1580156128d257600080fd5b505af11580156128e6573d6000803e3d6000fd5b50506040516325d2bc4160e11b81526001600160a01b038a169250634ba578829150612916908590600401613e95565b600060405180830381600087803b15801561293057600080fd5b505af1158015612944573d6000803e3d6000fd5b5050604051630257733360e21b81526001600160a01b038a16925063095dcccc91506107199033908690600401613955565b670de0b6b3a764000081101561299e5760405162461bcd60e51b815260040161061490613cd4565b6802b5e3af16b18800008111156129c75760405162461bcd60e51b815260040161061490613b05565b604051634a46c67360e11b81526000906001600160a01b0385169063948d8ce6906129f690869060040161391d565b60206040518083038186803b158015612a0e57600080fd5b505afa158015612a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4691906138cb565b905081811415612a565750613026565b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f90612a8590879060040161391d565b60206040518083038186803b158015612a9d57600080fd5b505afa158015612ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad591906138cb565b90506000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1257600080fd5b505afa158015612b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4a91906138cb565b90506000866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8757600080fd5b505afa158015612b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bbf91906138cb565b905060008060008087891015612df157612bd9888a61313c565b9150612be9866103a784886130ab565b9350612bf9876103a7848b6130ab565b9250612c05878461313c565b9050612710811015612c295760405162461bcd60e51b815260040161061490613bb0565b604051631feeed5160e11b81526001600160a01b038c1690633fdddaa290612c59908d9085908e90600401613988565b600060405180830381600087803b158015612c7357600080fd5b505af1158015612c87573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038d16915063a9059cbb90612cbc9033908890600401613955565b602060405180830381600087803b158015612cd657600080fd5b505af1158015612cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0e9190613611565b905080612d2d5760405162461bcd60e51b815260040161061490613e17565b6040516355c32a2360e01b81526001600160a01b038e16906355c32a2390612d5b9033908990600401613955565b600060405180830381600087803b158015612d7557600080fd5b505af1158015612d89573d6000803e3d6000fd5b505050508c6001600160a01b031663220eb760866040518263ffffffff1660e01b8152600401612db99190613e95565b600060405180830381600087803b158015612dd357600080fd5b505af1158015612de7573d6000803e3d6000fd5b505050505061301d565b612dfb898961313c565b91506802b5e3af16b1880000612e118684613175565b1115612e2f5760405162461bcd60e51b815260040161061490613b2d565b612e3d866103a784886130ab565b9350612e4d876103a7848b6130ab565b925060008a6001600160a01b03166323b872dd3330876040518463ffffffff1660e01b8152600401612e8193929190613931565b602060405180830381600087803b158015612e9b57600080fd5b505af1158015612eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed39190613611565b905080612ef25760405162461bcd60e51b815260040161061490613e17565b8b6001600160a01b0316633fdddaa28c612f0c8b88613175565b8d6040518463ffffffff1660e01b8152600401612f2b93929190613988565b600060405180830381600087803b158015612f4557600080fd5b505af1158015612f59573d6000803e3d6000fd5b505050508c6001600160a01b0316634ba57882866040518263ffffffff1660e01b8152600401612f899190613e95565b600060405180830381600087803b158015612fa357600080fd5b505af1158015612fb7573d6000803e3d6000fd5b505050508c6001600160a01b031663095dcccc33876040518363ffffffff1660e01b8152600401612fe9929190613955565b600060405180830381600087803b15801561300357600080fd5b505af1158015613017573d6000803e3d6000fd5b50505050505b50505050505050505b50505050565b60008261303b575060006130a5565b8282028284828161304857fe5b04146130665760405162461bcd60e51b815260040161061490613d61565b6706f05b59d3b200008101818110156130915760405162461bcd60e51b815260040161061490613d61565b6000670de0b6b3a7640000825b0493505050505b92915050565b6000816130ca5760405162461bcd60e51b815260040161061490613dc2565b826130d7575060006130a5565b670de0b6b3a7640000838102908482816130ed57fe5b041461310b5760405162461bcd60e51b815260040161061490613c04565b600283048101818110156131315760405162461bcd60e51b815260040161061490613c04565b600084828161309e57fe5b600080600061314b85856133e1565b91509150801561316d5760405162461bcd60e51b815260040161061490613e40565b509392505050565b60008282018381101561319a5760405162461bcd60e51b815260040161061490613e6b565b9392505050565b60405163a9059cbb60e01b81526000906001600160a01b0383169063a9059cbb906131d29033908590600401613955565b602060405180830381600087803b1580156131ec57600080fd5b505af1158015613200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132249190613611565b9050806119a25760405162461bcd60e51b815260040161061490613d8b565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b815260040161327492919061396e565b60206040518083038186803b15801561328c57600080fd5b505afa1580156132a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c491906138cb565b9050828114156132d857600191505061319a565b80156133615760405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061330d908790600090600401613955565b602060405180830381600087803b15801561332757600080fd5b505af115801561333b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335f9190613611565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061338f9087908790600401613955565b602060405180830381600087803b1580156133a957600080fd5b505af11580156133bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190613611565b6000808383116133f757505080820360006133ff565b505081810360015b9250929050565b828054828255906000526020600020908101928215613441579160200282015b82811115613441578251825591602001919060010190613426565b5061344d92915061348c565b5090565b828054828255906000526020600020908101928215613441579160200282015b82811115613441578235825591602001919060010190613471565b5b8082111561344d576000815560010161348d565b80516130a581613f1a565b60008083601f8401126134bd578182fd5b50813567ffffffffffffffff8111156134d4578182fd5b60208301915083602080830285010111156133ff57600080fd5b6000602082840312156134ff578081fd5b813561319a81613f1a565b60006020828403121561351b578081fd5b815161319a81613f1a565b60008060208385031215613538578081fd5b823567ffffffffffffffff81111561354e578182fd5b61355a858286016134ac565b90969095509350505050565b60006020808385031215613578578182fd5b825167ffffffffffffffff8082111561358f578384fd5b818501915085601f8301126135a2578384fd5b8151818111156135b0578485fd5b83810291506135c0848301613ef3565b8181528481019084860184860187018a10156135da578788fd5b8795505b83861015613604576135f08a826134a1565b8352600195909501949186019186016135de565b5098975050505050505050565b600060208284031215613622578081fd5b8151801515811461319a578182fd5b600080600080600060a08688031215613648578081fd5b853561365381613f1a565b9450602086013561366381613f1a565b94979496505050506040830135926060810135926080909101359150565b60008060408385031215613693578182fd5b823561369e81613f1a565b946020939093013593505050565b600080600080600080600060c0888a0312156136c6578182fd5b87356136d181613f1a565b965060208801359550604088013567ffffffffffffffff8111156136f3578283fd5b6136ff8a828b016134ac565b989b979a50986060810135976080820135975060a09091013595509350505050565b600080600060608486031215613735578283fd5b833561374081613f1a565b9250602084013561375081613f1a565b9150604084013561376081613f1a565b809150509250925092565b60008060008060808587031215613780578384fd5b843561378b81613f1a565b9350602085013561379b81613f1a565b925060408501356137ab81613f1a565b9396929550929360600135925050565b600080600080600060a086880312156137d2578283fd5b85356137dd81613f1a565b945060208601356137ed81613f1a565b935060408601356137fd81613f1a565b94979396509394606081013594506080013592915050565b60008060008060006080868803121561382c578283fd5b853561383781613f1a565b9450602086013561384781613f1a565b935060408601359250606086013567ffffffffffffffff811115613869578182fd5b613875888289016134ac565b969995985093965092949392505050565b6000806000806080858703121561389b578182fd5b84356138a681613f1a565b935060208501356138b681613f1a565b93969395505050506040820135916060013590565b6000602082840312156138dc578081fd5b5051919050565b6000815180845260208085019450808401835b83811015613912578151875295820195908201906001016138f6565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825261319a60208301846138e3565b60208082526013908201527211549497d393d7d513d2d15397d0d3d3535255606a1b604082015260600190565b6020808252601e908201527f4552525f4752414455414c5f5550444154455f54494d455f54524156454c0000604082015260600190565b6020808252818101527f4552525f5745494748545f4348414e47455f54494d455f42454c4f575f4d494e604082015260600190565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b6020808252600c908201526b11549497d254d7d093d5539160a21b604082015260600190565b60208082526010908201526f4552525f4d41585f494e5f524154494f60801b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b6020808252600e908201526d11549497d3505617d5d15251d21560921b604082015260600190565b60208082526014908201527311549497d3505617d513d5105317d5d15251d21560621b604082015260600190565b60208082526014908201527308aa4a4be829a9eaa9ca8a6be9a92a69a82a886960631b604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252600f908201526e4552525f4d494e5f42414c414e434560881b604082015260600190565b60208082526011908201527011549497d0d0539517d413d2d157d65155607a1b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b60208082526014908201527322a9292faba2a4a3a42a2fa122a627abafa6a4a760611b604082015260600190565b6020808252601190820152704552525f4d41585f4f55545f524154494f60781b604082015260600190565b6020808252600d908201526c11549497d393d517d093d55391609a1b604082015260600190565b6020808252600e908201526d11549497d3525397d5d15251d21560921b604082015260600190565b60208082526014908201527308aa4a4beae8a928e90a8be82849eac8abe9a82b60631b604082015260600190565b6020808252601b908201527f4552525f54494d454c4f434b5f5354494c4c5f434f554e54494e470000000000604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b60208082526017908201527f4552525f4e4f4e434f4e464f524d494e475f544f4b454e000000000000000000604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b60208082526015908201527422a9292fa120a620a721a2afa122a627abafa6a4a760591b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b90815260200190565b918252602082015260400190565b60008482528360208301526060604083015261117760608301846138e3565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff81118282101715613f1257600080fd5b604052919050565b6001600160a01b0381168114610a4f57600080fdfea2646970667358221220778affdf9cfa922a1096118921a8977b10c8667312d12e3cf2e5f6a53189b62c64736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c806382495b4511610096578063d505a94e11610070578063d505a94e14610247578063df90de0b1461025a578063efa587741461026d578063f544aa1c1461028d576100f4565b806382495b45146101e7578063a1925f1d14610207578063b489ec1914610227576100f4565b80635471c3e4116100d25780635471c3e41461015b5780636a6dc6e714610186578063724a2d53146101a657806377d44349146101c7576100f4565b80630970e47f146100f957806313b8bf241461011b5780631c1af1361461013b575b600080fd5b81801561010557600080fd5b50610119610114366004613721565b6102ad565b005b81801561012757600080fd5b506101196101363660046136ac565b610754565b81801561014757600080fd5b506101196101563660046134ee565b610a46565b61016e610169366004613815565b610a52565b60405161017d93929190613eac565b60405180910390f35b6101996101943660046137bb565b610d2b565b60405161017d9190613e95565b6101b96101b43660046137bb565b611180565b60405161017d929190613e9e565b8180156101d357600080fd5b506101196101e2366004613526565b6115e3565b8180156101f357600080fd5b50610119610202366004613681565b611624565b61021a610215366004613815565b6119a6565b60405161017d91906139a9565b81801561023357600080fd5b50610119610242366004613631565b611c61565b6101b96102553660046137bb565b611e57565b6101996102683660046137bb565b612233565b81801561027957600080fd5b50610119610288366004613886565b612604565b81801561029957600080fd5b506101196102a836600461376b565b612976565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e857600080fd5b505afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906138cb565b905060006104226103ac83866001600160a01b031663948d8ce6876040518263ffffffff1660e01b8152600401610357919061391d565b60206040518083038186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a791906138cb565b61302c565b856001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e557600080fd5b505afa1580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d91906138cb565b6130ab565b90506000846001600160a01b031663f8b2cb4f856040518263ffffffff1660e01b8152600401610452919061391d565b60206040518083038186803b15801561046a57600080fd5b505afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a291906138cb565b60405163cf5e7bd360e01b81529091506001600160a01b0386169063cf5e7bd3906104d190879060040161391d565b600060405180830381600087803b1580156104eb57600080fd5b505af11580156104ff573d6000803e3d6000fd5b505050506000846001600160a01b031663a9059cbb886001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054d57600080fd5b505afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061350a565b846040518363ffffffff1660e01b81526004016105a3929190613955565b602060405180830381600087803b1580156105bd57600080fd5b505af11580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f59190613611565b90508061061d5760405162461bcd60e51b815260040161061490613e17565b60405180910390fd5b866001600160a01b03166355c32a23886001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d919061350a565b856040518363ffffffff1660e01b81526004016106bb929190613955565b600060405180830381600087803b1580156106d557600080fd5b505af11580156106e9573d6000803e3d6000fd5b505060405163011075bb60e51b81526001600160a01b038a16925063220eb7609150610719908690600401613e95565b600060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b5050505050505050505050565b8143106107735760405162461bcd60e51b8152600401610614906139e9565b8243111561078357438655610787565b8286555b8061079683886000015461313c565b10156107b45760405162461bcd60e51b815260040161061490613a20565b6060876001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156107ef57600080fd5b505afa158015610803573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082b9190810190613566565b8051909150851461084e5760405162461bcd60e51b815260040161061490613a55565b6000815167ffffffffffffffff8111801561086857600080fd5b50604051908082528060200260200182016040528015610892578160200160208202803683370190505b5080516108a99160028b0191602090910190613406565b5060005b82518110156109fb576802b5e3af16b18800008888838181106108cc57fe5b9050602002013511156108f15760405162461bcd60e51b815260040161061490613cfc565b670de0b6b3a764000088888381811061090657fe5b90506020020135101561092b5760405162461bcd60e51b815260040161061490613c54565b6109478289898481811061093b57fe5b90506020020135613175565b9150896001600160a01b031663948d8ce684838151811061096457fe5b60200260200101516040518263ffffffff1660e01b8152600401610988919061391d565b60206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d891906138cb565b8960020182815481106109e757fe5b6000918252602090912001556001016108ad565b506802b5e3af16b1880000811115610a255760405162461bcd60e51b815260040161061490613b2d565b60018801849055610a3a600389018888613451565b50505050505050505050565b610a4f816131a1565b50565b600080606080876001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a9157600080fd5b505afa158015610aa5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610acd9190810190613566565b80519091508514610af05760405162461bcd60e51b815260040161061490613b5b565b6000896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6391906138cb565b9050610b7088600061302c565b9450610b7c888661313c565b93506000610b8f8561041d846001613175565b905080610bae5760405162461bcd60e51b815260040161061490613adc565b825167ffffffffffffffff81118015610bc657600080fd5b50604051908082528060200260200182016040528015610bf0578160200160208202803683370190505b50935060005b8351811015610d1c576000848281518110610c0d57fe5b6020026020010151905060008c6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401610c45919061391d565b60206040518083038186803b158015610c5d57600080fd5b505afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9591906138cb565b90506000610ca8856103a784600161313c565b905080610cc75760405162461bcd60e51b815260040161061490613adc565b8b8b85818110610cd357fe5b90506020020135811015610cf95760405162461bcd60e51b815260040161061490613b89565b80888581518110610d0657fe5b6020908102919091010152505050600101610bf6565b50505050955095509592505050565b604051630bcded8960e21b81526000906001600160a01b03861690632f37b62490610d5a90879060040161391d565b60206040518083038186803b158015610d7257600080fd5b505afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa9190613611565b610dc65760405162461bcd60e51b815260040161061490613cad565b60405163f8b2cb4f60e01b81526001600160a01b03861690635c1bbaf790829063f8b2cb4f90610dfa90899060040161391d565b60206040518083038186803b158015610e1257600080fd5b505afa158015610e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4a91906138cb565b604051634a46c67360e11b81526001600160a01b0389169063948d8ce690610e76908a9060040161391d565b60206040518083038186803b158015610e8e57600080fd5b505afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec691906138cb565b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eff57600080fd5b505afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3791906138cb565b896001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7057600080fd5b505afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa891906138cb565b888b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a91906138cb565b6040518763ffffffff1660e01b815260040161103b96959493929190613ecb565b60206040518083038186803b15801561105357600080fd5b505afa158015611067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108b91906138cb565b9050806110aa5760405162461bcd60e51b815260040161061490613adc565b818111156110ca5760405162461bcd60e51b815260040161061490613c2e565b60405163f8b2cb4f60e01b8152611158906001600160a01b0387169063f8b2cb4f906110fa90889060040161391d565b60206040518083038186803b15801561111257600080fd5b505afa158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a91906138cb565b6706f05b59d3b2000061302c565b8111156111775760405162461bcd60e51b815260040161061490613ab2565b95945050505050565b600080856001600160a01b0316632f37b624866040518263ffffffff1660e01b81526004016111af919061391d565b60206040518083038186803b1580156111c757600080fd5b505afa1580156111db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ff9190613611565b61121b5760405162461bcd60e51b815260040161061490613cad565b60405163f8b2cb4f60e01b81526112a9906001600160a01b0388169063f8b2cb4f9061124b90899060040161391d565b60206040518083038186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b91906138cb565b6704a03ce68d21555661302c565b8411156112c85760405162461bcd60e51b815260040161061490613c82565b60405163f8b2cb4f60e01b81526001600160a01b038716906382f652ad90829063f8b2cb4f906112fc908a9060040161391d565b60206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c91906138cb565b604051634a46c67360e11b81526001600160a01b038a169063948d8ce690611378908b9060040161391d565b60206040518083038186803b15801561139057600080fd5b505afa1580156113a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c891906138cb565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140157600080fd5b505afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143991906138cb565b8a6001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b15801561147257600080fd5b505afa158015611486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114aa91906138cb565b898c6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c91906138cb565b6040518763ffffffff1660e01b815260040161153d96959493929190613ecb565b60206040518083038186803b15801561155557600080fd5b505afa158015611569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158d91906138cb565b9050806115ac5760405162461bcd60e51b815260040161061490613adc565b828111156115cc5760405162461bcd60e51b815260040161061490613c2e565b6115d781600061302c565b91509550959350505050565b60005b8181101561161f576116178383838181106115fd57fe5b905060200201602081019061161291906134ee565b6131a1565b6001016115e6565b505050565b805461162f576119a2565b80544310156116505760405162461bcd60e51b815260040161061490613bd9565b600081600101544311156116695750600181015461166c565b50435b60006116808360010154846000015461313c565b9050600061169283856000015461313c565b905060008060006060886001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156116d457600080fd5b505afa1580156116e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117109190810190613566565b905060005b81518110156119895788600301818154811061172d57fe5b906000526020600020015489600201828154811061174757fe5b9060005260206000200154146119815788600201818154811061176657fe5b906000526020600020015489600301828154811061178057fe5b9060005260206000200154101561180e576117cd8960020182815481106117a357fe5b90600052602060002001548a60030183815481106117bd57fe5b906000526020600020015461313c565b94506117d985886130ab565b93506118078960020182815481106117ed57fe5b9060005260206000200154611802888761302c565b61313c565b9250611877565b61183a89600301828154811061182057fe5b90600052602060002001548a60020183815481106117bd57fe5b945061184685886130ab565b935061187489600201828154811061185a57fe5b906000526020600020015461186f888761302c565b613175565b92505b60008a6001600160a01b031663f8b2cb4f84848151811061189457fe5b60200260200101516040518263ffffffff1660e01b81526004016118b8919061391d565b60206040518083038186803b1580156118d057600080fd5b505afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190891906138cb565b90508a6001600160a01b0316633fdddaa284848151811061192557fe5b602002602001015183876040518463ffffffff1660e01b815260040161194d93929190613988565b600060405180830381600087803b15801561196757600080fd5b505af115801561197b573d6000803e3d6000fd5b50505050505b600101611715565b508760010154431061199a57600088555b505050505050505b5050565b606080856001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156119e257600080fd5b505afa1580156119f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a1e9190810190613566565b80519091508314611a415760405162461bcd60e51b815260040161061490613b5b565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7c57600080fd5b505afa158015611a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab491906138cb565b90506000611ac78761041d84600161313c565b905080611ae65760405162461bcd60e51b815260040161061490613adc565b825167ffffffffffffffff81118015611afe57600080fd5b50604051908082528060200260200182016040528015611b28578160200160208202803683370190505b50935060005b8351811015611c54576000848281518110611b4557fe5b6020026020010151905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401611b7d919061391d565b60206040518083038186803b158015611b9557600080fd5b505afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd91906138cb565b90506000611be0856103a7846001613175565b905080611bff5760405162461bcd60e51b815260040161061490613adc565b898985818110611c0b57fe5b90506020020135811115611c315760405162461bcd60e51b815260040161061490613c2e565b80888581518110611c3e57fe5b6020908102919091010152505050600101611b2e565b5050505095945050505050565b604051630bcded8960e21b81526001600160a01b03861690632f37b62490611c8d90879060040161391d565b60206040518083038186803b158015611ca557600080fd5b505afa158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190613611565b15611cfa5760405162461bcd60e51b815260040161061490613a8c565b6802b5e3af16b1880000821115611d235760405162461bcd60e51b815260040161061490613cfc565b670de0b6b3a7640000821015611d4b5760405162461bcd60e51b815260040161061490613c54565b670de0b6b3a7640000603202611dd1866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9357600080fd5b505afa158015611da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcb91906138cb565b84613175565b1115611def5760405162461bcd60e51b815260040161061490613b2d565b612710831015611e115760405162461bcd60e51b815260040161061490613de8565b805460038201939093556002810191909155436001820155600160a01b6001600160a01b03199092166001600160a01b03939093169290921760ff60a01b191617905550565b600080856001600160a01b0316632f37b624866040518263ffffffff1660e01b8152600401611e86919061391d565b60206040518083038186803b158015611e9e57600080fd5b505afa158015611eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed69190613611565b611ef25760405162461bcd60e51b815260040161061490613cad565b60405163f8b2cb4f60e01b81526001600160a01b03871690638929801290829063f8b2cb4f90611f26908a9060040161391d565b60206040518083038186803b158015611f3e57600080fd5b505afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7691906138cb565b604051634a46c67360e11b81526001600160a01b038a169063948d8ce690611fa2908b9060040161391d565b60206040518083038186803b158015611fba57600080fd5b505afa158015611fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff291906138cb565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206391906138cb565b8a6001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b15801561209c57600080fd5b505afa1580156120b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d491906138cb565b898c6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561210e57600080fd5b505afa158015612122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214691906138cb565b6040518763ffffffff1660e01b815260040161216796959493929190613ecb565b60206040518083038186803b15801561217f57600080fd5b505afa158015612193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b791906138cb565b9050828110156121d95760405162461bcd60e51b815260040161061490613b89565b60405163f8b2cb4f60e01b8152612209906001600160a01b0388169063f8b2cb4f9061124b90899060040161391d565b8111156122285760405162461bcd60e51b815260040161061490613c82565b6115d784600061302c565b604051630bcded8960e21b81526000906001600160a01b03861690632f37b6249061226290879060040161391d565b60206040518083038186803b15801561227a57600080fd5b505afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b29190613611565b6122ce5760405162461bcd60e51b815260040161061490613cad565b60405163f8b2cb4f60e01b81526122fe906001600160a01b0387169063f8b2cb4f906110fa90889060040161391d565b83111561231d5760405162461bcd60e51b815260040161061490613ab2565b60405163f8b2cb4f60e01b81526001600160a01b03861690638656b65390829063f8b2cb4f9061235190899060040161391d565b60206040518083038186803b15801561236957600080fd5b505afa15801561237d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a191906138cb565b604051634a46c67360e11b81526001600160a01b0389169063948d8ce6906123cd908a9060040161391d565b60206040518083038186803b1580156123e557600080fd5b505afa1580156123f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241d91906138cb565b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245657600080fd5b505afa15801561246a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248e91906138cb565b896001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c757600080fd5b505afa1580156124db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ff91906138cb565b888b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561253957600080fd5b505afa15801561254d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257191906138cb565b6040518763ffffffff1660e01b815260040161259296959493929190613ecb565b60206040518083038186803b1580156125aa57600080fd5b505afa1580156125be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e291906138cb565b9050818110156111775760405162461bcd60e51b815260040161061490613b89565b8054600160a01b900460ff1661262c5760405162461bcd60e51b8152600401610614906139bc565b8161263b43836001015461313c565b10156126595760405162461bcd60e51b815260040161061490613d2a565b6000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561269457600080fd5b505afa1580156126a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cc91906138cb565b9050600061271a6126e183856002015461302c565b866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e557600080fd5b835460ff60a01b198116855560408051633018205f60e01b815290519293506000926001600160a01b03928316926323b872dd92908b1691633018205f91600480820192602092909190829003018186803b15801561277857600080fd5b505afa15801561278c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b0919061350a565b8987600301546040518463ffffffff1660e01b81526004016127d493929190613931565b602060405180830381600087803b1580156127ee57600080fd5b505af1158015612802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128269190613611565b9050806128455760405162461bcd60e51b815260040161061490613e17565b835461285d906001600160a01b031687600019613243565b90508061287c5760405162461bcd60e51b815260040161061490613e17565b835460038501546002860154604051631c9c3ca760e31b81526001600160a01b03808b169463e4e1e538946128b8949190921692600401613988565b600060405180830381600087803b1580156128d257600080fd5b505af11580156128e6573d6000803e3d6000fd5b50506040516325d2bc4160e11b81526001600160a01b038a169250634ba578829150612916908590600401613e95565b600060405180830381600087803b15801561293057600080fd5b505af1158015612944573d6000803e3d6000fd5b5050604051630257733360e21b81526001600160a01b038a16925063095dcccc91506107199033908690600401613955565b670de0b6b3a764000081101561299e5760405162461bcd60e51b815260040161061490613cd4565b6802b5e3af16b18800008111156129c75760405162461bcd60e51b815260040161061490613b05565b604051634a46c67360e11b81526000906001600160a01b0385169063948d8ce6906129f690869060040161391d565b60206040518083038186803b158015612a0e57600080fd5b505afa158015612a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4691906138cb565b905081811415612a565750613026565b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f90612a8590879060040161391d565b60206040518083038186803b158015612a9d57600080fd5b505afa158015612ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad591906138cb565b90506000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1257600080fd5b505afa158015612b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4a91906138cb565b90506000866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8757600080fd5b505afa158015612b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bbf91906138cb565b905060008060008087891015612df157612bd9888a61313c565b9150612be9866103a784886130ab565b9350612bf9876103a7848b6130ab565b9250612c05878461313c565b9050612710811015612c295760405162461bcd60e51b815260040161061490613bb0565b604051631feeed5160e11b81526001600160a01b038c1690633fdddaa290612c59908d9085908e90600401613988565b600060405180830381600087803b158015612c7357600080fd5b505af1158015612c87573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038d16915063a9059cbb90612cbc9033908890600401613955565b602060405180830381600087803b158015612cd657600080fd5b505af1158015612cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0e9190613611565b905080612d2d5760405162461bcd60e51b815260040161061490613e17565b6040516355c32a2360e01b81526001600160a01b038e16906355c32a2390612d5b9033908990600401613955565b600060405180830381600087803b158015612d7557600080fd5b505af1158015612d89573d6000803e3d6000fd5b505050508c6001600160a01b031663220eb760866040518263ffffffff1660e01b8152600401612db99190613e95565b600060405180830381600087803b158015612dd357600080fd5b505af1158015612de7573d6000803e3d6000fd5b505050505061301d565b612dfb898961313c565b91506802b5e3af16b1880000612e118684613175565b1115612e2f5760405162461bcd60e51b815260040161061490613b2d565b612e3d866103a784886130ab565b9350612e4d876103a7848b6130ab565b925060008a6001600160a01b03166323b872dd3330876040518463ffffffff1660e01b8152600401612e8193929190613931565b602060405180830381600087803b158015612e9b57600080fd5b505af1158015612eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed39190613611565b905080612ef25760405162461bcd60e51b815260040161061490613e17565b8b6001600160a01b0316633fdddaa28c612f0c8b88613175565b8d6040518463ffffffff1660e01b8152600401612f2b93929190613988565b600060405180830381600087803b158015612f4557600080fd5b505af1158015612f59573d6000803e3d6000fd5b505050508c6001600160a01b0316634ba57882866040518263ffffffff1660e01b8152600401612f899190613e95565b600060405180830381600087803b158015612fa357600080fd5b505af1158015612fb7573d6000803e3d6000fd5b505050508c6001600160a01b031663095dcccc33876040518363ffffffff1660e01b8152600401612fe9929190613955565b600060405180830381600087803b15801561300357600080fd5b505af1158015613017573d6000803e3d6000fd5b50505050505b50505050505050505b50505050565b60008261303b575060006130a5565b8282028284828161304857fe5b04146130665760405162461bcd60e51b815260040161061490613d61565b6706f05b59d3b200008101818110156130915760405162461bcd60e51b815260040161061490613d61565b6000670de0b6b3a7640000825b0493505050505b92915050565b6000816130ca5760405162461bcd60e51b815260040161061490613dc2565b826130d7575060006130a5565b670de0b6b3a7640000838102908482816130ed57fe5b041461310b5760405162461bcd60e51b815260040161061490613c04565b600283048101818110156131315760405162461bcd60e51b815260040161061490613c04565b600084828161309e57fe5b600080600061314b85856133e1565b91509150801561316d5760405162461bcd60e51b815260040161061490613e40565b509392505050565b60008282018381101561319a5760405162461bcd60e51b815260040161061490613e6b565b9392505050565b60405163a9059cbb60e01b81526000906001600160a01b0383169063a9059cbb906131d29033908590600401613955565b602060405180830381600087803b1580156131ec57600080fd5b505af1158015613200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132249190613611565b9050806119a25760405162461bcd60e51b815260040161061490613d8b565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b815260040161327492919061396e565b60206040518083038186803b15801561328c57600080fd5b505afa1580156132a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c491906138cb565b9050828114156132d857600191505061319a565b80156133615760405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061330d908790600090600401613955565b602060405180830381600087803b15801561332757600080fd5b505af115801561333b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335f9190613611565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061338f9087908790600401613955565b602060405180830381600087803b1580156133a957600080fd5b505af11580156133bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111779190613611565b6000808383116133f757505080820360006133ff565b505081810360015b9250929050565b828054828255906000526020600020908101928215613441579160200282015b82811115613441578251825591602001919060010190613426565b5061344d92915061348c565b5090565b828054828255906000526020600020908101928215613441579160200282015b82811115613441578235825591602001919060010190613471565b5b8082111561344d576000815560010161348d565b80516130a581613f1a565b60008083601f8401126134bd578182fd5b50813567ffffffffffffffff8111156134d4578182fd5b60208301915083602080830285010111156133ff57600080fd5b6000602082840312156134ff578081fd5b813561319a81613f1a565b60006020828403121561351b578081fd5b815161319a81613f1a565b60008060208385031215613538578081fd5b823567ffffffffffffffff81111561354e578182fd5b61355a858286016134ac565b90969095509350505050565b60006020808385031215613578578182fd5b825167ffffffffffffffff8082111561358f578384fd5b818501915085601f8301126135a2578384fd5b8151818111156135b0578485fd5b83810291506135c0848301613ef3565b8181528481019084860184860187018a10156135da578788fd5b8795505b83861015613604576135f08a826134a1565b8352600195909501949186019186016135de565b5098975050505050505050565b600060208284031215613622578081fd5b8151801515811461319a578182fd5b600080600080600060a08688031215613648578081fd5b853561365381613f1a565b9450602086013561366381613f1a565b94979496505050506040830135926060810135926080909101359150565b60008060408385031215613693578182fd5b823561369e81613f1a565b946020939093013593505050565b600080600080600080600060c0888a0312156136c6578182fd5b87356136d181613f1a565b965060208801359550604088013567ffffffffffffffff8111156136f3578283fd5b6136ff8a828b016134ac565b989b979a50986060810135976080820135975060a09091013595509350505050565b600080600060608486031215613735578283fd5b833561374081613f1a565b9250602084013561375081613f1a565b9150604084013561376081613f1a565b809150509250925092565b60008060008060808587031215613780578384fd5b843561378b81613f1a565b9350602085013561379b81613f1a565b925060408501356137ab81613f1a565b9396929550929360600135925050565b600080600080600060a086880312156137d2578283fd5b85356137dd81613f1a565b945060208601356137ed81613f1a565b935060408601356137fd81613f1a565b94979396509394606081013594506080013592915050565b60008060008060006080868803121561382c578283fd5b853561383781613f1a565b9450602086013561384781613f1a565b935060408601359250606086013567ffffffffffffffff811115613869578182fd5b613875888289016134ac565b969995985093965092949392505050565b6000806000806080858703121561389b578182fd5b84356138a681613f1a565b935060208501356138b681613f1a565b93969395505050506040820135916060013590565b6000602082840312156138dc578081fd5b5051919050565b6000815180845260208085019450808401835b83811015613912578151875295820195908201906001016138f6565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825261319a60208301846138e3565b60208082526013908201527211549497d393d7d513d2d15397d0d3d3535255606a1b604082015260600190565b6020808252601e908201527f4552525f4752414455414c5f5550444154455f54494d455f54524156454c0000604082015260600190565b6020808252818101527f4552525f5745494748545f4348414e47455f54494d455f42454c4f575f4d494e604082015260600190565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b6020808252600c908201526b11549497d254d7d093d5539160a21b604082015260600190565b60208082526010908201526f4552525f4d41585f494e5f524154494f60801b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b6020808252600e908201526d11549497d3505617d5d15251d21560921b604082015260600190565b60208082526014908201527311549497d3505617d513d5105317d5d15251d21560621b604082015260600190565b60208082526014908201527308aa4a4be829a9eaa9ca8a6be9a92a69a82a886960631b604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252600f908201526e4552525f4d494e5f42414c414e434560881b604082015260600190565b60208082526011908201527011549497d0d0539517d413d2d157d65155607a1b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b60208082526014908201527322a9292faba2a4a3a42a2fa122a627abafa6a4a760611b604082015260600190565b6020808252601190820152704552525f4d41585f4f55545f524154494f60781b604082015260600190565b6020808252600d908201526c11549497d393d517d093d55391609a1b604082015260600190565b6020808252600e908201526d11549497d3525397d5d15251d21560921b604082015260600190565b60208082526014908201527308aa4a4beae8a928e90a8be82849eac8abe9a82b60631b604082015260600190565b6020808252601b908201527f4552525f54494d454c4f434b5f5354494c4c5f434f554e54494e470000000000604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b60208082526017908201527f4552525f4e4f4e434f4e464f524d494e475f544f4b454e000000000000000000604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b60208082526015908201527422a9292fa120a620a721a2afa122a627abafa6a4a760591b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b90815260200190565b918252602082015260400190565b60008482528360208301526060604083015261117760608301846138e3565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff81118282101715613f1257600080fd5b604052919050565b6001600160a01b0381168114610a4f57600080fdfea2646970667358221220778affdf9cfa922a1096118921a8977b10c8667312d12e3cf2e5f6a53189b62c64736f6c634300060c0033",
  "devdoc": {
    "author": "Balancer Labs",
    "kind": "dev",
    "methods": {
      "applyAddToken(IConfigurableRightsPool,IBPool,uint256,SmartPoolManager.NewTokenParams storage)": {
        "params": {
          "addTokenTimeLockInBlocks": "-  Wait time between committing and applying a new token",
          "bPool": "- Core BPool the CRP is wrapping",
          "newToken": "- NewTokenParams struct used to hold the token data (in CRP storage)",
          "self": "- ConfigurableRightsPool instance calling the library"
        }
      },
      "commitAddToken(IBPool,address,uint256,uint256,SmartPoolManager.NewTokenParams storage)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "balance": "- how much to be added",
          "denormalizedWeight": "- the desired token weight",
          "newToken": "- NewTokenParams struct used to hold the token data (in CRP storage)",
          "token": "- the token to be added"
        }
      },
      "exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "minAmountsOut": "- minimum amount of asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem",
          "self": "- ConfigurableRightsPool instance calling the library"
        },
        "returns": {
          "actualAmountsOut": "- calculated amounts of each token to pull",
          "exitFee": "- calculated exit fee",
          "pAiAfterExitFee": "- final amount in (after accounting for exit fee)"
        }
      },
      "exitswapExternAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "maxPoolAmountIn": "- maximum pool tokens to be redeemed",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenAmountOut": "- amount of underlying asset tokens to receive",
          "tokenOut": "- which token the caller wants to receive"
        },
        "returns": {
          "exitFee": "- calculated exit fee",
          "poolAmountIn": "- amount of pool tokens redeemed"
        }
      },
      "exitswapPoolAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "minAmountOut": "- minimum asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenOut": "- which token the caller wants to receive"
        },
        "returns": {
          "exitFee": "- calculated exit fee",
          "tokenAmountOut": "- amount of asset tokens returned"
        }
      },
      "joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "maxAmountsIn": "- Max amount of asset tokens to spend",
          "poolAmountOut": "- number of pool tokens to receive",
          "self": "- ConfigurableRightsPool instance calling the library"
        },
        "returns": {
          "actualAmountsIn": "- calculated values of the tokens to pull in"
        }
      },
      "joinswapExternAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "minPoolAmountOut": "- minimum of pool tokens to receive",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenAmountIn": "- amount of deposit",
          "tokenIn": "- which token we're transferring in"
        },
        "returns": {
          "poolAmountOut": "- amount of pool tokens minted and transferred"
        }
      },
      "joinswapPoolAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "maxAmountIn": "- Maximum asset tokens that can be pulled to pay for the pool tokens",
          "poolAmountOut": "- amount of pool tokens to be received",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenIn": "- which token we're transferring in (system calculates amount required)"
        },
        "returns": {
          "tokenAmountIn": "- amount of asset tokens transferred in to purchase the pool tokens"
        }
      },
      "pokeWeights(IBPool,SmartPoolManager.GradualUpdateParams storage)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "gradualUpdate": "- gradual update parameters from the CRP"
        }
      },
      "removeToken(IConfigurableRightsPool,IBPool,address)": {
        "details": "Logic in the CRP controls when ths can be called. There are two related permissions:      AddRemoveTokens - which allows removing down to the underlying BPool limit of two      RemoveAllTokens - which allows completely draining the pool by removing all tokens                        This can result in a non-viable pool with 0 or 1 tokens (by design),                        meaning all swapping or binding operations would fail in this state",
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "self": "- ConfigurableRightsPool instance calling the library",
          "token": "- token to remove"
        }
      },
      "updateWeight(IConfigurableRightsPool,IBPool,address,uint256)": {
        "details": "Refactored to library to make CRPFactory deployable",
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "newWeight": "- new weight of the token",
          "self": "- ConfigurableRightsPool instance calling the library",
          "token": "- token to be reweighted"
        }
      },
      "updateWeightsGradually(IBPool,SmartPoolManager.GradualUpdateParams storage,uint256[],uint256,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "endBlock": "- when weights will be at their final values",
          "minimumWeightChangeBlockPeriod": "- needed to validate the block period",
          "newWeights": "- final weights we want to get to",
          "startBlock": "- when weights should start to change"
        }
      },
      "verifyTokenCompliance(address)": {
        "details": "Will revert if invalid",
        "params": {
          "token": "- The prospective token to verify"
        }
      },
      "verifyTokenCompliance(address[])": {
        "details": "Will revert if invalid - overloaded to save space in the main contract",
        "params": {
          "tokens": "- The prospective tokens to verify"
        }
      }
    },
    "title": "Factor out the weight updates",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "applyAddToken(IConfigurableRightsPool,IBPool,uint256,SmartPoolManager.NewTokenParams storage)": {
        "notice": "Add the token previously committed (in commitAddToken) to the pool"
      },
      "commitAddToken(IBPool,address,uint256,uint256,SmartPoolManager.NewTokenParams storage)": {
        "notice": "Schedule (commit) a token to be added; must call applyAddToken after a fixed         number of blocks to actually add the token"
      },
      "exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "notice": "Exit a pool - redeem pool tokens for underlying assets"
      },
      "exitswapExternAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "notice": "Exit a pool - redeem pool tokens for a specific amount of underlying assets         Asset must be present in the pool"
      },
      "exitswapPoolAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "notice": "Exit a pool - redeem a specific number of pool tokens for an underlying asset         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)"
      },
      "joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "notice": "Join a pool"
      },
      "joinswapExternAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "notice": "Join by swapping a fixed amount of an external token in (must be present in the pool)         System calculates the pool token amount"
      },
      "joinswapPoolAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "notice": "Join by swapping an external token in (must be present in the pool)         To receive an exact amount of pool tokens out. System calculates the deposit amount"
      },
      "pokeWeights(IBPool,SmartPoolManager.GradualUpdateParams storage)": {
        "notice": "External function called to make the contract update weights according to plan"
      },
      "removeToken(IConfigurableRightsPool,IBPool,address)": {
        "notice": "Remove a token from the pool"
      },
      "updateWeight(IConfigurableRightsPool,IBPool,address,uint256)": {
        "notice": "Update the weight of an existing token"
      },
      "updateWeightsGradually(IBPool,SmartPoolManager.GradualUpdateParams storage,uint256[],uint256,uint256,uint256)": {
        "notice": "Update weights in a predetermined way, between startBlock and endBlock,         through external cals to pokeWeights"
      },
      "verifyTokenCompliance(address)": {
        "notice": "Non ERC20-conforming tokens are problematic; don't allow them in pools"
      },
      "verifyTokenCompliance(address[])": {
        "notice": "Non ERC20-conforming tokens are problematic; don't allow them in pools"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}